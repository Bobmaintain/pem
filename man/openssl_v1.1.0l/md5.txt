DGST(1)                             OpenSSL                            DGST(1)



NNAAMMEE
       openssl-dgst, dgst, sha, sha1, mdc2, ripemd160, sha224, sha256, sha384,
       sha512, md4, md5, blake2b, blake2s - message digests

SSYYNNOOPPSSIISS
       ooppeennssssll ddggsstt [--hheellpp] [--_dd_ii_gg_ee_ss_tt] [--cc] [--dd] [--hheexx] [--bbiinnaarryy] [--rr] [--oouutt
       ffiilleennaammee] [--ssiiggnn ffiilleennaammee] [--kkeeyyffoorrmm aarrgg] [--ppaassssiinn aarrgg] [--vveerriiffyy
       ffiilleennaammee] [--pprrvveerriiffyy ffiilleennaammee] [--ssiiggnnaattuurree ffiilleennaammee] [--hhmmaacc kkeeyy]
       [--ffiippss--ffiinnggeerrpprriinntt] [--eennggiinnee iidd] [--eennggiinnee__iimmppll] [ffiillee......]

       ooppeennssssll [_d_i_g_e_s_t] [......]

DDEESSCCRRIIPPTTIIOONN
       The digest functions output the message digest of a supplied file or
       files in hexadecimal.  The digest functions also generate and verify
       digital signatures using message digests.

       The generic name, ddggsstt, may be used with an option specifying the
       algorithm to be used.  The default digest is _s_h_a_2_5_6.  A supported
       _d_i_g_e_s_t name may also be used as the command name.  To see the list of
       supported algorithms, use the _l_i_s_t _-_-_d_i_g_e_s_t_-_c_o_m_m_a_n_d_s command.

OOPPTTIIOONNSS
       --hheellpp
           Print out a usage message.

       --_dd_ii_gg_ee_ss_tt
           Specifies name of a supported digest to be used. To see the list of
           supported digests, use the command _l_i_s_t _-_-_d_i_g_e_s_t_-_c_o_m_m_a_n_d_s.

       --cc  Print out the digest in two digit groups separated by colons, only
           relevant if hheexx format output is used.

       --dd  Print out BIO debugging information.

       --hheexx
           Digest is to be output as a hex dump. This is the default case for
           a "normal" digest as opposed to a digital signature.  See NOTES
           below for digital signatures using --hheexx.

       --bbiinnaarryy
           Output the digest or signature in binary form.

       --rr  Output the digest in the "coreutils" format used by programs like
           sshhaa11ssuumm.

       --oouutt ffiilleennaammee
           Filename to output to, or standard output by default.

       --ssiiggnn ffiilleennaammee
           Digitally sign the digest using the private key in "filename".

       --kkeeyyffoorrmm aarrgg
           Specifies the key format to sign digest with. The DER, PEM, P12,
           and ENGINE formats are supported.

       --ssiiggoopptt nnmm::vv
           Pass options to the signature algorithm during sign or verify
           operations.  Names and values of these options are algorithm-
           specific.

       --ppaassssiinn aarrgg
           The private key password source. For more information about the
           format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in ooppeennssssll(1).

       --vveerriiffyy ffiilleennaammee
           Verify the signature using the public key in "filename".  The
           output is either "Verification OK" or "Verification Failure".

       --pprrvveerriiffyy ffiilleennaammee
           Verify the signature using the private key in "filename".

       --ssiiggnnaattuurree ffiilleennaammee
           The actual signature to verify.

       --hhmmaacc kkeeyy
           Create a hashed MAC using "key".

       --mmaacc aallgg
           Create MAC (keyed Message Authentication Code). The most popular
           MAC algorithm is HMAC (hash-based MAC), but there are other MAC
           algorithms which are not based on hash, for instance ggoosstt--mmaacc
           algorithm, supported by ccccggoosstt engine. MAC keys and other options
           should be set via --mmaaccoopptt parameter.

       --mmaaccoopptt nnmm::vv
           Passes options to MAC algorithm, specified by --mmaacc key.  Following
           options are supported by both by HHMMAACC and ggoosstt--mmaacc:

           kkeeyy::ssttrriinngg
               Specifies MAC key as alphanumeric string (use if key contain
               printable characters only). String length must conform to any
               restrictions of the MAC algorithm for example exactly 32 chars
               for gost-mac.

           hheexxkkeeyy::ssttrriinngg
               Specifies MAC key in hexadecimal form (two hex digits per
               byte).  Key length must conform to any restrictions of the MAC
               algorithm for example exactly 32 chars for gost-mac.

       --rraanndd ffiillee((ss))
           A file or files containing random data used to seed the random
           number generator, or an EGD socket (see RRAANNDD__eeggdd(3)).  Multiple
           files can be specified separated by an OS-dependent character.  The
           separator is ;; for MS-Windows, ,, for OpenVMS, and :: for all others.

       --ffiippss--ffiinnggeerrpprriinntt
           Compute HMAC using a specific key for certain OpenSSL-FIPS
           operations.

       --eennggiinnee iidd
           Use engine iidd for operations (including private key storage).  This
           engine is not used as source for digest algorithms, unless it is
           also specified in the configuration file or --eennggiinnee__iimmppll is also
           specified.

       --eennggiinnee__iimmppll
           When used with the --eennggiinnee option, it specifies to also use engine
           iidd for digest operations.

       ffiillee......
           File or files to digest. If no files are specified then standard
           input is used.

EEXXAAMMPPLLEESS
       To create a hex-encoded message digest of a file:
        openssl dgst -md5 -hex file.txt

       To sign a file using SHA-256 with binary file output:
        openssl dgst -sha256 -sign privatekey.pem -out signature.sign file.txt

       To verify a signature:
        openssl dgst -sha256 -verify publickey.pem \
        -signature signature.sign \
        file.txt

NNOOTTEESS
       The digest mechanisms that are available will depend on the options
       used when building OpenSSL.  The lliisstt ddiiggeesstt--ccoommmmaannddss command can be
       used to list them.

       New or agile applications should use probably use SHA-256. Other
       digests, particularly SHA-1 and MD5, are still widely used for
       interoperating with existing formats and protocols.

       When signing a file, ddggsstt will automatically determine the algorithm
       (RSA, ECC, etc) to use for signing based on the private key's ASN.1
       info.  When verifying signatures, it only handles the RSA, DSA, or
       ECDSA signature itself, not the related data to identify the signer and
       algorithm used in formats such as x.509, CMS, and S/MIME.

       A source of random numbers is required for certain signing algorithms,
       in particular ECDSA and DSA.

       The signing and verify options should only be used if a single file is
       being signed or verified.

       Hex signatures cannot be verified using ooppeennssssll.  Instead, use "xxd -r"
       or similar program to transform the hex signature into a binary
       signature prior to verification.

HHIISSTTOORRYY
       The default digest was changed from MD5 to SHA256 in OpenSSL 1.1.0 The
       FIPS-related options were removed in OpenSSL 1.1.0

CCOOPPYYRRIIGGHHTT
       Copyright 2000-2017 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



1.1.0l                            2019-09-10                           DGST(1)
