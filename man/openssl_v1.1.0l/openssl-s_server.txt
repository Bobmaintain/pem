S_SERVER(1)                         OpenSSL                        S_SERVER(1)



NNAAMMEE
       openssl-s_server, s_server - SSL/TLS server program

SSYYNNOOPPSSIISS
       ooppeennssssll ss__sseerrvveerr [--hheellpp] [--ppoorrtt ppoorrtt] [--aacccceepptt vvaall] [--nnaacccceepptt ccoouunntt]
       [--uunniixx vvaall] [--uunnlliinnkk] [--44] [--66] [--ccoonntteexxtt iidd] [--vveerriiffyy ddeepptthh] [--VVeerriiffyy
       ddeepptthh] [--ccrrll__cchheecckk] [--ccrrll__cchheecckk__aallll] [--cceerrtt ffiilleennaammee] [--cceerrttffoorrmm
       DDEERR||PPEEMM] [--kkeeyy kkeeyyffiillee] [--kkeeyyffoorrmm DDEERR||PPEEMM] [--ppaassss aarrgg] [--ddcceerrtt
       ffiilleennaammee] [--ddcceerrttffoorrmm DDEERR||PPEEMM] [--ddkkeeyy kkeeyyffiillee] [--ddkkeeyyffoorrmm DDEERR||PPEEMM]
       [--ddppaassss aarrgg] [--ddhhppaarraamm ffiilleennaammee] [--nnbbiioo] [--nnbbiioo__tteesstt] [--ccrrllff] [--ddeebbuugg]
       [--mmssgg] [--ssttaattee] [--CCAAppaatthh ddiirreeccttoorryy] [--CCAAffiillee ffiilleennaammee] [--nnoo--CCAAffiillee]
       [--nnoo--CCAAppaatthh] [--aattttiimmee ttiimmeessttaammpp] [--cchheecckk__ssss__ssiigg] [--eexxpplliicciitt__ppoolliiccyy]
       [--eexxtteennddeedd__ccrrll] [--iiggnnoorree__ccrriittiiccaall] [--iinnhhiibbiitt__aannyy] [--iinnhhiibbiitt__mmaapp]
       [--nnoo__cchheecckk__ttiimmee] [--ppaarrttiiaall__cchhaaiinn] [--ppoolliiccyy aarrgg] [--ppoolliiccyy__cchheecckk]
       [--ppoolliiccyy__pprriinntt] [--ppuurrppoossee ppuurrppoossee] [--ssuuiitteeBB__112288] [--ssuuiitteeBB__112288__oonnllyy]
       [--ssuuiitteeBB__119922] [--ttrruusstteedd__ffiirrsstt] [--nnoo__aalltt__cchhaaiinnss] [--uussee__ddeellttaass]
       [--aauutthh__lleevveell nnuumm] [--vveerriiffyy__ddeepptthh nnuumm] [--vveerriiffyy__rreettuurrnn__eerrrroorr]
       [--vveerriiffyy__eemmaaiill eemmaaiill] [--vveerriiffyy__hhoossttnnaammee hhoossttnnaammee] [--vveerriiffyy__iipp iipp]
       [--vveerriiffyy__nnaammee nnaammee] [--xx550099__ssttrriicctt] [--nnoocceerrtt] [--cclliieenntt__ssiiggaallggss
       ssiiggaallgglliisstt] [--nnaammeedd__ccuurrvvee ccuurrvvee] [--cciipphheerr cciipphheerrlliisstt] [--sseerrvveerrpprreeff]
       [--qquuiieett] [--ssssll33] [--ttllss11] [--ttllss11__11] [--ttllss11__22] [--ddttllss] [--ddttllss11]
       [--ddttllss11__22] [--lliisstteenn] [--aassyynncc] [--sspplliitt__sseenndd__ffrraagg] [--mmaaxx__ppiippeelliinneess]
       [--rreeaadd__bbuuff] [--nnoo__ssssll33] [--nnoo__ttllss11] [--nnoo__ttllss11__11] [--nnoo__ttllss11__22] [--nnoo__ddhhee]
       [--bbuuggss] [--ccoommpp] [--nnoo__ccoommpp] [--bbrriieeff] [--wwwwww] [--WWWWWW] [--HHTTTTPP] [--eennggiinnee iidd]
       [--ttllsseexxttddeebbuugg] [--nnoo__ttiicckkeett] [--iidd__pprreeffiixx aarrgg] [--rraanndd ffiillee((ss))]
       [--sseerrvveerriinnffoo ffiillee] [--nnoo__rreessuummppttiioonn__oonn__rreenneegg] [--ssttaattuuss]
       [--ssttaattuuss__vveerrbboossee] [--ssttaattuuss__ttiimmeeoouutt nnsseecc] [--ssttaattuuss__uurrll uurrll] [--aallppnn
       pprroottooccoollss] [--nneexxttpprroottoonneegg pprroottooccoollss]

DDEESSCCRRIIPPTTIIOONN
       The ss__sseerrvveerr command implements a generic SSL/TLS server which listens
       for connections on a given port using SSL/TLS.

OOPPTTIIOONNSS
       In addition to the options below the ss__sseerrvveerr utility also supports the
       common and server only options documented in the in the "Supported
       Command Line Commands" section of the SSSSLL__CCOONNFF__ccmmdd(3) manual page.

       --hheellpp
           Print out a usage message.

       --ppoorrtt ppoorrtt
           The TCP port to listen on for connections. If not specified 4433 is
           used.

       --aacccceepptt vvaall
           The optional TCP host and port to listen on for connections. If not
           specified, *:4433 is used.

       --nnaacccceepptt ccoouunntt
           The server will exit after receiving nnuummbbeerr connections, default
           unlimited.

       --uunniixx vvaall
           Unix domain socket to accept on.

       --uunnlliinnkk
           For -unix, unlink existing socket first.

       --44  Use IPv4 only.

       --66  Use IPv6 only.

       --ccoonntteexxtt iidd
           Sets the SSL context id. It can be given any string value. If this
           option is not present a default value will be used.

       --cceerrtt cceerrttnnaammee
           The certificate to use, most servers cipher suites require the use
           of a certificate and some require a certificate with a certain
           public key type: for example the DSS cipher suites require a
           certificate containing a DSS (DSA) key. If not specified then the
           filename "server.pem" will be used.

       --cceerrttffoorrmm ffoorrmmaatt
           The certificate format to use: DER or PEM. PEM is the default.

       --kkeeyy kkeeyyffiillee
           The private key to use. If not specified then the certificate file
           will be used.

       --kkeeyyffoorrmm ffoorrmmaatt
           The private format to use: DER or PEM. PEM is the default.

       --ppaassss aarrgg
           The private key password source. For more information about the
           format of aarrgg see the PPAASSSS PPHHRRAASSEE AARRGGUUMMEENNTTSS section in ooppeennssssll(1).

       --ddcceerrtt ffiilleennaammee, --ddkkeeyy kkeeyynnaammee
           Specify an additional certificate and private key, these behave in
           the same manner as the --cceerrtt and --kkeeyy options except there is no
           default if they are not specified (no additional certificate and
           key is used). As noted above some cipher suites require a
           certificate containing a key of a certain type. Some cipher suites
           need a certificate carrying an RSA key and some a DSS (DSA) key. By
           using RSA and DSS certificates and keys a server can support
           clients which only support RSA or DSS cipher suites by using an
           appropriate certificate.

       --ddcceerrttffoorrmm ffoorrmmaatt, --ddkkeeyyffoorrmm ffoorrmmaatt, --ddppaassss aarrgg
           Additional certificate and private key format and passphrase
           respectively.

       --nnoocceerrtt
           If this option is set then no certificate is used. This restricts
           the cipher suites available to the anonymous ones (currently just
           anonymous DH).

       --ddhhppaarraamm ffiilleennaammee
           The DH parameter file to use. The ephemeral DH cipher suites
           generate keys using a set of DH parameters. If not specified then
           an attempt is made to load the parameters from the server
           certificate file.  If this fails then a static set of parameters
           hard coded into the ss__sseerrvveerr program will be used.

       --nnoo__ddhhee
           If this option is set then no DH parameters will be loaded
           effectively disabling the ephemeral DH cipher suites.

       --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll
           Check the peer certificate has not been revoked by its CA.  The
           CRL(s) are appended to the certificate file. With the
           --ccrrll__cchheecckk__aallll option all CRLs of all CAs in the chain are checked.

       --CCAAppaatthh ddiirreeccttoorryy
           The directory to use for client certificate verification. This
           directory must be in "hash format", see vveerriiffyy for more
           information. These are also used when building the server
           certificate chain.

       --CCAAffiillee ffiillee
           A file containing trusted certificates to use during client
           authentication and to use when attempting to build the server
           certificate chain. The list is also used in the list of acceptable
           client CAs passed to the client when a certificate is requested.

       --nnoo--CCAAffiillee
           Do not load the trusted CA certificates from the default file
           location

       --nnoo--CCAAppaatthh
           Do not load the trusted CA certificates from the default directory
           location

       --vveerriiffyy ddeepptthh, --VVeerriiffyy ddeepptthh
           The verify depth to use. This specifies the maximum length of the
           client certificate chain and makes the server request a certificate
           from the client. With the --vveerriiffyy option a certificate is requested
           but the client does not have to send one, with the --VVeerriiffyy option
           the client must supply a certificate or an error occurs.

           If the ciphersuite cannot request a client certificate (for example
           an anonymous ciphersuite or PSK) this option has no effect.

       --aattttiimmee, --cchheecckk__ssss__ssiigg, --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll, --eexxpplliicciitt__ppoolliiccyy,
       --eexxtteennddeedd__ccrrll, --iiggnnoorree__ccrriittiiccaall, --iinnhhiibbiitt__aannyy, --iinnhhiibbiitt__mmaapp,
       --nnoo__aalltt__cchhaaiinnss, --nnoo__cchheecckk__ttiimmee, --ppaarrttiiaall__cchhaaiinn, --ppoolliiccyy, --ppoolliiccyy__cchheecckk,
       --ppoolliiccyy__pprriinntt, --ppuurrppoossee, --ssuuiitteeBB__112288, --ssuuiitteeBB__112288__oonnllyy, --ssuuiitteeBB__119922,
       --ttrruusstteedd__ffiirrsstt, --uussee__ddeellttaass, --aauutthh__lleevveell, --vveerriiffyy__ddeepptthh, --vveerriiffyy__eemmaaiill,
       --vveerriiffyy__hhoossttnnaammee, --vveerriiffyy__iipp, --vveerriiffyy__nnaammee, --xx550099__ssttrriicctt
           Set different peer certificate verification options.  See the
           vveerriiffyy(1) manual page for details.

       --vveerriiffyy__rreettuurrnn__eerrrroorr
           Verification errors normally just print a message but allow the
           connection to continue, for debugging purposes.  If this option is
           used, then verification errors close the connection.

       --ssttaattee
           Prints the SSL session states.

       --ddeebbuugg
           Print extensive debugging information including a hex dump of all
           traffic.

       --mmssgg
           Show all protocol messages with hex dump.

       --ttrraaccee
           Show verbose trace output of protocol messages. OpenSSL needs to be
           compiled with eennaabbllee--ssssll--ttrraaccee for this option to work.

       --mmssggffiillee
           File to send output of --mmssgg or --ttrraaccee to, default standard output.

       --nnbbiioo__tteesstt
           Tests non blocking I/O

       --nnbbiioo
           Turns on non blocking I/O

       --ccrrllff
           This option translated a line feed from the terminal into CR+LF.

       --qquuiieett
           Inhibit printing of session and certificate information.

       --ppsskk__hhiinntt hhiinntt
           Use the PSK identity hint hhiinntt when using a PSK cipher suite.

       --ppsskk kkeeyy
           Use the PSK key kkeeyy when using a PSK cipher suite. The key is given
           as a hexadecimal number without leading 0x, for example -psk
           1a2b3c4d.  This option must be provided in order to use a PSK
           cipher.

       --ssssll22, --ssssll33, --ttllss11, --ttllss11__11, --ttllss11__22, --nnoo__ssssll22, --nnoo__ssssll33, --nnoo__ttllss11,
       --nnoo__ttllss11__11, --nnoo__ttllss11__22
           These options require or disable the use of the specified SSL or
           TLS protocols.  By default ss__sseerrvveerr will negotiate the highest
           mutually supported protocol version.  When a specific TLS version
           is required, only that version will be accepted from the client.

       --ddttllss, --ddttllss11, --ddttllss11__22
           These options make ss__sseerrvveerr use DTLS protocols instead of TLS.
           With --ddttllss, ss__sseerrvveerr will negotiate any supported DTLS protocol
           version, whilst --ddttllss11 and --ddttllss11__22 will only support DTLSv1.0 and
           DTLSv1.2 respectively.

       --lliisstteenn
           This option can only be used in conjunction with one of the DTLS
           options above.  With this option ss__sseerrvveerr will listen on a UDP port
           for incoming connections.  Any ClientHellos that arrive will be
           checked to see if they have a cookie in them or not.  Any without a
           cookie will be responded to with a HelloVerifyRequest.  If a
           ClientHello with a cookie is received then ss__sseerrvveerr will connect to
           that peer and complete the handshake.

       --aassyynncc
           Switch on asynchronous mode. Cryptographic operations will be
           performed asynchronously. This will only have an effect if an
           asynchronous capable engine is also used via the --eennggiinnee option.
           For test purposes the dummy async engine (dasync) can be used (if
           available).

       --sspplliitt__sseenndd__ffrraagg iinntt
           The size used to split data for encrypt pipelines. If more data is
           written in one go than this value then it will be split into
           multiple pipelines, up to the maximum number of pipelines defined
           by max_pipelines. This only has an effect if a suitable ciphersuite
           has been negotiated, an engine that supports pipelining has been
           loaded, and max_pipelines is greater than 1. See
           SSSSLL__CCTTXX__sseett__sspplliitt__sseenndd__ffrraaggmmeenntt(3) for further information.

       --mmaaxx__ppiippeelliinneess iinntt
           The maximum number of encrypt/decrypt pipelines to be used. This
           will only have an effect if an engine has been loaded that supports
           pipelining (e.g. the dasync engine) and a suitable ciphersuite has
           been negotiated. The default value is 1.  See
           SSSSLL__CCTTXX__sseett__mmaaxx__ppiippeelliinneess(3) for further information.

       --rreeaadd__bbuuff iinntt
           The default read buffer size to be used for connections. This will
           only have an effect if the buffer size is larger than the size that
           would otherwise be used and pipelining is in use (see
           SSSSLL__CCTTXX__sseett__ddeeffaauulltt__rreeaadd__bbuuffffeerr__lleenn(3) for further information).

       --bbuuggss
           There are several known bug in SSL and TLS implementations. Adding
           this option enables various workarounds.

       --ccoommpp
           Enable negotiation of TLS compression.  This option was introduced
           in OpenSSL 1.1.0.  TLS compression is not recommended and is off by
           default as of OpenSSL 1.1.0.

       --nnoo__ccoommpp
           Disable negotiation of TLS compression.  TLS compression is not
           recommended and is off by default as of OpenSSL 1.1.0.

       --bbrriieeff
           Provide a brief summary of connection parameters instead of the
           normal verbose output.

       --cclliieenntt__ssiiggaallggss ssiiggaallgglliisstt
           Signature algorithms to support for client certificate
           authentication (colon-separated list)

       --nnaammeedd__ccuurrvvee ccuurrvvee
           Specifies the elliptic curve to use. NOTE: this is single curve,
           not a list.  For a list of all possible curves, use:

               $ openssl ecparam -list_curves

       --cciipphheerr cciipphheerrlliisstt
           This allows the cipher list used by the server to be modified.
           When the client sends a list of supported ciphers the first client
           cipher also included in the server list is used. Because the client
           specifies the preference order, the order of the server cipherlist
           irrelevant. See the cciipphheerrss command for more information.

       --sseerrvveerrpprreeff
           Use the server's cipher preferences, rather than the client's
           preferences.

       --ttllsseexxttddeebbuugg
           Print a hex dump of any TLS extensions received from the server.

       --nnoo__ttiicckkeett
           Disable RFC4507bis session ticket support.

       --wwwwww
           Sends a status message back to the client when it connects. This
           includes information about the ciphers used and various session
           parameters.  The output is in HTML format so this option will
           normally be used with a web browser.

       --WWWWWW
           Emulates a simple web server. Pages will be resolved relative to
           the current directory, for example if the URL
           https://myhost/page.html is requested the file ./page.html will be
           loaded.

       --HHTTTTPP
           Emulates a simple web server. Pages will be resolved relative to
           the current directory, for example if the URL
           https://myhost/page.html is requested the file ./page.html will be
           loaded. The files loaded are assumed to contain a complete and
           correct HTTP response (lines that are part of the HTTP response
           line and headers must end with CRLF).

       --rreevv
           Simple test server which just reverses the text received from the
           client and sends it back to the server. Also sets --bbrriieeff.

       --eennggiinnee iidd
           Specifying an engine (by its unique iidd string) will cause ss__sseerrvveerr
           to attempt to obtain a functional reference to the specified
           engine, thus initialising it if needed. The engine will then be set
           as the default for all available algorithms.

       --iidd__pprreeffiixx aarrgg
           Generate SSL/TLS session IDs prefixed by aarrgg. This is mostly useful
           for testing any SSL/TLS code (eg. proxies) that wish to deal with
           multiple servers, when each of which might be generating a unique
           range of session IDs (eg. with a certain prefix).

       --rraanndd ffiillee((ss))
           A file or files containing random data used to seed the random
           number generator, or an EGD socket (see RRAANNDD__eeggdd(3)).  Multiple
           files can be specified separated by an OS-dependent character.  The
           separator is ;; for MS-Windows, ,, for OpenVMS, and :: for all others.

       --sseerrvveerriinnffoo ffiillee
           A file containing one or more blocks of PEM data.  Each PEM block
           must encode a TLS ServerHello extension (2 bytes type, 2 bytes
           length, followed by "length" bytes of extension data).  If the
           client sends an empty TLS ClientHello extension matching the type,
           the corresponding ServerHello extension will be returned.

       --nnoo__rreessuummppttiioonn__oonn__rreenneegg
           Set the SSSSLL__OOPP__NNOO__SSEESSSSIIOONN__RREESSUUMMPPTTIIOONN__OONN__RREENNEEGGOOTTIIAATTIIOONN option.

       --ssttaattuuss
           Enables certificate status request support (aka OCSP stapling).

       --ssttaattuuss__vveerrbboossee
           Enables certificate status request support (aka OCSP stapling) and
           gives a verbose printout of the OCSP response.

       --ssttaattuuss__ttiimmeeoouutt nnsseecc
           Sets the timeout for OCSP response to nnsseecc seconds.

       --ssttaattuuss__uurrll uurrll
           Sets a fallback responder URL to use if no responder URL is present
           in the server certificate. Without this option an error is returned
           if the server certificate does not contain a responder address.

       --aallppnn pprroottooccoollss, --nneexxttpprroottoonneegg pprroottooccoollss
           these flags enable the Enable the Application-Layer Protocol
           Negotiation or Next Protocol Negotiation extension, respectively.
           ALPN is the IETF standard and replaces NPN.  The pprroottooccoollss list is
           a comma-separated list of supported protocol names.  The list
           should contain most wanted protocols first.  Protocol names are
           printable ASCII strings, for example "http/1.1" or "spdy/3".

CCOONNNNEECCTTEEDD CCOOMMMMAANNDDSS
       If a connection request is established with an SSL client and neither
       the --wwwwww nor the --WWWWWW option has been used then normally any data
       received from the client is displayed and any key presses will be sent
       to the client.

       Certain single letter commands are also recognized which perform
       special operations: these are listed below.

       qq   end the current SSL connection but still accept new connections.

       QQ   end the current SSL connection and exit.

       rr   renegotiate the SSL session.

       RR   renegotiate the SSL session and request a client certificate.

       PP   send some plain text down the underlying TCP connection: this
           should cause the client to disconnect due to a protocol violation.

       SS   print out some session cache status information.

NNOOTTEESS
       ss__sseerrvveerr can be used to debug SSL clients. To accept connections from a
       web browser the command:

        openssl s_server -accept 443 -www

       can be used for example.

       Although specifying an empty list of CAs when requesting a client
       certificate is strictly speaking a protocol violation, some SSL clients
       interpret this to mean any CA is acceptable. This is useful for
       debugging purposes.

       The session parameters can printed out using the sseessss__iidd program.

BBUUGGSS
       Because this program has a lot of options and also because some of the
       techniques used are rather old, the C source of ss__sseerrvveerr is rather hard
       to read and not a model of how things should be done.  A typical SSL
       server program would be much simpler.

       The output of common ciphers is wrong: it just gives the list of
       ciphers that OpenSSL recognizes and the client supports.

       There should be a way for the ss__sseerrvveerr program to print out details of
       any unknown cipher suites a client says it supports.

SSEEEE AALLSSOO
       SSSSLL__CCOONNFF__ccmmdd(3), sseessss__iidd(1), ss__cclliieenntt(1), cciipphheerrss(1)

HHIISSTTOORRYY
       The -no_alt_chains options was first added to OpenSSL 1.1.0.

CCOOPPYYRRIIGGHHTT
       Copyright 2000-2016 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



1.1.0l                            2019-09-10                       S_SERVER(1)
