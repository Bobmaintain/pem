OPENSSL(1)                BSD General Commands Manual               OPENSSL(1)

NNAAMMEE
     ooppeennssssll — OpenSSL command line tool

SSYYNNOOPPSSIISS
     ooppeennssssll ccoommmmaanndd [_c_o_m_m_a_n_d___o_p_t_s] [_c_o_m_m_a_n_d___a_r_g_s]

     ooppeennssssll lliisstt--ssttaannddaarrdd--ccoommmmaannddss | lliisstt--mmeessssaaggee--ddiiggeesstt--ccoommmmaannddss |
             lliisstt--cciipphheerr--ccoommmmaannddss | lliisstt--cciipphheerr--aallggoorriitthhmmss |
             lliisstt--mmeessssaaggee--ddiiggeesstt--aallggoorriitthhmmss | lliisstt--ppuubblliicc--kkeeyy--aallggoorriitthhmmss

     ooppeennssssll nnoo--_c_o_m_m_a_n_d

DDEESSCCRRIIPPTTIIOONN
     OOppeennSSSSLL is a cryptography toolkit implementing the Transport Layer Secu‐
     rity (TLS v1) network protocol, as well as related cryptography stan‐
     dards.

     The ooppeennssssll program is a command line tool for using the various cryptog‐
     raphy functions of ooppeennssssll's crypto library from the shell.

     The pseudo-commands lliisstt--ssttaannddaarrdd--ccoommmmaannddss, lliisstt--mmeessssaaggee--ddiiggeesstt--ccoommmmaannddss,
     and lliisstt--cciipphheerr--ccoommmmaannddss output a list (one entry per line) of the names
     of all standard commands, message digest commands, or cipher commands,
     respectively, that are available in the present ooppeennssssll utility.

     The pseudo-commands lliisstt--cciipphheerr--aallggoorriitthhmmss and
     lliisstt--mmeessssaaggee--ddiiggeesstt--aallggoorriitthhmmss list all cipher and message digest names,
     one entry per line.  Aliases are listed as:

           from => to

     The pseudo-command lliisstt--ppuubblliicc--kkeeyy--aallggoorriitthhmmss lists all supported public
     key algorithms.

     The pseudo-command nnoo--_c_o_m_m_a_n_d tests whether a command of the specified
     name is available.  If _c_o_m_m_a_n_d does not exist, it returns 0 and prints
     nnoo--_c_o_m_m_a_n_d; otherwise it returns 1 and prints _c_o_m_m_a_n_d.  In both cases,
     the output goes to stdout and nothing is printed to stderr.  Additional
     command line arguments are always ignored.  Since for each cipher there
     is a command of the same name, this provides an easy way for shell
     scripts to test for the availability of ciphers in the ooppeennssssll program.

     NNoottee: nnoo--_c_o_m_m_a_n_d is not able to detect pseudo-commands such as qquuiitt,
     lliisstt--_._._.--ccoommmmaannddss, or nnoo--_c_o_m_m_a_n_d itself.

AASSNN11PPAARRSSEE
     ooppeennssssll aassnn11ppaarrssee [--ii] [--ddlliimmiitt _n_u_m_b_e_r] [--dduummpp] [--ggeennccoonnff _f_i_l_e] [--ggeennssttrr
     _s_t_r] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm | ttxxtt] [--lleennggtthh _n_u_m_b_e_r] [--nnoooouutt]
     [--ooffffsseett _n_u_m_b_e_r] [--ooiidd _f_i_l_e] [--oouutt _f_i_l_e] [--ssttrrppaarrssee _o_f_f_s_e_t]

     The aassnn11ppaarrssee command is a diagnostic utility that can parse ASN.1 struc‐
     tures.  It can also be used to extract data from ASN.1 formatted data.

     The options are as follows:

     --ddlliimmiitt _n_u_m_b_e_r
             Dump the first _n_u_m_b_e_r bytes of unknown data in hex form.

     --dduummpp   Dump unknown data in hex form.

     --ggeennccoonnff _f_i_l_e, --ggeennssttrr _s_t_r
             Generate encoded data based on string _s_t_r, file _f_i_l_e, or both,
             using the format described in ASN1_generate_nconf(3).  If only
             _f_i_l_e is present then the string is obtained from the default sec‐
             tion using the name “asn1”.  The encoded data is passed through
             the ASN.1 parser and printed out as though it came from a file;
             the contents can thus be examined and written to a file using the
             --oouutt option.

     --ii      Indent the output according to the "depth" of the structures.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm | ttxxtt
             The input format.

     --lleennggtthh _n_u_m_b_e_r
             Number of bytes to parse; the default is until end of file.

     --nnoooouutt  Do not output the parsed version of the input file.

     --ooffffsseett _n_u_m_b_e_r
             Starting offset to begin parsing; the default is start of file.

     --ooiidd _f_i_l_e
             A file containing additional object identifiers (OIDs).  If an
             OID (object identifier) is not part of ooppeennssssll's internal table
             it will be represented in numerical form (for example 1.2.3.4).

             Each line consists of three columns: the first column is the OID
             in numerical format and should be followed by whitespace.  The
             second column is the "short name", which is a single word fol‐
             lowed by whitespace.  The final column is the rest of the line
             and is the "long name".  aassnn11ppaarrssee displays the long name.

     --oouutt _f_i_l_e
             The DER-encoded output file; the default is no encoded output
             (useful when combined with --ssttrrppaarrssee).

     --ssttrrppaarrssee _o_f_f_s_e_t
             Parse the content octets of the ASN.1 object starting at _o_f_f_s_e_t.
             This option can be used multiple times to "drill down" into a
             nested structure.

CCAA
     ooppeennssssll ccaa [--bbaattcchh] [--cceerrtt _f_i_l_e] [--ccoonnffiigg _f_i_l_e] [--ccrrll__CCAA__ccoommpprroommiissee _t_i_m_e]
     [--ccrrll__ccoommpprroommiissee _t_i_m_e] [--ccrrll__hhoolldd _i_n_s_t_r_u_c_t_i_o_n] [--ccrrll__rreeaassoonn _r_e_a_s_o_n]
     [--ccrrllddaayyss _d_a_y_s] [--ccrrlleexxttss _s_e_c_t_i_o_n] [--ccrrllhhoouurrss _h_o_u_r_s] [--ddaayyss _a_r_g]
     [--eennddddaattee _d_a_t_e] [--eexxtteennssiioonnss _s_e_c_t_i_o_n] [--eexxttffiillee _s_e_c_t_i_o_n] [--ggeennccrrll] [--iinn
     _f_i_l_e] [--iinnffiilleess] [--kkeeyy _k_e_y_f_i_l_e] [--kkeeyyffiillee _a_r_g] [--kkeeyyffoorrmm _p_e_m] [--mmdd _a_r_g]
     [--mmssiiee__hhaacckk] [--nnaammee _s_e_c_t_i_o_n] [--nnooeemmaaiillDDNN] [--nnootteexxtt] [--oouutt _f_i_l_e] [--oouuttddiirr
     _d_i_r] [--ppaassssiinn _a_r_g] [--ppoolliiccyy _a_r_g] [--pprreesseerrvveeDDNN] [--rreevvookkee _f_i_l_e] [--ssppkkaacc
     _f_i_l_e] [--ssss__cceerrtt _f_i_l_e] [--ssttaarrttddaattee _d_a_t_e] [--ssttaattuuss _s_e_r_i_a_l] [--ssuubbjj _a_r_g]
     [--uuppddaatteeddbb] [--vveerrbboossee]

     The ccaa command is a minimal certificate authority (CA) application.  It
     can be used to sign certificate requests in a variety of forms and gener‐
     ate certificate revocation lists (CRLs).  It also maintains a text data‐
     base of issued certificates and their status.

     The options relevant to CAs are as follows:

     --bbaattcchh
           Batch mode.  In this mode no questions will be asked and all cer‐
           tificates will be certified automatically.

     --cceerrtt _f_i_l_e
           The CA certificate file.

     --ccoonnffiigg _f_i_l_e
           Specify an alternative configuration file.

     --ddaayyss _a_r_g
           The number of days to certify the certificate for.

     --eennddddaattee _d_a_t_e
           Set the expiry date.  The format of the date is YYMMDDHHMMSSZ (the
           same as an ASN.1 UTCTime structure).

     --eexxtteennssiioonnss _s_e_c_t_i_o_n
           The section of the configuration file containing certificate exten‐
           sions to be added when a certificate is issued (defaults to
           xx550099__eexxtteennssiioonnss unless the --eexxttffiillee option is used).  If no exten‐
           sion section is present, a V1 certificate is created.  If the ex‐
           tension section is present (even if it is empty), then a V3 cer‐
           tificate is created.

     --eexxttffiillee _f_i_l_e
           An additional configuration _f_i_l_e to read certificate extensions
           from (using the default section unless the --eexxtteennssiioonnss option is
           also used).

     --iinn _f_i_l_e
           An input _f_i_l_e containing a single certificate request to be signed
           by the CA.

     --iinnffiilleess
           If present, this should be the last option; all subsequent argu‐
           ments are assumed to be the names of files containing certificate
           requests.

     --kkeeyy _k_e_y_f_i_l_e
           The password used to encrypt the private key.  Since on some sys‐
           tems the command line arguments are visible, this option should be
           used with caution.

     --kkeeyyffiillee _f_i_l_e
           The private key to sign requests with.

     --kkeeyyffoorrmm _p_e_m
           Private key file format.

     --mmdd _a_l_g
           The message digest to use.  Possible values include _m_d_5 and _s_h_a_1.
           This option also applies to CRLs.

     --mmssiiee__hhaacckk
           This is a legacy option to make ccaa work with very old versions of
           the IE certificate enrollment control "certenr3".  It used Univer‐
           salStrings for almost everything.  Since the old control has vari‐
           ous security bugs, its use is strongly discouraged.  The newer con‐
           trol "Xenroll" does not need this option.

     --nnaammee _s_e_c_t_i_o_n
           Specifies the configuration file _s_e_c_t_i_o_n to use (overrides
           ddeeffaauulltt__ccaa in the ccaa section).

     --nnooeemmaaiillDDNN
           The DN of a certificate can contain the EMAIL field if present in
           the request DN, however it is good policy just having the email set
           into the aallttNNaammee extension of the certificate.  When this option is
           set, the EMAIL field is removed from the certificate's subject and
           set only in the, eventually present, extensions.  The _e_m_a_i_l___i_n___d_n
           keyword can be used in the configuration file to enable this behav‐
           iour.

     --nnootteexxtt
           Don't output the text form of a certificate to the output file.

     --oouutt _f_i_l_e
           The output file to output certificates to.  The default is standard
           output.  The certificate details will also be printed out to this
           file.

     --oouuttddiirr _d_i_r_e_c_t_o_r_y
           The _d_i_r_e_c_t_o_r_y to output certificates to.  The certificate will be
           written to a file consisting of the serial number in hex with
           ".pem" appended.

     --ppaassssiinn _a_r_g
           The key password source.

     --ppoolliiccyy _a_r_g
           Define the CA "policy" to use.  The policy section in the configu‐
           ration file consists of a set of variables corresponding to cer‐
           tificate DN fields.  The values may be one of "match" (the value
           must match the same field in the CA certificate), "supplied" (the
           value must be present), or "optional" (the value may be present).
           Any fields not mentioned in the policy section are silently
           deleted, unless the --pprreesseerrvveeDDNN option is set, but this can be re‐
           garded more of a quirk than intended behaviour.

     --pprreesseerrvveeDDNN
           Normally, the DN order of a certificate is the same as the order of
           the fields in the relevant policy section.  When this option is
           set, the order is the same as the request.  This is largely for
           compatibility with the older IE enrollment control which would only
           accept certificates if their DNs matched the order of the request.
           This is not needed for Xenroll.

     --ssppkkaacc _f_i_l_e
           A file containing a single Netscape signed public key and chal‐
           lenge, and additional field values to be signed by the CA.  This
           will usually come from the KEYGEN tag in an HTML form to create a
           new private key.  It is, however, possible to create SPKACs using
           the ssppkkaacc utility.

           The file should contain the variable SPKAC set to the value of the
           SPKAC and also the required DN components as name value pairs.  If
           it's necessary to include the same component twice, then it can be
           preceded by a number and a ‘.’.

     --ssss__cceerrtt _f_i_l_e
           A single self-signed certificate to be signed by the CA.

     --ssttaarrttddaattee _d_a_t_e
           Set the start date.  The format of the date is YYMMDDHHMMSSZ (the
           same as an ASN.1 UTCTime structure).

     --ssttaattuuss _s_e_r_i_a_l
           Show the status of the certificate with serial number _s_e_r_i_a_l.

     --uuppddaatteeddbb
           Update database for expired certificates.

     --vveerrbboossee
           Print extra details about the operations being performed.

     The options relevant to CRLs are as follows:

     --ccrrll__CCAA__ccoommpprroommiissee _t_i_m_e
           This is the same as --ccrrll__ccoommpprroommiissee, except the revocation reason
           is set to CACompromise.

     --ccrrll__ccoommpprroommiissee _t_i_m_e
           Set the revocation reason to keyCompromise and the compromise time
           to _t_i_m_e.  _t_i_m_e should be in GeneralizedTime format, i.e. YYYYMMD‐
           DHHMMSSZ.

     --ccrrll__hhoolldd _i_n_s_t_r_u_c_t_i_o_n
           Set the CRL revocation reason code to certificateHold and the hold
           instruction to _i_n_s_t_r_u_c_t_i_o_n which must be an OID.  Although any OID
           can be used, only holdInstructionNone (the use of which is discour‐
           aged by RFC 2459), holdInstructionCallIssuer or holdInstructionRe‐
           ject will normally be used.

     --ccrrll__rreeaassoonn _r_e_a_s_o_n
           Revocation reason, where _r_e_a_s_o_n is one of: unspecified, keyCompro‐
           mise, CACompromise, affiliationChanged, superseded, cessationOfOp‐
           eration, certificateHold or removeFromCRL.  The matching of _r_e_a_s_o_n
           is case insensitive.  Setting any revocation reason will make the
           CRL v2.  In practice, removeFromCRL is not particularly useful be‐
           cause it is only used in delta CRLs which are not currently imple‐
           mented.

     --ccrrllddaayyss _n_u_m
           The number of days before the next CRL is due.  This is the days
           from now to place in the CRL nneexxttUUppddaattee field.

     --ccrrlleexxttss _s_e_c_t_i_o_n
           The _s_e_c_t_i_o_n of the configuration file containing CRL extensions to
           include.  If no CRL extension section is present then a V1 CRL is
           created; if the CRL extension section is present (even if it is
           empty) then a V2 CRL is created.  The CRL extensions specified are
           CRL extensions and not CRL entry extensions.  It should be noted
           that some software can't handle V2 CRLs.

     --ccrrllhhoouurrss _n_u_m
           The number of hours before the next CRL is due.

     --ggeennccrrll
           Generate a CRL based on information in the index file.

     --rreevvookkee _f_i_l_e
           A _f_i_l_e containing a certificate to revoke.

     --ssuubbjj _a_r_g
           Supersedes the subject name given in the request.  The _a_r_g must be
           formatted as _/_t_y_p_e_0_=_v_a_l_u_e_0_/_t_y_p_e_1_=_v_a_l_u_e_1_/_t_y_p_e_2_=_._._.; characters may
           be escaped by ‘\’ (backslash), no spaces are skipped.

     Many of the options can be set in the ccaa section of the configuration
     file (or in the default section of the configuration file), specified us‐
     ing ddeeffaauulltt__ccaa or --nnaammee.  The options pprreesseerrvvee and mmssiiee__hhaacckk are read di‐
     rectly from the ccaa section.

     Many of the configuration file options are identical to command line op‐
     tions.  Where the option is present in the configuration file and the
     command line, the command line value is used.  Where an option is de‐
     scribed as mandatory, then it must be present in the configuration file
     or the command line equivalent (if any) used.

     cceerrttiiffiiccaattee
           The same as --cceerrtt.  It gives the file containing the CA certifi‐
           cate.  Mandatory.

     ccooppyy__eexxtteennssiioonnss
           Determines how extensions in certificate requests should be han‐
           dled.  If set to nnoonnee or this option is not present, then exten‐
           sions are ignored and not copied to the certificate.  If set to
           ccooppyy, then any extensions present in the request that are not al‐
           ready present are copied to the certificate.  If set to ccooppyyaallll,
           then all extensions in the request are copied to the certificate:
           if the extension is already present in the certificate it is
           deleted first.

           The ccooppyy__eexxtteennssiioonnss option should be used with caution.  If care is
           not taken, it can be a security risk.  For example, if a certifi‐
           cate request contains a bbaassiiccCCoonnssttrraaiinnttss extension with CA:TRUE and
           the ccooppyy__eexxtteennssiioonnss value is set to ccooppyyaallll and the user does not
           spot this when the certificate is displayed, then this will hand
           the requestor a valid CA certificate.

           This situation can be avoided by setting ccooppyy__eexxtteennssiioonnss to ccooppyy
           and including bbaassiiccCCoonnssttrraaiinnttss with CA:FALSE in the configuration
           file.  Then if the request contains a bbaassiiccCCoonnssttrraaiinnttss extension,
           it will be ignored.

           The main use of this option is to allow a certificate request to
           supply values for certain extensions such as ssuubbjjeeccttAAllttNNaammee.

     ccrrll__eexxtteennssiioonnss
           The same as --ccrrlleexxttss.

     ccrrllnnuummbbeerr
           A text file containing the next CRL number to use in hex.  The CRL
           number will be inserted in the CRLs only if this file exists.  If
           this file is present, it must contain a valid CRL number.

     ddaattaabbaassee
           The text database file to use.  Mandatory.  This file must be
           present, though initially it will be empty.

     ddeeffaauulltt__ccrrll__hhoouurrss, ddeeffaauulltt__ccrrll__ddaayyss
           The same as the --ccrrllhhoouurrss and --ccrrllddaayyss options.  These will only be
           used if neither command line option is present.  At least one of
           these must be present to generate a CRL.

     ddeeffaauulltt__ddaayyss
           The same as the --ddaayyss option.  The number of days to certify a cer‐
           tificate for.

     ddeeffaauulltt__eennddddaattee
           The same as the --eennddddaattee option.  Either this option or
           ddeeffaauulltt__ddaayyss (or the command line equivalents) must be present.

     ddeeffaauulltt__mmdd
           The same as the --mmdd option.  The message digest to use.  Mandatory.

     ddeeffaauulltt__ssttaarrttddaattee
           The same as the --ssttaarrttddaattee option.  The start date to certify a
           certificate for.  If not set, the current time is used.

     eemmaaiill__iinn__ddnn
           The same as --nnooeemmaaiillDDNN.  If the EMAIL field is to be removed from
           the DN of the certificate, simply set this to "no".  If not
           present, the default is to allow for the EMAIL field in the cer‐
           tificate's DN.

     mmssiiee__hhaacckk
           The same as --mmssiiee__hhaacckk.

     nnaammee__oopptt, cceerrtt__oopptt
           These options allow the format used to display the certificate de‐
           tails when asking the user to confirm signing.  All the options
           supported by the xx550099 utilities' --nnaammeeoopptt and --cceerrttoopptt switches can
           be used here, except that nnoo__ssiiggnnaammee and nnoo__ssiiggdduummpp are permanently
           set and cannot be disabled (this is because the certificate signa‐
           ture cannot be displayed because the certificate has not been
           signed at this point).

           For convenience, the value ccaa__ddeeffaauulltt is accepted by both to pro‐
           duce a reasonable output.

           If neither option is present, the format used in earlier versions
           of ooppeennssssll is used.  Use of the old format is strongly discouraged
           because it only displays fields mentioned in the ppoolliiccyy section,
           mishandles multicharacter string types and does not display exten‐
           sions.

     nneeww__cceerrttss__ddiirr
           The same as the --oouuttddiirr command line option.  It specifies the di‐
           rectory where new certificates will be placed.  Mandatory.

     ooiidd__ffiillee
           This specifies a file containing additional object identifiers.
           Each line of the file should consist of the numerical form of the
           object identifier followed by whitespace, then the short name fol‐
           lowed by whitespace and finally the long name.

     ooiidd__sseeccttiioonn
           This specifies a section in the configuration file containing extra
           object identifiers.  Each line should consist of the short name of
           the object identifier followed by ‘=’ and the numerical form.  The
           short and long names are the same when this option is used.

     ppoolliiccyy
           The same as --ppoolliiccyy.  Mandatory.

     pprreesseerrvvee
           The same as --pprreesseerrvveeDDNN.

     pprriivvaattee__kkeeyy
           Same as the --kkeeyyffiillee option.  The file containing the CA private
           key.  Mandatory.

     sseerriiaall
           A text file containing the next serial number to use in hex.
           Mandatory.  This file must be present and contain a valid serial
           number.

     uunniiqquuee__ssuubbjjeecctt
           If the value yyeess is given, the valid certificate entries in the
           database must have unique subjects.  If the value nnoo is given, sev‐
           eral valid certificate entries may have the exact same subject.
           The default value is yyeess.

     xx550099__eexxtteennssiioonnss
           The same as --eexxtteennssiioonnss.

CCIIPPHHEERRSS
     ooppeennssssll cciipphheerrss [--hhVVvv] [--ttllss11] [_c_i_p_h_e_r_l_i_s_t]

     The cciipphheerrss command converts ooppeennssssll cipher lists into ordered SSL cipher
     preference lists.  It can be used as a way to determine the appropriate
     cipher list.

     The options are as follows:

     --hh, --??  Print a brief usage message.

     --ttllss11   Only include TLS v1 ciphers.

     --VV      Verbose.  List ciphers with a complete description of protocol
             version, key exchange, authentication, encryption and mac algo‐
             rithms, any key size restrictions, and cipher suite codes (hex
             format).

     --vv      Like --VV, but without cipher suite codes.

     _c_i_p_h_e_r_l_i_s_t
             A cipher list to convert to a cipher preference list.  If it is
             not included, the default cipher list will be used.

             The cipher list consists of one or more cipher strings separated
             by colons.  Commas or spaces are also acceptable separators, but
             colons are normally used.

             The actual cipher string can take several different forms:

             It can consist of a single cipher suite, such as RC4-SHA.

             It can represent a list of cipher suites containing a certain al‐
             gorithm, or cipher suites of a certain type.  For example SHA1
             represents all cipher suites using the digest algorithm SHA1.

             Lists of cipher suites can be combined in a single cipher string
             using the ‘+’ character (logical AND operation).  For example,
             SHA1+DES represents all cipher suites containing the SHA1 and DES
             algorithms.

             Each cipher string can be optionally preceded by the characters
             ‘!’, ‘-’, or ‘+’.  If ‘!’ is used, then the ciphers are perma‐
             nently deleted from the list.  The ciphers deleted can never
             reappear in the list even if they are explicitly stated.  If ‘-’
             is used, then the ciphers are deleted from the list, but some or
             all of the ciphers can be added again by later options.  If ‘+’
             is used, then the ciphers are moved to the end of the list.  This
             option doesn't add any new ciphers, it just moves matching exist‐
             ing ones.

             If none of these characters is present, the string is just inter‐
             preted as a list of ciphers to be appended to the current prefer‐
             ence list.  If the list includes any ciphers already present,
             they will be ignored; that is, they will not be moved to the end
             of the list.

             Additionally, the cipher string @@SSTTRREENNGGTTHH can be used at any
             point to sort the current cipher list in order of encryption al‐
             gorithm key length.

     The following is a list of all permitted cipher strings and their mean‐
     ings.

     DDEEFFAAUULLTT
           The default cipher list.  This is determined at compile time and is
           currently AALLLL::!!aaNNUULLLL::!!eeNNUULLLL::!!SSSSLLvv22.  This must be the first cipher
           string specified.

     CCOOMMPPLLEEMMEENNTTOOFFDDEEFFAAUULLTT
           The ciphers included in AALLLL, but not enabled by default.  Currently
           this is AADDHH.  Note that this rule does not cover eeNNUULLLL, which is
           not included by AALLLL (use CCOOMMPPLLEEMMEENNTTOOFFAALLLL if necessary).

     AALLLL   All cipher suites except the eeNNUULLLL ciphers, which must be explic‐
           itly enabled.

     CCOOMMPPLLEEMMEENNTTOOFFAALLLL
           The cipher suites not enabled by AALLLL, currently being eeNNUULLLL.

     HHIIGGHH  "High" encryption cipher suites.  This currently means those with
           key lengths larger than 128 bits.

     MMEEDDIIUUMM
           "Medium" encryption cipher suites, currently those using 128-bit
           encryption.

     LLOOWW   "Low" encryption cipher suites, currently those using 64- or 56-bit
           encryption algorithms.

     eeNNUULLLL, NNUULLLL
           The "NULL" ciphers; that is, those offering no encryption.  Because
           these offer no encryption at all and are a security risk, they are
           disabled unless explicitly included.

     aaNNUULLLL
           The cipher suites offering no authentication.  This is currently
           the anonymous DH algorithms.  These cipher suites are vulnerable to
           a "man in the middle" attack, so their use is normally discouraged.

     kkRRSSAA, RRSSAA
           Cipher suites using RSA key exchange.

     kkEEDDHH  Cipher suites using ephemeral DH key agreement.

     aaRRSSAA  Cipher suites using RSA authentication, i.e. the certificates carry
           RSA keys.

     aaDDSSSS, DDSSSS
           Cipher suites using DSS authentication, i.e. the certificates carry
           DSS keys.

     TTLLSSvv11
           TLS v1.0 cipher suites.

     DDHH    Cipher suites using DH, including anonymous DH.

     AADDHH   Anonymous DH cipher suites.

     AAEESS   Cipher suites using AES.

     33DDEESS  Cipher suites using triple DES.

     DDEESS   Cipher suites using DES (not triple DES).

     RRCC44   Cipher suites using RC4.

     CCAAMMEELLLLIIAA
           Cipher suites using Camellia.

     CCHHAACCHHAA2200
           Cipher suites using ChaCha20.

     IIDDEEAA  Cipher suites using IDEA.

     MMDD55   Cipher suites using MD5.

     SSHHAA11, SSHHAA
           Cipher suites using SHA1.

CCRRLL
     ooppeennssssll ccrrll [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r] [--ffiinnggeerrpprriinntt] [--hhaasshh] [--iinn
     _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm] [--iissssuueerr] [--llaassttuuppddaattee] [--nneexxttuuppddaattee] [--nnoooouutt]
     [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--tteexxtt]

     The ccrrll command processes CRL files in DER or PEM format.

     The options are as follows:

     --CCAAffiillee _f_i_l_e
             Verify the signature on a CRL by looking up the issuing certifi‐
             cate in _f_i_l_e.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             Verify the signature on a CRL by looking up the issuing certifi‐
             cate in _d_i_r.  This directory must be a standard certificate di‐
             rectory, i.e. a hash of each subject name (using xx550099 --hhaasshh)
             should be linked to each certificate.

     --ffiinnggeerrpprriinntt
             Print the CRL fingerprint.

     --hhaasshh   Output a hash of the issuer name.  This can be used to look up
             CRLs in a directory by issuer name.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --iissssuueerr
             Output the issuer name.

     --llaassttuuppddaattee
             Output the llaassttUUppddaattee field.

     --nneexxttuuppddaattee
             Output the nneexxttUUppddaattee field.

     --nnoooouutt  Do not output the encoded version of the CRL.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --tteexxtt   Print the CRL in plain text.

CCRRLL22PPKKCCSS77
     ooppeennssssll ccrrll22ppkkccss77 [--cceerrttffiillee _f_i_l_e] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm]
     [--nnooccrrll] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm]

     The ccrrll22ppkkccss77 command takes an optional CRL and one or more certificates
     and converts them into a PKCS#7 degenerate "certificates only" structure.

     The options are as follows:

     --cceerrttffiillee _f_i_l_e
             Add the certificates in PEM _f_i_l_e to the PKCS#7 structure.  This
             option can be used more than once to read certificates from mul‐
             tiple files.

     --iinn _f_i_l_e
             Read the CRL from _f_i_l_e, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --nnooccrrll  Normally, a CRL is included in the output file.  With this op‐
             tion, no CRL is included in the output file and a CRL is not read
             from the input file.

     --oouutt _f_i_l_e
             Write the PKCS#7 structure to _f_i_l_e, or standard output if not
             specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

DDGGSSTT
     ooppeennssssll ddggsstt [--ccdd] [--bbiinnaarryy] [--_d_i_g_e_s_t] [--hheexx] [--hhmmaacc _k_e_y] [--kkeeyyffoorrmm ppeemm]
     [--mmaacc _a_l_g_o_r_i_t_h_m] [--mmaaccoopptt _n_m:_v] [--oouutt _f_i_l_e] [--ppaassssiinn _a_r_g] [--pprrvveerriiffyy
     _f_i_l_e] [--ssiiggnn _f_i_l_e] [--ssiiggnnaattuurree _f_i_l_e] [--ssiiggoopptt _n_m:_v] [--vveerriiffyy _f_i_l_e]
     [_f_i_l_e _._._.]

     The digest functions output the message digest of a supplied _f_i_l_e or
     _f_i_l_e_s in hexadecimal form.  They can also be used for digital signing and
     verification.

     The options are as follows:

     --bbiinnaarryy
             Output the digest or signature in binary form.

     --cc      Print the digest in two-digit groups separated by colons.

     --dd      Print BIO debugging information.

     --_d_i_g_e_s_t
             Use the specified message _d_i_g_e_s_t.  The default is MD5.  The
             available digests can be displayed using ooppeennssssll
             lliisstt--mmeessssaaggee--ddiiggeesstt--ccoommmmaannddss.  The following are equivalent:
             ooppeennssssll ddggsstt --mmdd55 and ooppeennssssll mmdd55.

     --hheexx    Digest is to be output as a hex dump.  This is the default case
             for a "normal" digest as opposed to a digital signature.

     --hhmmaacc _k_e_y
             Create a hashed MAC using _k_e_y.

     --kkeeyyffoorrmm ppeemm
             Specifies the key format to sign the digest with.

     --mmaacc _a_l_g_o_r_i_t_h_m
             Create a keyed Message Authentication Code (MAC).  The most popu‐
             lar MAC algorithm is HMAC (hash-based MAC), but there are other
             MAC algorithms which are not based on hash.  MAC keys and other
             options should be set via the --mmaaccoopptt parameter.

     --mmaaccoopptt _n_m:_v
             Passes options to the MAC algorithm, specified by --mmaacc.  The fol‐
             lowing options are supported by HMAC:

             kkeeyy:_s_t_r_i_n_g
                     Specifies the MAC key as an alphanumeric string (use if
                     the key contain printable characters only).  String
                     length must conform to any restrictions of the MAC algo‐
                     rithm.

             hheexxkkeeyy:_s_t_r_i_n_g
                     Specifies the MAC key in hexadecimal form (two hex digits
                     per byte).  Key length must conform to any restrictions
                     of the MAC algorithm.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --ppaassssiinn _a_r_g
             The key password source.

     --pprrvveerriiffyy _f_i_l_e
             Verify the signature using the private key in _f_i_l_e.  The output
             is either "Verification OK" or "Verification Failure".

     --ssiiggnn _f_i_l_e
             Digitally sign the digest using the private key in _f_i_l_e.

     --ssiiggnnaattuurree _f_i_l_e
             The actual signature to verify.

     --ssiiggoopptt _n_m:_v
             Pass options to the signature algorithm during sign or verify op‐
             erations.  The names and values of these options are algorithm-
             specific.

     --vveerriiffyy _f_i_l_e
             Verify the signature using the public key in _f_i_l_e.  The output is
             either "Verification OK" or "Verification Failure".

     _f_i_l_e _._._.
             File or files to digest.  If no files are specified then standard
             input is used.

DDHHPPAARRAAMM
     ooppeennssssll ddhhppaarraamm [--22 | --55] [--CC] [--cchheecckk] [--ddssaappaarraamm] [--iinn _f_i_l_e] [--iinnffoorrmm
     ddeerr | ppeemm] [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--tteexxtt] [_n_u_m_b_i_t_s]

     The ddhhppaarraamm command is used to manipulate DH parameter files.  Only the
     older PKCS#3 DH is supported, not the newer X9.42 DH.

     The options are as follows:

     --22, --55  The generator to use; 2 is the default.  If present, the input
             file is ignored and parameters are generated instead.

     --CC      Convert the parameters into C code.  The parameters can then be
             loaded by calling the get_dh_n_u_m_b_i_t_s function.

     --cchheecckk  Check the DH parameters.

     --ddssaappaarraamm
             Read or create DSA parameters, converted to DH format on output.
             Otherwise, "strong" primes (such that (p-1)/2 is also prime) will
             be used for DH parameter generation.

             DH parameter generation with the --ddssaappaarraamm option is much faster,
             and the recommended exponent length is shorter, which makes DH
             key exchange more efficient.  Beware that with such DSA-style DH
             parameters, a fresh DH key should be created for each use to
             avoid small-subgroup attacks that may be possible otherwise.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --nnoooouutt  Do not output the encoded version of the parameters.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --tteexxtt   Print the DH parameters in plain text.

     _n_u_m_b_i_t_s
             Generate a parameter set of size _n_u_m_b_i_t_s.  It must be the last
             option.  If not present, a value of 2048 is used.  If this value
             is present, the input file is ignored and parameters are gener‐
             ated instead.

DDSSAA
     ooppeennssssll ddssaa [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--iinn _f_i_l_e]
     [--iinnffoorrmm ddeerr | ppeemm] [--mmoodduulluuss] [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm]
     [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbiinn] [--ppuubboouutt] [--tteexxtt]

     The ddssaa command processes DSA keys.  They can be converted between vari‐
     ous forms and their components printed out.

     NNoottee: This command uses the traditional SSSSLLeeaayy compatible format for pri‐
     vate key encryption: newer applications should use the more secure PKCS#8
     format using the ppkkccss88 command.

     The options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             Encrypt the private key with the AES, DES, or the triple DES ci‐
             phers, respectively, before outputting it.  A pass phrase is
             prompted for.  If none of these options are specified, the key is
             written in plain text.  This means that using the ddssaa utility to
             read an encrypted key with no encryption option can be used to
             remove the pass phrase from a key, or by setting the encryption
             options it can be used to add or change the pass phrase.  These
             options can only be used with PEM format output files.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.
             If the key is encrypted, a pass phrase will be prompted for.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --mmoodduulluuss
             Print the value of the public key component of the key.

     --nnoooouutt  Do not output the encoded version of the key.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.
             If any encryption options are set then a pass phrase will be
             prompted for.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  Read in a public key, not a private key.

     --ppuubboouutt
             Output a public key, not a private key.  Automatically set if the
             input is a public key.

     --tteexxtt   Print the public/private key in plain text.

DDSSAAPPAARRAAMM
     ooppeennssssll ddssaappaarraamm [--CC] [--ggeennkkeeyy] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm] [--nnoooouutt]
     [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--tteexxtt] [_n_u_m_b_i_t_s]

     The ddssaappaarraamm command is used to manipulate or generate DSA parameter
     files.

     The options are as follows:

     --CC      Convert the parameters into C code.  The parameters can then be
             loaded by calling the get_dsa_X_X_X function.

     --ggeennkkeeyy
             Generate a DSA key either using the specified or generated param‐
             eters.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.
             If the _n_u_m_b_i_t_s parameter is included, then this option is ig‐
             nored.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --nnoooouutt  Do not output the encoded version of the parameters.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --tteexxtt   Print the DSA parameters in plain text.

     _n_u_m_b_i_t_s
             Generate a parameter set of size _n_u_m_b_i_t_s.  If this option is in‐
             cluded, the input file is ignored.

EECC
     ooppeennssssll eecc [--ccoonnvv__ffoorrmm _a_r_g] [--ddeess] [--ddeess33] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm]
     [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--ppaarraamm__eenncc _a_r_g] [--ppaarraamm__oouutt]
     [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbiinn] [--ppuubboouutt] [--tteexxtt]

     The eecc command processes EC keys.  They can be converted between various
     forms and their components printed out.  ooppeennssssll uses the private key
     format specified in “SEC 1: Elliptic Curve Cryptography”
     (hhttttpp::////wwwwww..sseeccgg..oorrgg//). To convert an EC private key into the PKCS#8 pri‐
     vate key format use the ppkkccss88 command.

     The options are as follows:

     --ccoonnvv__ffoorrmm _a_r_g
             Specify how the points on the elliptic curve are converted into
             octet strings.  Possible values are: ccoommpprreesssseedd (the default),
             uunnccoommpprreesssseedd, and hhyybbrriidd.  For more information regarding the
             point conversion forms see the X9.62 standard.  Note: Due to
             patent issues the ccoommpprreesssseedd option is disabled by default for
             binary curves and can be enabled by defining the preprocessor
             macro OPENSSL_EC_BIN_PT_COMP at compile time.

     --ddeess | --ddeess33
             Encrypt the private key with DES, triple DES, or any other cipher
             supported by ooppeennssssll.  A pass phrase is prompted for.  If none of
             these options is specified the key is written in plain text.
             This means that using the eecc utility to read in an encrypted key
             with no encryption option can be used to remove the pass phrase
             from a key, or by setting the encryption options it can be used
             to add or change the pass phrase.  These options can only be used
             with PEM format output files.

     --iinn _f_i_l_e
             The input file to read a key from, or standard input if not spec‐
             ified.  If the key is encrypted a pass phrase will be prompted
             for.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --nnoooouutt  Do not output the encoded version of the key.

     --oouutt _f_i_l_e
             The output filename to write to, or standard output if not speci‐
             fied.  If any encryption options are set then a pass phrase will
             be prompted for.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --ppaarraamm__eenncc _a_r_g
             Specify how the elliptic curve parameters are encoded.  Possible
             value are: nnaammeedd__ccuurrvvee, i.e. the EC parameters are specified by
             an OID; or eexxpplliicciitt, where the EC parameters are explicitly given
             (see RFC 3279 for the definition of the EC parameter structures).
             The default value is nnaammeedd__ccuurrvvee.  Note: the iimmpplliicciittllyyCCAA alter‐
             native, as specified in RFC 3279, is currently not implemented.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  Read in a public key, not a private key.

     --ppuubboouutt
             Output a public key, not a private key.  Automatically set if the
             input is a public key.

     --tteexxtt   Print the public/private key in plain text.

EECCPPAARRAAMM
     ooppeennssssll eeccppaarraamm [--CC] [--cchheecckk] [--ccoonnvv__ffoorrmm _a_r_g] [--ggeennkkeeyy] [--iinn _f_i_l_e]
     [--iinnffoorrmm ddeerr | ppeemm] [--lliisstt__ccuurrvveess] [--nnaammee _a_r_g] [--nnoo__sseeeedd] [--nnoooouutt] [--oouutt
     _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--ppaarraamm__eenncc _a_r_g] [--tteexxtt]

     The eeccppaarraamm command is used to manipulate or generate EC parameter files.
     ooppeennssssll is not able to generate new groups so eeccppaarraamm can only create EC
     parameters from known (named) curves.

     The options are as follows:

     --CC      Convert the EC parameters into C code.  The parameters can then
             be loaded by calling the get_ec_group__X_X_X function.

     --cchheecckk  Validate the elliptic curve parameters.

     --ccoonnvv__ffoorrmm _a_r_g
             Specify how the points on the elliptic curve are converted into
             octet strings.  Possible values are: ccoommpprreesssseedd (the default),
             uunnccoommpprreesssseedd, and hhyybbrriidd.  For more information regarding the
             point conversion forms see the X9.62 standard.  Note: Due to
             patent issues the ccoommpprreesssseedd option is disabled by default for
             binary curves and can be enabled by defining the preprocessor
             macro OPENSSL_EC_BIN_PT_COMP at compile time.

     --ggeennkkeeyy
             Generate an EC private key using the specified parameters.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --lliisstt__ccuurrvveess
             Print a list of all currently implemented EC parameter names and
             exit.

     --nnaammee _a_r_g
             Use the EC parameters with the specified "short" name.

     --nnoo__sseeeedd
             Do not include the seed for the parameter generation in the ECPa‐
             rameters structure (see RFC 3279).

     --nnoooouutt  Do not output the encoded version of the parameters.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --ppaarraamm__eenncc _a_r_g
             Specify how the elliptic curve parameters are encoded.  Possible
             value are: nnaammeedd__ccuurrvvee, i.e. the EC parameters are specified by
             an OID, or eexxpplliicciitt, where the EC parameters are explicitly given
             (see RFC 3279 for the definition of the EC parameter structures).
             The default value is nnaammeedd__ccuurrvvee.  Note: the iimmpplliicciittllyyCCAA alter‐
             native, as specified in RFC 3279, is currently not implemented.

     --tteexxtt   Print the EC parameters in plain text.

EENNCC
     ooppeennssssll eenncc --cciipphheerrnnaammee [--AAaaddeePPpp] [--bbaassee6644] [--bbuuffssiizzee _n_u_m_b_e_r] [--ddeebbuugg]
     [--iinn _f_i_l_e] [--iivv _I_V] [--KK _k_e_y] [--kk _p_a_s_s_w_o_r_d] [--kkffiillee _f_i_l_e] [--mmdd _d_i_g_e_s_t]
     [--nnoonnee] [--nnooppaadd] [--nnoossaalltt] [--oouutt _f_i_l_e] [--ppaassss _a_r_g] [--SS _s_a_l_t] [--ssaalltt]

     The symmetric cipher commands allow data to be encrypted or decrypted us‐
     ing various block and stream ciphers using keys based on passwords or ex‐
     plicitly provided.  Base64 encoding or decoding can also be performed ei‐
     ther by itself or in addition to the encryption or decryption.  The pro‐
     gram can be called either as ooppeennssssll _c_i_p_h_e_r_n_a_m_e or ooppeennssssll eenncc
     --_c_i_p_h_e_r_n_a_m_e.

     Some of the ciphers do not have large keys and others have security im‐
     plications if not used correctly.  All the block ciphers normally use
     PKCS#5 padding, also known as standard block padding.  If padding is dis‐
     abled, the input data must be a multiple of the cipher block length.

     The options are as follows:

     --AA      If the --aa option is set, then base64 process the data on one
             line.

     --aa, --bbaassee6644
             Base64 process the data.  This means that if encryption is taking
             place, the data is base64-encoded after encryption.  If decryp‐
             tion is set, the input data is base64-decoded before being de‐
             crypted.

     --bbuuffssiizzee _n_u_m_b_e_r
             Set the buffer size for I/O.

     --dd      Decrypt the input data.

     --ddeebbuugg  Debug the BIOs used for I/O.

     --ee      Encrypt the input data.  This is the default.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iivv _I_V  The actual _I_V (initialisation vector) to use: this must be repre‐
             sented as a string comprised only of hex digits.  When only the
             _k_e_y is specified using the --KK option, the IV must explicitly be
             defined.  When a password is being specified using one of the
             other options, the IV is generated from this password.

     --KK _k_e_y  The actual _k_e_y to use: this must be represented as a string com‐
             prised only of hex digits.  If only the key is specified, the IV
             must also be specified using the --iivv option.  When both a _k_e_y and
             a _p_a_s_s_w_o_r_d are specified, the _k_e_y given with the --KK option will
             be used and the IV generated from the password will be taken.  It
             probably does not make much sense to specify both _k_e_y and
             _p_a_s_s_w_o_r_d.

     --kk _p_a_s_s_w_o_r_d
             The _p_a_s_s_w_o_r_d to derive the key from.  Superseded by the --ppaassss op‐
             tion.

     --kkffiillee _f_i_l_e
             Read the password to derive the key from the first line of _f_i_l_e.
             Superseded by the --ppaassss option.

     --mmdd _d_i_g_e_s_t
             Use _d_i_g_e_s_t to create a key from a pass phrase.  _d_i_g_e_s_t may be one
             of mmdd55 or sshhaa11.

     --nnoonnee   Use NULL cipher (no encryption or decryption of input).

     --nnooppaadd  Disable standard block padding.

     --nnoossaalltt
             Don't use a salt in the key derivation routines.  This option
             should never be used since it makes it possible to perform effi‐
             cient dictionary attacks on the password and to attack stream ci‐
             pher encrypted data.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --PP      Print out the salt, key, and IV used, then immediately exit;
             don't do any encryption or decryption.

     --pp      Print out the salt, key, and IV used.

     --ppaassss _a_r_g
             The password source.

     --SS _s_a_l_t
             The actual _s_a_l_t to use: this must be represented as a string com‐
             prised only of hex digits.

     --ssaalltt   Use a salt in the key derivation routines (the default).  When
             the salt is being used the first eight bytes of the encrypted
             data are reserved for the salt: it is randomly generated when en‐
             crypting a file and read from the encrypted file when it is de‐
             crypted.

EERRRRSSTTRR
     ooppeennssssll eerrrrssttrr [--ssttaattss] _e_r_r_n_o _._._.

     The eerrrrssttrr command performs error number to error string conversion, gen‐
     erating a human-readable string representing the error code _e_r_r_n_o.  The
     string is obtained through the ERR_error_string_n(3) function and has the
     following format:

           error:[error code]:[library name]:[function name]:[reason string]

     [error code] is an 8-digit hexadecimal number.  The remaining fields
     [library name], [function name], and [reason string] are all ASCII text.

     The options are as follows:

     --ssttaattss  Print debugging statistics about various aspects of the hash ta‐
             ble.

GGEENNDDSSAA
     ooppeennssssll ggeennddssaa [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--oouutt _f_i_l_e]
     [_p_a_r_a_m_f_i_l_e]

     The ggeennddssaa command generates a DSA private key from a DSA parameter file
     (typically generated by the ooppeennssssll ddssaappaarraamm command).  DSA key genera‐
     tion is little more than random number generation so it is much quicker
     than, for example, RSA key generation.

     The options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             Encrypt the private key with the AES, DES, or the triple DES ci‐
             phers, respectively, before outputting it.  A pass phrase is
             prompted for.  If none of these options are specified, no encryp‐
             tion is used.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     _p_a_r_a_m_f_i_l_e
             Specify the DSA parameter file to use.  The parameters in this
             file determine the size of the private key.

GGEENNPPKKEEYY
     ooppeennssssll ggeennppkkeeyy [--aallggoorriitthhmm _a_l_g] [_c_i_p_h_e_r] [--ggeennppaarraamm] [--oouutt _f_i_l_e]
     [--oouuttffoorrmm ddeerr | ppeemm] [--ppaarraammffiillee _f_i_l_e] [--ppaassss _a_r_g] [--ppkkeeyyoopptt _o_p_t:_v_a_l_u_e]
     [--tteexxtt]

     The ggeennppkkeeyy command generates private keys.  The use of this program is
     encouraged over the algorithm specific utilities because additional algo‐
     rithm options can be used.

     The options are as follows:

     --aallggoorriitthhmm _a_l_g
             The public key algorithm to use, such as RSA, DSA, or DH.  This
             option must precede any --ppkkeeyyoopptt options.  The options --ppaarraammffiillee
             and --aallggoorriitthhmm are mutually exclusive.

     _c_i_p_h_e_r  Encrypt the private key with the supplied cipher.  Any algorithm
             name accepted by EVP_get_cipherbyname(3) is acceptable.

     --ggeennppaarraamm
             Generate a set of parameters instead of a private key.  This op‐
             tion must precede any --aallggoorriitthhmm, --ppaarraammffiillee, or --ppkkeeyyoopptt op‐
             tions.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --ppaarraammffiillee _f_i_l_e
             Some public key algorithms generate a private key based on a set
             of parameters, which can be supplied using this option.  If this
             option is used the public key algorithm used is determined by the
             parameters.  This option must precede any --ppkkeeyyoopptt options.  The
             options --ppaarraammffiillee and --aallggoorriitthhmm are mutually exclusive.

     --ppaassss _a_r_g
             The output file password source.

     --ppkkeeyyoopptt _o_p_t:_v_a_l_u_e
             Set the public key algorithm option _o_p_t to _v_a_l_u_e, as follows:

                   rsa_keygen_bits:_n_u_m_b_i_t_s
                           (RSA) The number of bits in the generated key.  The
                           default is 2048.

                   rsa_keygen_pubexp:_v_a_l_u_e
                           (RSA) The RSA public exponent value.  This can be a
                           large decimal or hexadecimal value if preceded by
                           0x.  The default is 65537.

                   dsa_paramgen_bits:_n_u_m_b_i_t_s
                           (DSA) The number of bits in the generated parame‐
                           ters.  The default is 1024.

                   dh_paramgen_prime_len:_n_u_m_b_i_t_s
                           (DH) The number of bits in the prime parameter _p.

                   dh_paramgen_generator:_v_a_l_u_e
                           (DH) The value to use for the generator _g.

                   ec_paramgen_curve:_c_u_r_v_e
                           (EC) The EC curve to use.

     --tteexxtt   Print the private/public key in plain text.

GGEENNRRSSAA
     ooppeennssssll ggeennrrssaa [--33 | --ff44] [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33]
     [--oouutt _f_i_l_e] [--ppaassssoouutt _a_r_g] [_n_u_m_b_i_t_s]

     The ggeennrrssaa command generates an RSA private key, which essentially in‐
     volves the generation of two prime numbers.  When generating the key,
     various symbols will be output to indicate the progress of the genera‐
     tion.  A ‘.’ represents each number which has passed an initial sieve
     test; ‘+’ means a number has passed a single round of the Miller-Rabin
     primality test.  A newline means that the number has passed all the prime
     tests (the actual number depends on the key size).

     The options are as follows:

     --33 | --ff44
             The public exponent to use, either 3 or 65537.  The default is
             65537.

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             Encrypt the private key with the AES, DES, or the triple DES ci‐
             phers, respectively, before outputting it.  If none of these op‐
             tions are specified, no encryption is used.  If encryption is
             used, a pass phrase is prompted for, if it is not supplied via
             the --ppaassssoouutt option.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --ppaassssoouutt _a_r_g
             The output file password source.

     _n_u_m_b_i_t_s
             The size of the private key to generate in bits.  This must be
             the last option specified.  The default is 2048.

NNSSEEQQ
     ooppeennssssll nnsseeqq [--iinn _f_i_l_e] [--oouutt _f_i_l_e] [--ttoosseeqq]

     The nnsseeqq command takes a file containing a Netscape certificate sequence
     (an alternative to the standard PKCS#7 format) and prints out the cer‐
     tificates contained in it, or takes a file of certificates and converts
     it into a Netscape certificate sequence.

     The options are as follows:

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --ttoosseeqq  Normally, a Netscape certificate sequence will be input and the
             output is the certificates contained in it.  With the --ttoosseeqq op‐
             tion the situation is reversed: a Netscape certificate sequence
             is created from a file of certificates.

OOCCSSPP
     ooppeennssssll ooccsspp [--CCAA _f_i_l_e] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cceerrtt _f_i_l_e]
     [--ddggsstt _a_l_g] [--hhoosstt _h_o_s_t_n_a_m_e:_p_o_r_t] [--iinnddeexx _i_n_d_e_x_f_i_l_e] [--iissssuueerr _f_i_l_e]
     [--nnddaayyss _d_a_y_s] [--nnmmiinn _m_i_n_u_t_e_s] [--nnoo__cceerrtt__cchheecckkss] [--nnoo__cceerrtt__vveerriiffyy]
     [--nnoo__cceerrttss] [--nnoo__cchhaaiinn] [--nnoo__iinntteerrnn] [--nnoo__nnoonnccee] [--nnoo__ssiiggnnaattuurree__vveerriiffyy]
     [--nnoonnccee] [--nnoovveerriiffyy] [--nnrreeqquueesstt _n_u_m_b_e_r] [--oouutt _f_i_l_e] [--ppaatthh _p_a_t_h] [--ppoorrtt
     _p_o_r_t_n_u_m] [--rreeqq__tteexxtt] [--rreeqqiinn _f_i_l_e] [--rreeqqoouutt _f_i_l_e] [--rreesspp__kkeeyy__iidd]
     [--rreesspp__nnoo__cceerrttss] [--rreesspp__tteexxtt] [--rreessppiinn _f_i_l_e] [--rreessppoouutt _f_i_l_e] [--rrkkeeyy _f_i_l_e]
     [--rrootthheerr _f_i_l_e] [--rrssiiggnneerr _f_i_l_e] [--sseerriiaall _n_u_m_b_e_r] [--ssiiggnn__ootthheerr _f_i_l_e]
     [--ssiiggnneerr _f_i_l_e] [--ssiiggnnkkeeyy _f_i_l_e] [--ssttaattuuss__aaggee _a_g_e] [--tteexxtt] [--ttrruusstt__ootthheerr]
     [--uurrll _r_e_s_p_o_n_d_e_r___u_r_l] [--VVAAffiillee _f_i_l_e] [--vvaalliiddiittyy__ppeerriioodd _n_s_e_c]
     [--vveerriiffyy__ootthheerr _f_i_l_e]

     The Online Certificate Status Protocol (OCSP) enables applications to de‐
     termine the (revocation) state of an identified certificate (RFC 2560).

     The ooccsspp command performs many common OCSP tasks.  It can be used to
     print out requests and responses, create requests and send queries to an
     OCSP responder, and behave like a mini OCSP server itself.

     The options are as follows:

     --CCAAffiillee _f_i_l_e, --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             A file or path containing trusted CA certificates, used to verify
             the signature on the OCSP response.

     --cceerrtt _f_i_l_e
             Add the certificate _f_i_l_e to the request.  The issuer certificate
             is taken from the previous --iissssuueerr option, or an error occurs if
             no issuer certificate is specified.

     --ddggsstt _a_l_g
             Use the digest algorithm _a_l_g for certificate identification in
             the OCSP request.  By default SHA-1 is used.

     --hhoosstt _h_o_s_t_n_a_m_e:_p_o_r_t, --ppaatthh _p_a_t_h
             Send the OCSP request to _h_o_s_t_n_a_m_e on _p_o_r_t.  --ppaatthh specifies the
             HTTP path name to use, or _/ by default.

     --iissssuueerr _f_i_l_e
             The current issuer certificate, in PEM format.  Can be used mul‐
             tiple times and must come before any --cceerrtt options.

     --nnoo__cceerrtt__cchheecckkss
             Don't perform any additional checks on the OCSP response signer's
             certificate.  That is, do not make any checks to see if the
             signer's certificate is authorised to provide the necessary sta‐
             tus information: as a result this option should only be used for
             testing purposes.

     --nnoo__cceerrtt__vveerriiffyy
             Don't verify the OCSP response signer's certificate at all.
             Since this option allows the OCSP response to be signed by any
             certificate, it should only be used for testing purposes.

     --nnoo__cceerrttss
             Don't include any certificates in the signed request.

     --nnoo__cchhaaiinn
             Do not use certificates in the response as additional untrusted
             CA certificates.

     --nnoo__iinntteerrnn
             Ignore certificates contained in the OCSP response when searching
             for the signer's certificate.  The signer's certificate must be
             specified with either the --vveerriiffyy__ootthheerr or --VVAAffiillee options.

     --nnoo__ssiiggnnaattuurree__vveerriiffyy
             Don't check the signature on the OCSP response.  Since this op‐
             tion tolerates invalid signatures on OCSP responses, it will nor‐
             mally only be used for testing purposes.

     --nnoonnccee, --nnoo__nnoonnccee
             Add an OCSP nonce extension to a request, or disable an OCSP
             nonce addition.  Normally, if an OCSP request is input using the
             --rreessppiinn option no nonce is added: using the --nnoonnccee option will
             force the addition of a nonce.  If an OCSP request is being cre‐
             ated (using the --cceerrtt and --sseerriiaall options) a nonce is automati‐
             cally added; specifying --nnoo__nnoonnccee overrides this.

     --nnoovveerriiffyy
             Don't attempt to verify the OCSP response signature or the nonce
             values.  This is normally only be used for debugging since it
             disables all verification of the responder's certificate.

     --oouutt _f_i_l_e
             Specify the output file to write to, or standard output if not
             specified.

     --rreeqq__tteexxtt, --rreesspp__tteexxtt, --tteexxtt
             Print out the text form of the OCSP request, response, or both,
             respectively.

     --rreeqqiinn _f_i_l_e, --rreessppiinn _f_i_l_e
             Read an OCSP request or response file from _f_i_l_e.  These options
             are ignored if an OCSP request or response creation is implied by
             other options (for example with the --sseerriiaall, --cceerrtt, and --hhoosstt op‐
             tions).

     --rreeqqoouutt _f_i_l_e, --rreessppoouutt _f_i_l_e
             Write out the DER-encoded certificate request or response to
             _f_i_l_e.

     --sseerriiaall _n_u_m
             Same as the --cceerrtt option except the certificate with serial num‐
             ber _n_u_m is added to the request.  The serial number is inter‐
             preted as a decimal integer unless preceded by ‘0x’.  Negative
             integers can also be specified by preceding the value with a mi‐
             nus sign.

     --ssiiggnn__ootthheerr _f_i_l_e
             Additional certificates to include in the signed request.

     --ssiiggnneerr _f_i_l_e, --ssiiggnnkkeeyy _f_i_l_e
             Sign the OCSP request using the certificate specified in the
             --ssiiggnneerr option and the private key specified by the --ssiiggnnkkeeyy op‐
             tion.  If the --ssiiggnnkkeeyy option is not present, then the private
             key is read from the same file as the certificate.  If neither
             option is specified, the OCSP request is not signed.

     --ttrruusstt__ootthheerr
             The certificates specified by the --vveerriiffyy__ootthheerr option should be
             explicitly trusted and no additional checks will be performed on
             them.  This is useful when the complete responder certificate
             chain is not available or trusting a root CA is not appropriate.

     --uurrll _r_e_s_p_o_n_d_e_r___u_r_l
             Specify the responder URL.  Both HTTP and HTTPS (SSL/TLS) URLs
             can be specified.

     --VVAAffiillee _f_i_l_e
             A file containing explicitly trusted responder certificates.
             Equivalent to the --vveerriiffyy__ootthheerr and --ttrruusstt__ootthheerr options.

     --vvaalliiddiittyy__ppeerriioodd _n_s_e_c, --ssttaattuuss__aaggee _a_g_e
             The range of times, in seconds, which will be tolerated in an
             OCSP response.  Each certificate status response includes a not‐
             Before time and an optional notAfter time.  The current time
             should fall between these two values, but the interval between
             the two times may be only a few seconds.  In practice the OCSP
             responder and clients' clocks may not be precisely synchronised
             and so such a check may fail.  To avoid this the --vvaalliiddiittyy__ppeerriioodd
             option can be used to specify an acceptable error range in sec‐
             onds, the default value being 5 minutes.

             If the notAfter time is omitted from a response, it means that
             new status information is immediately available.  In this case
             the age of the notBefore field is checked to see it is not older
             than _a_g_e seconds old.  By default, this additional check is not
             performed.

     --vveerriiffyy__ootthheerr _f_i_l_e
             A file containing additional certificates to search when attempt‐
             ing to locate the OCSP response signing certificate.  Some re‐
             sponders omit the actual signer's certificate from the response,
             so this can be used to supply the necessary certificate.

     The options for the OCSP server are as follows:

     --CCAA _f_i_l_e
           CA certificate corresponding to the revocation information in
           _i_n_d_e_x_f_i_l_e.

     --iinnddeexx _i_n_d_e_x_f_i_l_e
           _i_n_d_e_x_f_i_l_e is a text index file in ca format containing certificate
           revocation information.

           If this option is specified, ooccsspp is in responder mode, otherwise
           it is in client mode.  The requests the responder processes can be
           either specified on the command line (using the --iissssuueerr and --sseerriiaall
           options), supplied in a file (using the --rreessppiinn option), or via ex‐
           ternal OCSP clients (if _p_o_r_t or _u_r_l is specified).

           If this option is present, then the --CCAA and --rrssiiggnneerr options must
           also be present.

     --nnmmiinn _m_i_n_u_t_e_s, --nnddaayyss _d_a_y_s
           Number of _m_i_n_u_t_e_s or _d_a_y_s when fresh revocation information is
           available: used in the nextUpdate field.  If neither option is
           present, the nextUpdate field is omitted, meaning fresh revocation
           information is immediately available.

     --nnrreeqquueesstt _n_u_m_b_e_r
           Exit after receiving _n_u_m_b_e_r requests (the default is unlimited).

     --ppoorrtt _p_o_r_t_n_u_m
           Port to listen for OCSP requests on.  May also be specified using
           the --uurrll option.

     --rreesspp__kkeeyy__iidd
           Identify the signer certificate using the key ID; the default is to
           use the subject name.

     --rreesspp__nnoo__cceerrttss
           Don't include any certificates in the OCSP response.

     --rrkkeeyy _f_i_l_e
           The private key to sign OCSP responses with; if not present, the
           file specified in the --rrssiiggnneerr option is used.

     --rrootthheerr _f_i_l_e
           Additional certificates to include in the OCSP response.

     --rrssiiggnneerr _f_i_l_e
           The certificate to sign OCSP responses with.

     Initially the OCSP responder certificate is located and the signature on
     the OCSP request checked using the responder certificate's public key.
     Then a normal certificate verify is performed on the OCSP responder cer‐
     tificate building up a certificate chain in the process.  The locations
     of the trusted certificates used to build the chain can be specified by
     the --CCAAffiillee and --CCAAppaatthh options or they will be looked for in the stan‐
     dard ooppeennssssll certificates directory.

     If the initial verify fails, the OCSP verify process halts with an error.
     Otherwise the issuing CA certificate in the request is compared to the
     OCSP responder certificate: if there is a match then the OCSP verify suc‐
     ceeds.

     Otherwise the OCSP responder certificate's CA is checked against the is‐
     suing CA certificate in the request.  If there is a match and the OCSP‐
     Signing extended key usage is present in the OCSP responder certificate,
     then the OCSP verify succeeds.

     Otherwise the root CA of the OCSP responder's CA is checked to see if it
     is trusted for OCSP signing.  If it is, the OCSP verify succeeds.

     If none of these checks is successful, the OCSP verify fails.  What this
     effectively means is that if the OCSP responder certificate is authorised
     directly by the CA it is issuing revocation information about (and it is
     correctly configured), then verification will succeed.

     If the OCSP responder is a global responder, which can give details about
     multiple CAs and has its own separate certificate chain, then its root CA
     can be trusted for OCSP signing.  Alternatively, the responder certifi‐
     cate itself can be explicitly trusted with the --VVAAffiillee option.

PPAASSSSWWDD
     ooppeennssssll ppaasssswwdd [--11 | --aapprr11 | --ccrryypptt] [--iinn _f_i_l_e] [--nnoovveerriiffyy] [--qquuiieett]
     [--rreevveerrssee] [--ssaalltt _s_t_r_i_n_g] [--ssttddiinn] [--ttaabbllee] [_p_a_s_s_w_o_r_d]

     The ppaasssswwdd command computes the hash of a password.

     The options are as follows:

     --11      Use the MD5 based BSD password algorithm "1".

     --aapprr11   Use the "apr1" algorithm (Apache variant of the BSD algorithm).

     --ccrryypptt  Use the "crypt" algorithm (the default).

     --iinn _f_i_l_e
             Read passwords from _f_i_l_e.

     --nnoovveerriiffyy
             Don't verify when reading a password from the terminal.

     --qquuiieett  Don't output warnings when passwords given on the command line
             are truncated.

     --rreevveerrssee
             Switch table columns.  This only makes sense in conjunction with
             the --ttaabbllee option.

     --ssaalltt _s_t_r_i_n_g
             Use the salt specified by _s_t_r_i_n_g.  When reading a password from
             the terminal, this implies --nnoovveerriiffyy.

     --ssttddiinn  Read passwords from standard input.

     --ttaabbllee  In the output list, prepend the cleartext password and a TAB
             character to each password hash.

PPKKCCSS77
     ooppeennssssll ppkkccss77 [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm] [--nnoooouutt] [--oouutt _f_i_l_e]
     [--oouuttffoorrmm ddeerr | ppeemm] [--pprriinntt__cceerrttss] [--tteexxtt]

     The ppkkccss77 command processes PKCS#7 files in DER or PEM format.  The
     PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC 2315.

     The options are as follows:

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --nnoooouutt  Don't output the encoded version of the PKCS#7 structure (or cer‐
             tificates if --pprriinntt__cceerrttss is set).

     --oouutt _f_i_l_e
             The output to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --pprriinntt__cceerrttss
             Print any certificates or CRLs contained in the file, preceded by
             their subject and issuer names in a one-line format.

     --tteexxtt   Print certificate details in full rather than just subject and
             issuer names.

PPKKCCSS88
     ooppeennssssll ppkkccss88 [--eemmbbeedd] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm] [--nnooccrryypptt]
     [--nnooiitteerr] [--nnoooocctt] [--nnssddbb] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--ppaassssiinn _a_r_g]
     [--ppaassssoouutt _a_r_g] [--ttooppkk88] [--vv11 _a_l_g] [--vv22 _a_l_g]

     The ppkkccss88 command processes private keys (both encrypted and unencrypted)
     in PKCS#8 format with a variety of PKCS#5 (v1.5 and v2.0) and PKCS#12 al‐
     gorithms.  The default encryption is only 56 bits; keys encrypted using
     PKCS#5 v2.0 algorithms and high iteration counts are more secure.

     The options are as follows:

     --eemmbbeedd  Generate DSA keys in a broken format.  The DSA parameters are em‐
             bedded inside the PrivateKey structure.  In this form the OCTET
             STRING contains an ASN.1 SEQUENCE consisting of two structures: a
             SEQUENCE containing the parameters and an ASN.1 INTEGER contain‐
             ing the private key.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.
             If the key is encrypted, a pass phrase will be prompted for.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --nnooccrryypptt
             Generate an unencrypted PrivateKeyInfo structure.  This option
             does not encrypt private keys at all and should only be used when
             absolutely necessary.

     --nnooiitteerr
             Use an iteration count of 1.  See the _P_K_C_S_1_2 section below for a
             detailed explanation of this option.

     --nnoooocctt  Generate RSA private keys in a broken format that some software
             uses.  Specifically the private key should be enclosed in an
             OCTET STRING, but some software just includes the structure it‐
             self without the surrounding OCTET STRING.

     --nnssddbb   Generate DSA keys in a broken format compatible with Netscape
             private key databases.  The PrivateKey contains a SEQUENCE con‐
             sisting of the public and private keys, respectively.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if none is speci‐
             fied.  If any encryption options are set, a pass phrase will be
             prompted for.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ttooppkk88  Read a traditional format private key and write a PKCS#8 format
             key.

     --vv11 _a_l_g
             Specify a PKCS#5 v1.5 or PKCS#12 algorithm to use.

             PBE-MD5-DES
                   56-bit DES.
             PBE-SHA1-RC2-64 | PBE-MD5-RC2-64 | PBE-SHA1-DES
                   64-bit RC2 or 56-bit DES.
             PBE-SHA1-RC4-128 | PBE-SHA1-RC4-40 | PBE-SHA1-3DES
             PBE-SHA1-2DES | PBE-SHA1-RC2-128 | PBE-SHA1-RC2-40
                   PKCS#12 password-based encryption algorithm, which allow
                   strong encryption algorithms like triple DES or 128-bit
                   RC2.

     --vv22 _a_l_g
             Use PKCS#5 v2.0 algorithms.  Supports algorithms such as 168-bit
             triple DES or 128-bit RC2, however not many implementations sup‐
             port PKCS#5 v2.0 yet (if using private keys with ooppeennssssll this
             doesn't matter).

             _a_l_g is the encryption algorithm to use; valid values include des,
             des3, and rc2.  It is recommended that des3 is used.

PPKKCCSS1122
     ooppeennssssll ppkkccss1122 [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--ccaacceerrttss]
     [--CCAAffiillee _f_i_l_e] [--ccaannaammee _n_a_m_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cceerrttffiillee _f_i_l_e]
     [--cceerrttppbbee _a_l_g] [--cchhaaiinn] [--ccllcceerrttss] [--CCSSPP _n_a_m_e] [--ddeesscceerrtt] [--eexxppoorrtt] [--iinn
     _f_i_l_e] [--iinnffoo] [--iinnkkeeyy _f_i_l_e] [--kkeeyyeexx] [--kkeeyyppbbee _a_l_g] [--kkeeyyssiigg] [--mmaaccaallgg
     _a_l_g] [--mmaacciitteerr] [--nnaammee _n_a_m_e] [--nnoocceerrttss] [--nnooddeess] [--nnooiitteerr] [--nnookkeeyyss]
     [--nnoommaacc] [--nnoommaacciitteerr] [--nnoommaaccvveerr] [--nnoooouutt] [--oouutt _f_i_l_e] [--ppaassssiinn _a_r_g]
     [--ppaassssoouutt _a_r_g] [--ttwwooppaassss]

     The ppkkccss1122 command allows PKCS#12 files (sometimes referred to as PFX
     files) to be created and parsed.  By default, a PKCS#12 file is parsed; a
     PKCS#12 file can be created by using the --eexxppoorrtt option.

     The options for parsing a PKCS12 file are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
           Encrypt private keys using AES, DES, or triple DES, respectively.
           The default is triple DES.

     --ccaacceerrttss
           Only output CA certificates (not client certificates).

     --ccllcceerrttss
           Only output client certificates (not CA certificates).

     --iinn _f_i_l_e
           The input file to read from, or standard input if not specified.

     --iinnffoo
           Output additional information about the PKCS#12 file structure, al‐
           gorithms used, and iteration counts.

     --nnoocceerrttss
           Do not output certificates.

     --nnooddeess
           Do not encrypt private keys.

     --nnookkeeyyss
           Do not output private keys.

     --nnoommaaccvveerr
           Do not attempt to verify the integrity MAC before reading the file.

     --nnoooouutt
           Do not output the keys and certificates to the output file version
           of the PKCS#12 file.

     --oouutt _f_i_l_e
           The output file to write to, or standard output if not specified.

     --ppaassssiinn _a_r_g
           The key password source.

     --ppaassssoouutt _a_r_g
           The output file password source.

     --ttwwooppaassss
           Prompt for separate integrity and encryption passwords: most soft‐
           ware always assumes these are the same so this option will render
           such PKCS#12 files unreadable.

     The options for PKCS12 file creation are as follows:

     --CCAAffiillee _f_i_l_e
           CA storage as a file.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
           CA storage as a directory.  The directory must be a standard cer‐
           tificate directory: that is, a hash of each subject name (using
           xx550099 --hhaasshh) should be linked to each certificate.

     --ccaannaammee _n_a_m_e
           Specify the "friendly name" for other certificates.  May be used
           multiple times to specify names for all certificates in the order
           they appear.

     --cceerrttffiillee _f_i_l_e
           A file to read additional certificates from.

     --cceerrttppbbee _a_l_g, --kkeeyyppbbee _a_l_g
           Specify the algorithm used to encrypt the private key and certifi‐
           cates to be selected.  Any PKCS#5 v1.5 or PKCS#12 PBE algorithm
           name can be used.  If a cipher name (as output by the
           lliisstt--cciipphheerr--aallggoorriitthhmmss command) is specified then it is used with
           PKCS#5 v2.0.  For interoperability reasons it is advisable to only
           use PKCS#12 algorithms.

     --cchhaaiinn
           Include the entire certificate chain of the user certificate.  The
           standard CA store is used for this search.  If the search fails, it
           is considered a fatal error.

     --CCSSPP _n_a_m_e
           Write _n_a_m_e as a Microsoft CSP name.

     --ddeesscceerrtt
           Encrypt the certificate using triple DES; this may render the
           PKCS#12 file unreadable by some "export grade" software.  By de‐
           fault, the private key is encrypted using triple DES and the cer‐
           tificate using 40-bit RC2.

     --eexxppoorrtt
           Create a PKCS#12 file (rather than parsing one).

     --iinn _f_i_l_e
           The input file to read from, or standard input if not specified.
           The order doesn't matter but one private key and its corresponding
           certificate should be present.  If additional certificates are
           present, they will also be included in the PKCS#12 file.

     --iinnkkeeyy _f_i_l_e
           File to read a private key from.  If not present, a private key
           must be present in the input file.

     --kkeeyyeexx | --kkeeyyssiigg
           Specify whether the private key is to be used for key exchange or
           just signing.  Normally, "export grade" software will only allow
           512-bit RSA keys to be used for encryption purposes, but arbitrary
           length keys for signing.  The --kkeeyyssiigg option marks the key for
           signing only.  Signing only keys can be used for S/MIME signing,
           authenticode (ActiveX control signing) and SSL client authentica‐
           tion.

     --mmaaccaallgg _a_l_g
           Specify the MAC digest algorithm.  The default is SHA1.

     --mmaacciitteerr
           Included for compatibility only: it used to be needed to use MAC
           iterations counts but they are now used by default.

     --nnaammee _n_a_m_e
           Specify the "friendly name" for the certificate and private key.
           This name is typically displayed in list boxes by software import‐
           ing the file.

     --nnoommaacc
           Don't attempt to provide the MAC integrity.

     --nnoommaacciitteerr, --nnooiitteerr
           Affect the iteration counts on the MAC and key algorithms.

           To discourage attacks by using large dictionaries of common pass‐
           words, the algorithm that derives keys from passwords can have an
           iteration count applied to it: this causes a certain part of the
           algorithm to be repeated and slows it down.  The MAC is used to
           check the file integrity but since it will normally have the same
           password as the keys and certificates it could also be attacked.
           By default, both MAC and encryption iteration counts are set to
           2048; using these options the MAC and encryption iteration counts
           can be set to 1.  Since this reduces the file security you should
           not use these options unless you really have to.  Most software
           supports both MAC and key iteration counts.

     --oouutt _f_i_l_e
           The output file to write to, or standard output if not specified.

     --ppaassssiinn _a_r_g
           The key password source.

     --ppaassssoouutt _a_r_g
           The output file password source.

PPKKEEYY
     ooppeennssssll ppkkeeyy [_c_i_p_h_e_r] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm] [--nnoooouutt] [--oouutt _f_i_l_e]
     [--oouuttffoorrmm ddeerr | ppeemm] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbiinn] [--ppuubboouutt]
     [--tteexxtt] [--tteexxtt__ppuubb]

     The ppkkeeyy command processes public or private keys.  They can be converted
     between various forms and their components printed out.

     The options are as follows:

     _c_i_p_h_e_r  Encrypt the private key with the specified cipher.  Any algorithm
             name accepted by EVP_get_cipherbyname(3) is acceptable, such as
             ddeess33.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.
             If the key is encrypted a pass phrase will be prompted for.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --nnoooouutt  Do not output the encoded version of the key.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.
             If any encryption options are set then a pass phrase will be
             prompted for.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  Read in a public key, not a private key.

     --ppuubboouutt
             Output a public key, not a private key.  Automatically set if the
             input is a public key.

     --tteexxtt   Print the public/private key in plain text.

     --tteexxtt__ppuubb
             Print out only public key components even if a private key is be‐
             ing processed.

PPKKEEYYPPAARRAAMM
     ooppeennssssll ppkkeeyyppaarraamm [--iinn _f_i_l_e] [--nnoooouutt] [--oouutt _f_i_l_e] [--tteexxtt]

     The ppkkeeyyppaarraamm command processes public or private keys.  The key type is
     determined by the PEM headers.

     The options are as follows:

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --nnoooouutt  Do not output the encoded version of the parameters.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --tteexxtt   Print the parameters in plain text.

PPKKEEYYUUTTLL
     ooppeennssssll ppkkeeyyuuttll [--aassnn11ppaarrssee] [--cceerrttiinn] [--ddeeccrryypptt] [--ddeerriivvee] [--eennccrryypptt]
     [--hheexxdduummpp] [--iinn _f_i_l_e] [--iinnkkeeyy _f_i_l_e] [--kkeeyyffoorrmm ddeerr | ppeemm] [--oouutt _f_i_l_e]
     [--ppaassssiinn _a_r_g] [--ppeeeerrffoorrmm ddeerr | ppeemm] [--ppeeeerrkkeeyy _f_i_l_e] [--ppkkeeyyoopptt _o_p_t:_v_a_l_u_e]
     [--ppuubbiinn] [--rreevv] [--ssiiggffiillee _f_i_l_e] [--ssiiggnn] [--vveerriiffyy] [--vveerriiffyyrreeccoovveerr]

     The ppkkeeyyuuttll command can be used to perform public key operations using
     any supported algorithm.

     The options are as follows:

     --aassnn11ppaarrssee
             ASN.1 parse the output data.  This is useful when combined with
             the --vveerriiffyyrreeccoovveerr option when an ASN.1 structure is signed.

     --cceerrttiinn
             The input is a certificate containing a public key.

     --ddeeccrryypptt
             Decrypt the input data using a private key.

     --ddeerriivvee
             Derive a shared secret using the peer key.

     --eennccrryypptt
             Encrypt the input data using a public key.

     --hheexxdduummpp
             Hex dump the output data.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnkkeeyy _f_i_l_e
             The input key file.  By default it should be a private key.

     --kkeeyyffoorrmm ddeerr | ppeemm
             The key format.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppeeeerrffoorrmm ddeerr | ppeemm
             The peer key format.

     --ppeeeerrkkeeyy _f_i_l_e
             The peer key file, used by key derivation (agreement) operations.

     --ppkkeeyyoopptt _o_p_t:_v_a_l_u_e
             Set the public key algorithm option _o_p_t to _v_a_l_u_e.  Unless other‐
             wise mentioned, all algorithms support the format _d_i_g_e_s_t:_a_l_g,
             which specifies the digest to use for sign, verify, and verifyre‐
             cover operations.  The value _a_l_g should represent a digest name
             as used in the EVP_get_digestbyname(3) function.

             The RSA algorithm supports the encrypt, decrypt, sign, verify,
             and verifyrecover operations in general.  Some padding modes only
             support some of these operations however.

             rsa_padding_mode:_m_o_d_e
                     This sets the RSA padding mode.  Acceptable values for
                     _m_o_d_e are ppkkccss11 for PKCS#1 padding; nnoonnee for no padding;
                     ooaaeepp for OAEP mode; xx993311 for X9.31 mode; and ppssss for PSS.

                     In PKCS#1 padding if the message digest is not set then
                     the supplied data is signed or verified directly instead
                     of using a DigestInfo structure.  If a digest is set then
                     a DigestInfo structure is used and its length must corre‐
                     spond to the digest type.  For oeap mode only encryption
                     and decryption is supported.  For x931 if the digest type
                     is set it is used to format the block data; otherwise the
                     first byte is used to specify the X9.31 digest ID.  Sign,
                     verify, and verifyrecover can be performed in this mode.
                     For pss mode only sign and verify are supported and the
                     digest type must be specified.

             rsa_pss_saltlen:_l_e_n
                     For pss mode only this option specifies the salt length.
                     Two special values are supported: -1 sets the salt length
                     to the digest length.  When signing -2 sets the salt
                     length to the maximum permissible value.  When verifying
                     -2 causes the salt length to be automatically determined
                     based on the PSS block structure.

             The DSA algorithm supports the sign and verify operations.  Cur‐
             rently there are no additional options other than _d_i_g_e_s_t.  Only
             the SHA1 digest can be used and this digest is assumed by de‐
             fault.

             The DH algorithm supports the derive operation and no additional
             options.

             The EC algorithm supports the sign, verify, and derive opera‐
             tions.  The sign and verify operations use ECDSA and derive uses
             ECDH.  Currently there are no additional options other than
             _d_i_g_e_s_t.  Only the SHA1 digest can be used and this digest is as‐
             sumed by default.

     --ppuubbiinn  The input file is a public key.

     --rreevv    Reverse the order of the input buffer.

     --ssiiggffiillee _f_i_l_e
             Signature file (verify operation only).

     --ssiiggnn   Sign the input data and output the signed result.  This requires
             a private key.

     --vveerriiffyy
             Verify the input data against the signature file and indicate if
             the verification succeeded or failed.

     --vveerriiffyyrreeccoovveerr
             Verify the input data and output the recovered data.

PPRRIIMMEE
     ooppeennssssll pprriimmee [--bbiittss _n] [--cchheecckkss _n] [--ggeenneerraattee] [--hheexx] [--ssaaffee] _p

     The pprriimmee command is used to generate prime numbers, or to check numbers
     for primality.  Results are probabilistic: they have an exceedingly high
     likelihood of being correct, but are not guaranteed.

     The options are as follows:

     --bbiittss _n
             Specify the number of bits in the generated prime number.  Must
             be used in conjunction with --ggeenneerraattee.

     --cchheecckkss _n
             Perform a Miller-Rabin probabilistic primality test with _n itera‐
             tions.  The default is 20.

     --ggeenneerraattee
             Generate a pseudo-random prime number.  Must be used in conjunc‐
             tion with --bbiittss.

     --hheexx    Output in hex format.

     --ssaaffee   Generate only "safe" prime numbers (i.e. a prime p so that
             (p-1)/2 is also prime).

     _p       Test if number _p is prime.

RRAANNDD
     ooppeennssssll rraanndd [--bbaassee6644] [--hheexx] [--oouutt _f_i_l_e] _n_u_m

     The rraanndd command outputs _n_u_m pseudo-random bytes.

     The options are as follows:

     --bbaassee6644
             Perform base64 encoding on the output.

     --hheexx    Specify hexadecimal output.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

RREEQQ
     ooppeennssssll rreeqq [--aassnn11--kklluuddggee] [--bbaattcchh] [--ccoonnffiigg _f_i_l_e] [--ddaayyss _n] [--eexxtteennssiioonnss
     _s_e_c_t_i_o_n] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm] [--kkeeyy _k_e_y_f_i_l_e] [--kkeeyyffoorrmm ddeerr |
     ppeemm] [--kkeeyyoouutt _f_i_l_e] [--mmdd44 | --mmdd55 | --sshhaa11] [--mmoodduulluuss] [--nnaammeeoopptt _o_p_t_i_o_n]
     [--nneeww] [--nneewwhhddrr] [--nneewwkkeeyy _a_r_g] [--nnoo--aassnn11--kklluuddggee] [--nnooddeess] [--nnoooouutt] [--oouutt
     _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbkkeeyy]
     [--rreeqqeexxttss _s_e_c_t_i_o_n] [--rreeqqoopptt _o_p_t_i_o_n] [--sseett__sseerriiaall _n] [--ssuubbjj _a_r_g]
     [--ssuubbjjeecctt] [--tteexxtt] [--uuttff88] [--vveerrbboossee] [--vveerriiffyy] [--xx550099]

     The rreeqq command primarily creates and processes certificate requests in
     PKCS#10 format.  It can additionally create self-signed certificates, for
     use as root CAs, for example.

     The options are as follows:

     --aassnn11--kklluuddggee
             Produce requests in an invalid format for certain picky CAs.
             Very few CAs still require the use of this option.

     --bbaattcchh  Non-interactive mode.

     --ccoonnffiigg _f_i_l_e
             Specify an alternative configuration file.

     --ddaayyss _n
             Specify the number of days to certify the certificate for.  The
             default is 30 days.  Used with the --xx550099 option.

     --eexxtteennssiioonnss _s_e_c_t_i_o_n, --rreeqqeexxttss _s_e_c_t_i_o_n
             Specify alternative sections to include certificate extensions
             (with --xx550099) or certificate request extensions, allowing several
             different sections to be used in the same configuration file.

     --iinn _f_i_l_e
             The input file to read a request from, or standard input if not
             specified.  A request is only read if the creation options --nneeww
             and --nneewwkkeeyy are not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.

     --kkeeyy _k_e_y_f_i_l_e
             The file to read the private key from.  It also accepts PKCS#8
             format private keys for PEM format files.

     --kkeeyyffoorrmm ddeerr | ppeemm
             The format of the private key file specified in the --kkeeyy argu‐
             ment.  The default is ppeemm.

     --kkeeyyoouutt _f_i_l_e
             The file to write the newly created private key to.  If this op‐
             tion is not specified, the filename present in the configuration
             file is used.

     --mmdd55 | --sshhaa11 | --sshhaa225566
             The message digest to sign the request with.  This overrides the
             digest algorithm specified in the configuration file.

             Some public key algorithms may override this choice.  For in‐
             stance, DSA signatures always use SHA1.

     --mmoodduulluuss
             Print the value of the modulus of the public key contained in the
             request.

     --nnaammeeoopptt _o_p_t_i_o_n, --rreeqqoopptt _o_p_t_i_o_n
             Determine how the subject or issuer names are displayed.  _o_p_t_i_o_n
             can be a single option or multiple options separated by commas.
             Alternatively, these options may be used more than once to set
             multiple options.  See the _X_5_0_9 section below for details.

     --nneeww    Generate a new certificate request.  The user is prompted for the
             relevant field values.  The actual fields prompted for and their
             maximum and minimum sizes are specified in the configuration file
             and any requested extensions.

             If the --kkeeyy option is not used, it will generate a new RSA pri‐
             vate key using information specified in the configuration file.

     --nneewwhhddrr
             Add the word NEW to the PEM file header and footer lines on the
             outputed request.  Some software and CAs need this.

     --nneewwkkeeyy _a_r_g
             Create a new certificate request and a new private key.  The ar‐
             gument takes one of several forms.

             rsa:_n_b_i_t_s generates an RSA key _n_b_i_t_s in size.  If _n_b_i_t_s is omit‐
             ted the default key size is used.

             dsa:_f_i_l_e generates a DSA key using the parameters in _f_i_l_e.

             param:_f_i_l_e generates a key using the parameters or certificate in
             _f_i_l_e.

             All other algorithms support the form _a_l_g_o_r_i_t_h_m:_f_i_l_e, where file
             may be an algorithm parameter file, created by the ggeennppkkeeyy
             --ggeennppaarraamm command or an X.509 certificate for a key with appro‐
             priate algorithm.  _f_i_l_e can be omitted, in which case any parame‐
             ters can be specified via the --ppkkeeyyoopptt option.

     --nnoo--aassnn11--kklluuddggee
             Reverse the effect of --aassnn11--kklluuddggee.

     --nnooddeess  Do not encrypt the private key.

     --nnoooouutt  Do not output the encoded version of the request.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not spceified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbkkeeyy
             Output the public key.

     --rreeqqoopptt _o_p_t_i_o_n
             Customise the output format used with --tteexxtt.  The _o_p_t_i_o_n argument
             can be a single option or multiple options separated by commas.
             See also the discussion of --cceerrttoopptt in the xx550099 command.

     --sseett__sseerriiaall _n
             Serial number to use when outputting a self-signed certificate.
             This may be specified as a decimal value or a hex value if pre‐
             ceded by ‘0x’.  It is possible to use negative serial numbers but
             this is not recommended.

     --ssuubbjj _a_r_g
             Replaces the subject field of an input request with the specified
             data and output the modified request.  _a_r_g must be formatted as
             /type0=value0/type1=value1/type2=...; characters may be escaped
             by ‘\’ (backslash); no spaces are skipped.

     --ssuubbjjeecctt
             Print the request subject (or certificate subject if --xx550099 is
             specified).

     --tteexxtt   Print the certificate request in plain text.

     --uuttff88   Interpret field values as UTF8 strings, not ASCII.

     --vveerrbboossee
             Print extra details about the operations being performed.

     --vveerriiffyy
             Verify the signature on the request.

     --xx550099   Output a self-signed certificate instead of a certificate re‐
             quest.  This is typically used to generate a test certificate or
             a self-signed root CA.  The extensions added to the certificate
             (if any) are specified in the configuration file.  Unless speci‐
             fied using the --sseett__sseerriiaall option, 0 is used for the serial num‐
             ber.

     The configuration options are specified in the "req" section of the con‐
     figuration file.  The options available are as follows:

     aattttrriibbuutteess
           The section containing any request attributes: its format is the
           same as ddiissttiinngguuiisshheedd__nnaammee.  Typically these may contain the chal‐
           lengePassword or unstructuredName types.  They are currently ig‐
           nored by the ooppeennssssll request signing utilities, but some CAs might
           want them.

     ddeeffaauulltt__bbiittss
           The default key size, in bits.  The default is 2048.  It is used if
           the --nneeww option is used and can be overridden by using the --nneewwkkeeyy
           option.

     ddeeffaauulltt__kkeeyyffiillee
           The default file to write a private key to, or standard output if
           not specified.  It can be overridden by the --kkeeyyoouutt option.

     ddeeffaauulltt__mmdd
           The digest algorithm to use.  Possible values include mmdd55, sshhaa11 and
           sshhaa225566 (the default).  It can be overridden on the command line.

     ddiissttiinngguuiisshheedd__nnaammee
           The section containing the distinguished name fields to prompt for
           when generating a certificate or certificate request.  The format
           is described below.

     eennccrryypptt__kkeeyy
           If set to "no" and a private key is generated, it is not encrypted.
           It is equivalent to the --nnooddeess option.  For compatibility,
           eennccrryypptt__rrssaa__kkeeyy is an equivalent option.

     iinnppuutt__ppaasssswwoorrdd | oouuttppuutt__ppaasssswwoorrdd
           The passwords for the input private key file (if present) and the
           output private key file (if one will be created).  The command line
           options --ppaassssiinn and --ppaassssoouutt override the configuration file val‐
           ues.

     ooiidd__ffiillee
           A file containing additional OBJECT IDENTIFIERS.  Each line of the
           file should consist of the numerical form of the object identifier,
           followed by whitespace, then the short name followed by whitespace
           and finally the long name.

     ooiidd__sseeccttiioonn
           Specify a section in the configuration file containing extra object
           identifiers.  Each line should consist of the short name of the ob‐
           ject identifier followed by ‘=’ and the numerical form.  The short
           and long names are the same when this option is used.

     pprroommpptt
           If set to "no", it disables prompting of certificate fields and
           just takes values from the config file directly.  It also changes
           the expected format of the ddiissttiinngguuiisshheedd__nnaammee and aattttrriibbuutteess sec‐
           tions.

     rreeqq__eexxtteennssiioonnss
           The configuration file section containing a list of extensions to
           add to the certificate request.  It can be overridden by the
           --rreeqqeexxttss option.

     ssttrriinngg__mmaasskk
           Limit the string types for encoding certain fields.  The following
           values may be used, limiting strings to the indicated types:

           uuttff88oonnllyy     UTF8String.  This is the default, as recommended by
                        PKIX in RFC 2459.

           ddeeffaauulltt      PrintableString, IA5String, T61String, BMPString,
                        UTF8String.

           ppkkiixx         PrintableString, IA5String, BMPString, UTF8String.
                        Inspired by the PKIX recommendation in RFC 2459 for
                        certificates generated before 2004, but differs by
                        also permitting IA5String.

           nnoommbbssttrr      PrintableString, IA5String, T61String, Universal‐
                        String.  A workaround for some ancient software that
                        had problems with the variable-sized BMPString and
                        UTF8String types.

           MMAASSKK:_n_u_m_b_e_r  An explicit bitmask of permitted types, where _n_u_m_b_e_r
                        is a C-style hex, decimal, or octal number that's a
                        bit-wise OR of B_ASN1_* values from <_o_p_e_n_s_s_l_/_a_s_n_1_._h>.

     uuttff88  If set to "yes", field values are interpreted as UTF8 strings.

     xx550099__eexxtteennssiioonnss
           The configuration file section containing a list of extensions to
           add to a certificate generated when the --xx550099 switch is used.  It
           can be overridden by the --eexxtteennssiioonnss command line switch.

     There are two separate formats for the distinguished name and attribute
     sections.  If the --pprroommpptt option is set to "no", then these sections just
     consist of field names and values.  If the --pprroommpptt option is absent or
     not set to "no", then the file contains field prompting information of
     the form:

           fieldName="prompt"
           fieldName_default="default field value"
           fieldName_min= 2
           fieldName_max= 4

     "fieldName" is the field name being used, for example ccoommmmoonnNNaammee (or CN).
     The "prompt" string is used to ask the user to enter the relevant de‐
     tails.  If the user enters nothing, the default value is used; if no de‐
     fault value is present, the field is omitted.  A field can still be omit‐
     ted if a default value is present, if the user just enters the ‘.’ char‐
     acter.

     The number of characters entered must be between the fieldName_min and
     fieldName_max limits: there may be additional restrictions based on the
     field being used (for example ccoouunnttrryyNNaammee can only ever be two characters
     long and must fit in a PPrriinnttaabblleeSSttrriinngg).

     Some fields (such as oorrggaanniizzaattiioonnNNaammee) can be used more than once in a
     DN.  This presents a problem because configuration files will not recog‐
     nize the same name occurring twice.  To avoid this problem, if the
     ffiieellddNNaammee contains some characters followed by a full stop, they will be
     ignored.  So, for example, a second oorrggaanniizzaattiioonnNNaammee can be input by
     calling it "1.organizationName".

     The actual permitted field names are any object identifier short or long
     names.  These are compiled into ooppeennssssll and include the usual values such
     as ccoommmmoonnNNaammee, ccoouunnttrryyNNaammee, llooccaalliittyyNNaammee, oorrggaanniizzaattiioonnNNaammee,
     oorrggaanniizzaattiioonnUUnniittNNaammee, ssttaatteeOOrrPPrroovviinncceeNNaammee.  Additionally, eemmaaiillAAddddrreessss is
     included as well as nnaammee, ssuurrnnaammee, ggiivveennNNaammee, iinniittiiaallss and ddnnQQuuaalliiffiieerr.

     Additional object identifiers can be defined with the ooiidd__ffiillee or
     ooiidd__sseeccttiioonn options in the configuration file.  Any additional fields
     will be treated as though they were a DDiirreeccttoorryySSttrriinngg.

RRSSAA
     ooppeennssssll rrssaa [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33] [--cchheecckk] [--iinn
     _f_i_l_e] [--iinnffoorrmm ddeerr | nneett | ppeemm] [--mmoodduulluuss] [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm
     ddeerr | nneett | ppeemm] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppuubbiinn] [--ppuubboouutt]
     [--ssggcckkeeyy] [--tteexxtt]

     The rrssaa command processes RSA keys.  They can be converted between vari‐
     ous forms and their components printed out.  rrssaa uses the traditional
     SSSSLLeeaayy compatible format for private key encryption: newer applications
     should use the more secure PKCS#8 format using the ppkkccss88 utility.

     The options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33
             Encrypt the private key with the AES, DES, or the triple DES ci‐
             phers, respectively, before outputting it.  A pass phrase is
             prompted for.  If none of these options are specified, the key is
             written in plain text.  This means that using the rrssaa utility to
             read in an encrypted key with no encryption option can be used to
             remove the pass phrase from a key, or by setting the encryption
             options it can be used to add or change the pass phrase.  These
             options can only be used with PEM format output files.

     --cchheecckk  Check the consistency of an RSA private key.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.
             If the key is encrypted, a pass phrase will be prompted for.

     --iinnffoorrmm ddeerr | nneett | ppeemm
             The input format.

     --nnoooouutt  Do not output the encoded version of the key.

     --mmoodduulluuss
             Print the value of the modulus of the key.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | nneett | ppeemm
             The output format.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppaassssoouutt _a_r_g
             The output file password source.

     --ppuubbiinn  Read in a public key, not a private key.

     --ppuubboouutt
             Output a public key, not a private key.  Automatically set if the
             input is a public key.

     --ssggcckkeeyy
             Use the modified NET algorithm used with some versions of Micro‐
             soft IIS and SGC keys.

     --tteexxtt   Print the public/private key components in plain text.

RRSSAAUUTTLL
     ooppeennssssll rrssaauuttll [--aassnn11ppaarrssee] [--cceerrttiinn] [--ddeeccrryypptt] [--eennccrryypptt] [--hheexxdduummpp]
     [--iinn _f_i_l_e] [--iinnkkeeyy _f_i_l_e] [--kkeeyyffoorrmm ddeerr | ppeemm] [--ooaaeepp | --ppkkccss | --rraaww |
     --ssssll] [--oouutt _f_i_l_e] [--ppuubbiinn] [--ssiiggnn] [--vveerriiffyy]

     The rrssaauuttll command can be used to sign, verify, encrypt and decrypt data
     using the RSA algorithm.

     The options are as follows:

     --aassnn11ppaarrssee
             Asn1parse the output data; this is useful when combined with the
             --vveerriiffyy option.

     --cceerrttiinn
             The input is a certificate containing an RSA public key.

     --ddeeccrryypptt
             Decrypt the input data using an RSA private key.

     --eennccrryypptt
             Encrypt the input data using an RSA public key.

     --hheexxdduummpp
             Hex dump the output data.

     --iinn _f_i_l_e
             The input to read from, or standard input if not specified.

     --iinnkkeeyy _f_i_l_e
             The input key file; by default an RSA private key.

     --kkeeyyffoorrmm ddeerr | ppeemm
             The private ket format.  The default is ppeemm.

     --ooaaeepp | --ppkkccss | --rraaww | --ssssll
             The padding to use: PKCS#1 OAEP, PKCS#1 v1.5 (the default), or no
             padding, respectively.  For signatures, only --ppkkccss and --rraaww can
             be used.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --ppuubbiinn  The input file is an RSA public key.

     --ssiiggnn   Sign the input data and output the signed result.  This requires
             an RSA private key.

     --vveerriiffyy
             Verify the input data and output the recovered data.

SS__CCLLIIEENNTT
     ooppeennssssll ss__cclliieenntt [--44 | --66] [--bbuuggss] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y]
     [--cceerrtt _f_i_l_e] [--cchheecckk__ssss__ssiigg] [--cciipphheerr _c_i_p_h_e_r_l_i_s_t] [--ccoonnnneecctt _h_o_s_t[:_p_o_r_t]]
     [--ccrrll__cchheecckk] [--ccrrll__cchheecckk__aallll] [--ccrrllff] [--ddeebbuugg] [--eexxtteennddeedd__ccrrll] [--iiggnn__eeooff]
     [--iiggnnoorree__ccrriittiiccaall] [--iissssuueerr__cchheecckkss] [--kkeeyy _k_e_y_f_i_l_e] [--mmssgg] [--nnbbiioo]
     [--nnbbiioo__tteesstt] [--nnoo__ttiicckkeett] [--nnoo__ttllss11] [--nnoo__ttllss11__11] [--nnoo__ttllss11__22] [--ppaauussee]
     [--ppoolliiccyy__cchheecckk] [--pprreexxiitt] [--pprrooxxyy _h_o_s_t:_p_o_r_t] [--ppsskk _k_e_y] [--ppsskk__iiddeennttiittyy
     _i_d_e_n_t_i_t_y] [--qquuiieett] [--rreeccoonnnneecctt] [--sseerrvveerrnnaammee _n_a_m_e] [--sshhoowwcceerrttss]
     [--ssttaarrttttllss _p_r_o_t_o_c_o_l] [--ssttaattee] [--ttllss11] [--ttllss11__11] [--ttllss11__22] [--ttllsseexxttddeebbuugg]
     [--vveerriiffyy _d_e_p_t_h] [--xx550099__ssttrriicctt] [--xxmmpppphhoosstt _h_o_s_t]

     The ss__cclliieenntt command implements a generic SSL/TLS client which connects
     to a remote host using SSL/TLS.

     If a connection is established with an SSL server, any data received from
     the server is displayed and any key presses will be sent to the server.
     When used interactively (which means neither --qquuiieett nor --iiggnn__eeooff have
     been given), the session will be renegotiated if the line begins with an
     RR; if the line begins with a QQ or if end of file is reached, the connec‐
     tion will be closed down.

     The options are as follows:

     --44      Attempt connections using IPv4 only.

     --66      Attempt connections using IPv6 only.

     --bbuuggss   Enable various workarounds for buggy implementations.

     --CCAAffiillee _f_i_l_e
             A _f_i_l_e containing trusted certificates to use during server au‐
             thentication and to use when attempting to build the client cer‐
             tificate chain.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             The _d_i_r_e_c_t_o_r_y to use for server certificate verification.  This
             directory must be in "hash format"; see --vveerriiffyy for more informa‐
             tion.  These are also used when building the client certificate
             chain.

     --cceerrtt _f_i_l_e
             The certificate to use, if one is requested by the server.  The
             default is not to use a certificate.

     --cchheecckk__ssss__ssiigg, --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll, --eexxtteennddeedd__ccrrll,
             --iiggnnoorree__ccrriittiiccaall, --iissssuueerr__cchheecckkss, --ppoolliiccyy__cchheecckk, --xx550099__ssttrriicctt
             Set various certificate chain validation options.  See the vveerriiffyy
             command for details.

     --cciipphheerr _c_i_p_h_e_r_l_i_s_t
             Modify the cipher list sent by the client.  Although the server
             determines which cipher suite is used, it should take the first
             supported cipher in the list sent by the client.  See the cciipphheerrss
             command for more information.

     --ccoonnnneecctt _h_o_s_t[:_p_o_r_t]
             The _h_o_s_t and _p_o_r_t to connect to.  If not specified, an attempt is
             made to connect to the local host on port 4433.  Alternatively,
             the host and port pair may be separated using a forward-slash
             character, which is useful for numeric IPv6 addresses.

     --ccrrllff   Translate a line feed from the terminal into CR+LF, as required
             by some servers.

     --ddeebbuugg  Print extensive debugging information, including a hex dump of
             all traffic.

     --iiggnn__eeooff
             Inhibit shutting down the connection when end of file is reached
             in the input.

     --kkeeyy _k_e_y_f_i_l_e
             The private key to use.  If not specified, the certificate file
             will be used.

     --mmssgg    Show all protocol messages with hex dump.

     --nnbbiioo   Turn on non-blocking I/O.

     --nnbbiioo__tteesstt
             Test non-blocking I/O.

     --nnoo__ttllss11 | --nnoo__ttllss11__11 | --nnoo__ttllss11__22
             Disable the use of TLS1.0, 1.1, and 1.2, respectively.

     --nnoo__ttiicckkeett
             Disable RFC 4507 session ticket support.

     --ppaauussee  Pause 1 second between each read and write call.

     --pprreexxiitt
             Print session information when the program exits.  This will al‐
             ways attempt to print out information even if the connection
             fails.  Normally, information will only be printed out once if
             the connection succeeds.  This option is useful because the ci‐
             pher in use may be renegotiated or the connection may fail be‐
             cause a client certificate is required or is requested only after
             an attempt is made to access a certain URL.  Note that the output
             produced by this option is not always accurate because a connec‐
             tion might never have been established.

     --pprrooxxyy _h_o_s_t:_p_o_r_t
             Use the HTTP proxy at _h_o_s_t and _p_o_r_t.  The connection to the proxy
             is done in cleartext and the --ccoonnnneecctt argument is given to the
             proxy.  If not specified, localhost is used as final destination.
             After that, switch the connection through the proxy to the desti‐
             nation to TLS.

     --ppsskk _k_e_y
             Use the PSK key _k_e_y when using a PSK cipher suite.  The key is
             given as a hexadecimal number without the leading 0x, for example
             -psk 1a2b3c4d.

     --ppsskk__iiddeennttiittyy _i_d_e_n_t_i_t_y
             Use the PSK _i_d_e_n_t_i_t_y when using a PSK cipher suite.

     --qquuiieett  Inhibit printing of session and certificate information.  This
             implicitly turns on --iiggnn__eeooff as well.

     --rreeccoonnnneecctt
             Reconnect to the same server 5 times using the same session ID;
             this can be used as a test that session caching is working.

     --sseerrvveerrnnaammee _n_a_m_e
             Include the TLS Server Name Indication (SNI) extension in the
             ClientHello message, using the specified server _n_a_m_e.

     --sshhoowwcceerrttss
             Display the whole server certificate chain: normally only the
             server certificate itself is displayed.

     --ssttaarrttttllss _p_r_o_t_o_c_o_l
             Send the protocol-specific messages to switch to TLS for communi‐
             cation.  _p_r_o_t_o_c_o_l is a keyword for the intended protocol.  Cur‐
             rently, the supported keywords are "ftp", "imap", "smtp", "pop3",
             and "xmpp".

     --ssttaattee  Print the SSL session states.

     --ttllss11 | --ttllss11__11 | --ttllss11__22
             Permit only TLS1.0, 1.1, or 1.2, respectively.

     --ttllsseexxttddeebbuugg
             Print a hex dump of any TLS extensions received from the server.

     --vveerriiffyy _d_e_p_t_h
             Turn on server certificate verification, with a maximum length of
             _d_e_p_t_h.  Currently the verify operation continues after errors so
             all the problems with a certificate chain can be seen.  As a side
             effect the connection will never fail due to a server certificate
             verify failure.

     --xxmmpppphhoosstt _h_o_s_t_n_a_m_e
             When used with --ssttaarrttttllss _x_m_p_p, specify the host for the "to" at‐
             tribute of the stream element.  If this option is not specified
             then the host specified with --ccoonnnneecctt will be used.

SS__SSEERRVVEERR
     ooppeennssssll ss__sseerrvveerr [--aacccceepptt _p_o_r_t] [--bbuuggss] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh
     _d_i_r_e_c_t_o_r_y] [--cceerrtt _f_i_l_e] [--cciipphheerr _c_i_p_h_e_r_l_i_s_t] [--ccoonntteexxtt _i_d] [--ccrrll__cchheecckk]
     [--ccrrll__cchheecckk__aallll] [--ccrrllff] [--ddcceerrtt _f_i_l_e] [--ddeebbuugg] [--ddhhppaarraamm _f_i_l_e] [--ddkkeeyy
     _f_i_l_e] [--hhaacckk] [--HHTTTTPP] [--iidd__pprreeffiixx _a_r_g] [--kkeeyy _k_e_y_f_i_l_e] [--mmssgg] [--nnbbiioo]
     [--nnbbiioo__tteesstt] [--nnoo__ddhhee] [--nnoo__ttllss11] [--nnoo__ttllss11__11] [--nnoo__ttllss11__22] [--nnoo__ttmmpp__rrssaa]
     [--nnoocceerrtt] [--ppsskk _k_e_y] [--ppsskk__hhiinntt _h_i_n_t] [--qquuiieett] [--sseerrvveerrpprreeff] [--ssttaattee]
     [--ttllss11] [--ttllss11__11] [--ttllss11__22] [--VVeerriiffyy _d_e_p_t_h] [--vveerriiffyy _d_e_p_t_h] [--WWWWWW] [--wwwwww]

     The ss__sseerrvveerr command implements a generic SSL/TLS server which listens
     for connections on a given port using SSL/TLS.

     If a connection request is established with a client and neither the --wwwwww
     nor the --WWWWWW option has been used, then any data received from the client
     is displayed and any key presses are sent to the client.  Certain single
     letter commands perform special operations:

     PP     Send plain text, which should cause the client to disconnect.
     QQ     End the current SSL connection and exit.
     qq     End the current SSL connection, but still accept new connections.
     RR     Renegotiate the SSL session and request a client certificate.
     rr     Renegotiate the SSL session.
     SS     Print out some session cache status information.

     The options are as follows:

     --aacccceepptt _p_o_r_t
             Listen on TCP _p_o_r_t for connections.  The default is port 4433.

     --bbuuggss   Enable various workarounds for buggy implementations.

     --CCAAffiillee _f_i_l_e
             A _f_i_l_e containing trusted certificates to use during client au‐
             thentication and to use when attempting to build the server cer‐
             tificate chain.  The list is also used in the list of acceptable
             client CAs passed to the client when a certificate is requested.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             The _d_i_r_e_c_t_o_r_y to use for client certificate verification.  This
             directory must be in "hash format"; see --vveerriiffyy for more informa‐
             tion.  These are also used when building the server certificate
             chain.

     --cceerrtt _f_i_l_e
             The certificate to use: most server's cipher suites require the
             use of a certificate and some require a certificate with a cer‐
             tain public key type.  For example, the DSS cipher suites require
             a certificate containing a DSS (DSA) key.  If not specified, the
             file _s_e_r_v_e_r_._p_e_m will be used.

     --cciipphheerr _c_i_p_h_e_r_l_i_s_t
             Modify the cipher list used by the server.  This allows the ci‐
             pher list used by the server to be modified.  When the client
             sends a list of supported ciphers, the first client cipher also
             included in the server list is used.  Because the client speci‐
             fies the preference order, the order of the server cipherlist is
             irrelevant.  See the cciipphheerrss command for more information.

     --ccoonntteexxtt _i_d
             Set the SSL context ID.  It can be given any string value.

     --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll
             Check the peer certificate has not been revoked by its CA.  The
             CRLs are appended to the certificate file.  --ccrrll__cchheecckk__aallll checks
             all CRLs of all CAs in the chain.

     --ccrrllff   Translate a line feed from the terminal into CR+LF.

     --ddcceerrtt _f_i_l_e, --ddkkeeyy _f_i_l_e
             Specify an additional certificate and private key; these behave
             in the same manner as the --cceerrtt and --kkeeyy options except there is
             no default if they are not specified (no additional certificate
             or key is used).  By using RSA and DSS certificates and keys, a
             server can support clients which only support RSA or DSS cipher
             suites by using an appropriate certificate.

     --ddeebbuugg  Print extensive debugging information, including a hex dump of
             all traffic.

     --ddhhppaarraamm _f_i_l_e
             The DH parameter file to use.  The ephemeral DH cipher suites
             generate keys using a set of DH parameters.  If not specified, an
             attempt is made to load the parameters from the server certifi‐
             cate file.  If this fails, a static set of parameters hard coded
             into the ss__sseerrvveerr program will be used.

     --hhaacckk   Enables a further workaround for some early Netscape SSL code.

     --HHTTTTPP   Emulate a simple web server.  Pages are resolved relative to the
             current directory.  For example if the URL
             _h_t_t_p_s_:_/_/_m_y_h_o_s_t_/_p_a_g_e_._h_t_m_l is requested, the file _._/_p_a_g_e_._h_t_m_l will
             be loaded.  The files loaded are assumed to contain a complete
             and correct HTTP response (lines that are part of the HTTP re‐
             sponse line and headers must end with CRLF).

     --iidd__pprreeffiixx _a_r_g
             Generate SSL/TLS session IDs prefixed by _a_r_g.  This is mostly
             useful for testing any SSL/TLS code that wish to deal with multi‐
             ple servers, when each of which might be generating a unique
             range of session IDs.

     --kkeeyy _k_e_y_f_i_l_e
             The private key to use.  If not specified, the certificate file
             will be used.

     --mmssgg    Show all protocol messages with hex dump.

     --nnbbiioo   Turn on non-blocking I/O.

     --nnbbiioo__tteesstt
             Test non-blocking I/O.

     --nnoo__ddhhee
             Disable ephemeral DH cipher suites.

     --nnoo__ttllss11 | --nnoo__ttllss11__11 | --nnoo__ttllss11__22
             Disable the use of TLS1.0, 1.1, and 1.2, respectively.

     --nnoo__ttmmpp__rrssaa
             Disable temporary RSA key generation.

     --nnoocceerrtt
             Do not use a certificate.  This restricts the cipher suites
             available to the anonymous ones (currently just anonymous DH).

     --ppsskk _k_e_y
             Use the PSK key _k_e_y when using a PSK cipher suite.  The key is
             given as a hexadecimal number without the leading 0x, for example
             -psk 1a2b3c4d.

     --ppsskk__hhiinntt _h_i_n_t
             Use the PSK identity hint _h_i_n_t when using a PSK cipher suite.

     --qquuiieett  Inhibit printing of session and certificate information.

     --sseerrvveerrpprreeff
             Use server's cipher preferences.

     --ssttaattee  Print the SSL session states.

     --ttllss11 | --ttllss11__11 | --ttllss11__22
             Permit only TLS1.0, 1.1, or 1.2, respectively.

     --WWWWWW    Emulate a simple web server.  Pages are resolved relative to the
             current directory.  For example if the URL
             _h_t_t_p_s_:_/_/_m_y_h_o_s_t_/_p_a_g_e_._h_t_m_l is requested, the file _._/_p_a_g_e_._h_t_m_l will
             be loaded.

     --wwwwww    Send a status message to the client when it connects, including
             information about the ciphers used and various session parame‐
             ters.  The output is in HTML format so this option will normally
             be used with a web browser.

     --VVeerriiffyy _d_e_p_t_h, --vveerriiffyy _d_e_p_t_h
             Request a certificate chain from the client, with a maximum
             length of _d_e_p_t_h.  With --VVeerriiffyy, the client must supply a certifi‐
             cate or an error occurs; with --vveerriiffyy, a certificate is requested
             but the client does not have to send one.

SS__TTIIMMEE
     ooppeennssssll ss__ttiimmee [--bbuuggss] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cceerrtt _f_i_l_e]
     [--cciipphheerr _c_i_p_h_e_r_l_i_s_t] [--ccoonnnneecctt _h_o_s_t[:_p_o_r_t]] [--kkeeyy _k_e_y_f_i_l_e] [--nnbbiioo] [--nneeww]
     [--nnoo__sshhuuttddoowwnn] [--rreeuussee] [--ttiimmee _s_e_c_o_n_d_s] [--vveerriiffyy _d_e_p_t_h] [--wwwwww _p_a_g_e]

     The ss__ttiimmee command implements a generic SSL/TLS client which connects to
     a remote host using SSL/TLS.  It can request a page from the server and
     includes the time to transfer the payload data in its timing measure‐
     ments.  It measures the number of connections within a given timeframe,
     the amount of data transferred (if any), and calculates the average time
     spent for one connection.

     The options are as follows:

     --bbuuggss   Enable various workarounds for buggy implementations.

     --CCAAffiillee _f_i_l_e
             A _f_i_l_e containing trusted certificates to use during server au‐
             thentication and to use when attempting to build the client cer‐
             tificate chain.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             The directory to use for server certificate verification.  This
             directory must be in "hash format"; see vveerriiffyy for more informa‐
             tion.  These are also used when building the client certificate
             chain.

     --cceerrtt _f_i_l_e
             The certificate to use, if one is requested by the server.  The
             default is not to use a certificate.

     --cciipphheerr _c_i_p_h_e_r_l_i_s_t
             Modify the cipher list sent by the client.  Although the server
             determines which cipher suite is used, it should take the first
             supported cipher in the list sent by the client.  See the cciipphheerrss
             command for more information.

     --ccoonnnneecctt _h_o_s_t[:_p_o_r_t]
             The host and port to connect to.

     --kkeeyy _k_e_y_f_i_l_e
             The private key to use.  If not specified, the certificate file
             will be used.

     --nnbbiioo   Turn on non-blocking I/O.

     --nneeww    Perform the timing test using a new session ID for each connec‐
             tion.  If neither --nneeww nor --rreeuussee are specified, they are both on
             by default and executed in sequence.

     --nnoo__sshhuuttddoowwnn
             Shut down the connection without sending a "close notify" shut‐
             down alert to the server.

     --rreeuussee  Perform the timing test using the same session ID for each con‐
             nection.  If neither --nneeww nor --rreeuussee are specified, they are both
             on by default and executed in sequence.

     --ttiimmee _s_e_c_o_n_d_s
             Limit ss__ttiimmee benchmarks to the number of _s_e_c_o_n_d_s.  The default is
             30 seconds.

     --vveerriiffyy _d_e_p_t_h
             Turn on server certificate verification, with a maximum length of
             _d_e_p_t_h.  Currently the verify operation continues after errors, so
             all the problems with a certificate chain can be seen.  As a side
             effect, the connection will never fail due to a server certifi‐
             cate verify failure.

     --wwwwww _p_a_g_e
             The page to GET from the server.  A value of ‘/’ gets the in‐
             dex.htm[l] page.  If this parameter is not specified, ss__ttiimmee will
             only perform the handshake to establish SSL connections but not
             transfer any payload data.

SSEESSSS__IIDD
     ooppeennssssll sseessss__iidd [--cceerrtt] [--ccoonntteexxtt _I_D] [--iinn _f_i_l_e] [--iinnffoorrmm ddeerr | ppeemm]
     [--nnoooouutt] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm] [--tteexxtt]

     The sseessss__iidd program processes the encoded version of the SSL session
     structure and optionally prints out SSL session details (for example the
     SSL session master key) in human-readable format.

     The options are as follows:

     --cceerrtt   If a certificate is present in the session, it will be output us‐
             ing this option; if the --tteexxtt option is also present, then it
             will be printed out in text form.

     --ccoonntteexxtt _I_D
             Set the session _I_D.  The ID can be any string of characters.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | ppeemm
             The input format.  ddeerr uses an ASN.1 DER-encoded format contain‐
             ing session details.  The precise format can vary from one ver‐
             sion to the next.  ppeemm is the default format: it consists of the
             DER format base64-encoded with additional header and footer
             lines.

     --nnoooouutt  Do not output the encoded version of the session.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --oouuttffoorrmm ddeerr | ppeemm
             The output format.

     --tteexxtt   Print the various public or private key components in plain text,
             in addition to the encoded version.

     The output of sseessss__iidd is composed as follows:

        Protocol             The protocol in use.
        Cipher               The actual raw SSL or TLS cipher code.
        Session-ID           The SSL session ID, in hex format.
        Session-ID-ctx       The session ID context, in hex format.
        Master-Key           The SSL session master key.
        Key-Arg              The key argument; this is only used in SSL v2.
        Start Time           The session start time.  UNIX format.
        Timeout              The timeout, in seconds.
        Verify return code   The return code when a certificate is verified.

     Since the SSL session output contains the master key, it is possible to
     read the contents of an encrypted session using this information.  There‐
     fore appropriate security precautions should be taken if the information
     is being output by a "real" application.  This is, however, strongly dis‐
     couraged and should only be used for debugging purposes.

SSMMIIMMEE
     ooppeennssssll ssmmiimmee [--aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33 | --rrcc22--4400 |
     --rrcc22--6644 | --rrcc22--112288] [--bbiinnaarryy] [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y]
     [--cceerrttffiillee _f_i_l_e] [--cchheecckk__ssss__ssiigg] [--ccoonntteenntt _f_i_l_e] [--ccrrll__cchheecckk]
     [--ccrrll__cchheecckk__aallll] [--ddeeccrryypptt] [--eennccrryypptt] [--eexxtteennddeedd__ccrrll] [--ffrroomm _a_d_d_r]
     [--iiggnnoorree__ccrriittiiccaall] [--iinn _f_i_l_e] [--iinnddeeff] [--iinnffoorrmm ddeerr | ppeemm | ssmmiimmee]
     [--iinnkkeeyy _f_i_l_e] [--iissssuueerr__cchheecckkss] [--kkeeyyffoorrmm ppeemm] [--mmdd _d_i_g_e_s_t] [--nnooaattttrr]
     [--nnoocceerrttss] [--nnoocchhaaiinn] [--nnooddeettaacchh] [--nnooiinnddeeff] [--nnooiinntteerrnn] [--nnoossiiggss]
     [--nnoovveerriiffyy] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | ppeemm | ssmmiimmee] [--ppaassssiinn _a_r_g]
     [--ppkk77oouutt] [--ppoolliiccyy__cchheecckk] [--rreecciipp _f_i_l_e] [--rreessiiggnn] [--ssiiggnn] [--ssiiggnneerr _f_i_l_e]
     [--ssttrreeaamm] [--ssuubbjjeecctt _s] [--tteexxtt] [--ttoo _a_d_d_r] [--vveerriiffyy] [--xx550099__ssttrriicctt]
     [_c_e_r_t_._p_e_m _._._.]

     The ssmmiimmee command handles S/MIME mail.  It can encrypt, decrypt, sign,
     and verify S/MIME messages.

     The MIME message must be sent without any blank lines between the headers
     and the output.  Some mail programs will automatically add a blank line.
     Piping the mail directly to an MTA is one way to achieve the correct for‐
     mat.

     The supplied message to be signed or encrypted must include the necessary
     MIME headers or many S/MIME clients won't display it properly (if at
     all).  Use the --tteexxtt option to automatically add plain text headers.

     A "signed and encrypted" message is one where a signed message is then
     encrypted.  This can be produced by encrypting an already signed message.

     There are a number of operations that can be performed, as follows:

     --ddeeccrryypptt
           Decrypt mail using the supplied certificate and private key.  The
           input file is an encrypted mail message in MIME format.  The de‐
           crypted mail is written to the output file.

     --eennccrryypptt
           Encrypt mail for the given recipient certificates.  The input is
           the message to be encrypted.  The output file is the encrypted
           mail, in MIME format.

     --ppkk77oouutt
           Take an input message and write out a PEM-encoded PKCS#7 structure.

     --rreessiiggnn
           Resign a message: take an existing message and one or more new
           signers.

     --ssiiggnn
           Sign mail using the supplied certificate and private key.  The in‐
           put file is the message to be signed.  The signed message, in MIME
           format, is written to the output file.

     --vveerriiffyy
           Verify signed mail.  The input is a signed mail message and the
           output is the signed data.  Both clear text and opaque signing is
           supported.

     The remaining options are as follows:

     --aaeess112288 | --aaeess119922 | --aaeess225566 | --ddeess | --ddeess33 | --rrcc22--4400 | --rrcc22--6644 | --rrcc22--112288
           The encryption algorithm to use.  128-, 192-, or 256-bit AES, DES
           (56 bits), triple DES (168 bits), or 40-, 64-, or 128-bit RC2, re‐
           spectively; if not specified, 40-bit RC2 is used.  Only used with
           --eennccrryypptt.

     --bbiinnaarryy
           Normally, the input message is converted to "canonical" format
           which uses CR/LF as end of line, as required by the S/MIME specifi‐
           cation.  When this option is present no translation occurs.  This
           is useful when handling binary data which may not be in MIME for‐
           mat.

     --CCAAffiillee _f_i_l_e
           A _f_i_l_e containing trusted CA certificates; only used with --vveerriiffyy.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
           A _d_i_r_e_c_t_o_r_y containing trusted CA certificates; only used with
           --vveerriiffyy.  This directory must be a standard certificate directory:
           that is, a hash of each subject name (using xx550099 --hhaasshh) should be
           linked to each certificate.

     _c_e_r_t_._p_e_m _._._.
           One or more certificates of message recipients: used when encrypt‐
           ing a message.

     --cceerrttffiillee _f_i_l_e
           Allows additional certificates to be specified.  When signing,
           these will be included with the message.  When verifying, these
           will be searched for the signers' certificates.  The certificates
           should be in PEM format.

     --cchheecckk__ssss__ssiigg, --ccrrll__cchheecckk, --ccrrll__cchheecckk__aallll, --eexxtteennddeedd__ccrrll,
           --iiggnnoorree__ccrriittiiccaall, --iissssuueerr__cchheecckkss, --ppoolliiccyy__cchheecckk, --xx550099__ssttrriicctt
           Set various certificate chain validation options.  See the vveerriiffyy
           command for details.

     --ccoonntteenntt _f_i_l_e
           A file containing the detached content.  This is only useful with
           the --vveerriiffyy option, and only usable if the PKCS#7 structure is us‐
           ing the detached signature form where the content is not included.
           This option will override any content if the input format is S/MIME
           and it uses the multipart/signed MIME content type.

     --ffrroomm _a_d_d_r, --ssuubbjjeecctt _s, --ttoo _a_d_d_r
           The relevant mail headers.  These are included outside the signed
           portion of a message so they may be included manually.  When sign‐
           ing, many S/MIME mail clients check that the signer's certificate
           email address matches the From: address.

     --iinn _f_i_l_e
           The input file to read from.

     --iinnddeeff
           Enable streaming I/O for encoding operations.  This permits single
           pass processing of data without the need to hold the entire con‐
           tents in memory, potentially supporting very large files.  Stream‐
           ing is automatically set for S/MIME signing with detached data if
           the output format is SMIME; it is currently off by default for all
           other operations.

     --iinnffoorrmm ddeerr | ppeemm | ssmmiimmee
           The input format.

     --iinnkkeeyy _f_i_l_e
           The private key to use when signing or decrypting, which must match
           the corresponding certificate.  If this option is not specified,
           the private key must be included in the certificate file specified
           with the --rreecciipp or --ssiiggnneerr file.  When signing, this option can be
           used multiple times to specify successive keys.

     --kkeeyyffoorrmm ppeemm
           Input private key format.

     --mmdd _d_i_g_e_s_t
           The digest algorithm to use when signing or resigning.  If not
           present then the default digest algorithm for the signing key is
           used (usually SHA1).

     --nnooaattttrr
           Do not include attributes.

     --nnoocceerrttss
           Do not include the signer's certificate.  This will reduce the size
           of the signed message but the verifier must have a copy of the
           signer's certificate available locally (passed using the --cceerrttffiillee
           option, for example).

     --nnoocchhaaiinn
           Do not do chain verification of signers' certificates: that is,
           don't use the certificates in the signed message as untrusted CAs.

     --nnooddeettaacchh
           When signing a message use opaque signing: this form is more resis‐
           tant to translation by mail relays but it cannot be read by mail
           agents that do not support S/MIME.  Without this option cleartext
           signing with the MIME type multipart/signed is used.

     --nnooiinnddeeff
           Disable streaming I/O where it would produce an encoding of indefi‐
           nite length (currently has no effect).

     --nnooiinntteerrnn
           Only use certificates specified in the --cceerrttffiillee.  The supplied
           certificates can still be used as untrusted CAs.

     --nnoossiiggss
           Do not try to verify the signatures on the message.

     --nnoovveerriiffyy
           Do not verify the signer's certificate of a signed message.

     --oouutt _f_i_l_e
           The output file to write to.

     --oouuttffoorrmm ddeerr | ppeemm | ssmmiimmee
           The output format.  The default is smime, which writes an S/MIME
           format message.  ppeemm and ddeerr change this to write PEM and DER for‐
           mat PKCS#7 structures instead.  This currently only affects the
           output format of the PKCS#7 structure; if no PKCS#7 structure is
           being output (for example with --vveerriiffyy or --ddeeccrryypptt) this option has
           no effect.

     --ppaassssiinn _a_r_g
           The key password source.

     --rreecciipp _f_i_l_e
           The recipients certificate when decrypting a message.  This cer‐
           tificate must match one of the recipients of the message or an er‐
           ror occurs.

     --ssiiggnneerr _f_i_l_e
           A signing certificate when signing or resigning a message; this op‐
           tion can be used multiple times if more than one signer is re‐
           quired.  If a message is being verified, the signer's certificates
           will be written to this file if the verification was successful.

     --ssttrreeaamm
           The same as --iinnddeeff.

     --tteexxtt
           Add plain text (text/plain) MIME headers to the supplied message if
           encrypting or signing.  If decrypting or verifying, it strips off
           text headers: if the decrypted or verified message is not of MIME
           type text/plain then an error occurs.

     The exit codes for ssmmiimmee are as follows:

        0     The operation was completely successful.
        1     An error occurred parsing the command options.
        2     One of the input files could not be read.
        3     An error occurred creating the file or when reading the message.
        4     An error occurred decrypting or verifying the message.
        5     An error occurred writing certificates.

SSPPEEEEDD
     ooppeennssssll ssppeeeedd [_a_l_g_o_r_i_t_h_m] [--ddeeccrryypptt] [--eellaappsseedd] [--eevvpp _a_l_g_o_r_i_t_h_m] [--mmrr]
     [--mmuullttii _n_u_m_b_e_r]

     The ssppeeeedd command is used to test the performance of cryptographic algo‐
     rithms.

     _a_l_g_o_r_i_t_h_m
           Perform the test using _a_l_g_o_r_i_t_h_m.  The default is to test all algo‐
           rithms.

     --ddeeccrryypptt
           Time decryption instead of encryption; must be used with --eevvpp.

     --eellaappsseedd
           Measure time in real time instead of CPU user time.

     --eevvpp _a_l_g_o_r_i_t_h_m
           Perform the test using one of the algorithms accepted by
           EVP_get_cipherbyname(3).

     --mmrr   Produce machine readable output.

     --mmuullttii _n_u_m_b_e_r
           Run _n_u_m_b_e_r benchmarks in parallel.

SSPPKKAACC
     ooppeennssssll ssppkkaacc [--cchhaalllleennggee _s_t_r_i_n_g] [--iinn _f_i_l_e] [--kkeeyy _k_e_y_f_i_l_e] [--nnoooouutt]
     [--oouutt _f_i_l_e] [--ppaassssiinn _a_r_g] [--ppuubbkkeeyy] [--ssppkkaacc _s_p_k_a_c_n_a_m_e] [--ssppkksseecctt _s_e_c_t_i_o_n]
     [--vveerriiffyy]

     The ssppkkaacc command processes signed public key and challenge (SPKAC)
     files.  It can print out their contents, verify the signature, and pro‐
     duce its own SPKACs from a supplied private key.

     The options are as follows:

     --cchhaalllleennggee _s_t_r_i_n_g
             The challenge string, if an SPKAC is being created.

     --iinn _f_i_l_e
             The input file to read from, or standard input if not specified.
             Ignored if the --kkeeyy option is used.

     --kkeeyy _k_e_y_f_i_l_e
             Create an SPKAC file using the private key in _k_e_y_f_i_l_e.  The --iinn,
             --nnoooouutt, --ssppkksseecctt, and --vveerriiffyy options are ignored, if present.

     --nnoooouutt  Do not output the text version of the SPKAC.

     --oouutt _f_i_l_e
             The output file to write to, or standard output if not specified.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppuubbkkeeyy
             Output the public key of an SPKAC.

     --ssppkkaacc _s_p_k_a_c_n_a_m_e
             An alternative name for the variable containing the SPKAC.  The
             default is "SPKAC".  This option affects both generated and input
             SPKAC files.

     --ssppkksseecctt _s_e_c_t_i_o_n
             An alternative name for the _s_e_c_t_i_o_n containing the SPKAC.

     --vveerriiffyy
             Verify the digital signature on the supplied SPKAC.

TTSS
     ooppeennssssll ttss --qquueerryy [--mmdd44 | --mmdd55 | --rriippeemmdd116600 | --sshhaa11] [--cceerrtt] [--ccoonnffiigg
     _c_o_n_f_i_g_f_i_l_e] [--ddaattaa _f_i_l_e___t_o___h_a_s_h] [--ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s] [--iinn _r_e_q_u_e_s_t_._t_s_q]
     [--nnoo__nnoonnccee] [--oouutt _r_e_q_u_e_s_t_._t_s_q] [--ppoolliiccyy _o_b_j_e_c_t___i_d] [--tteexxtt]

     ooppeennssssll ttss --rreeppllyy [--cchhaaiinn _c_e_r_t_s___f_i_l_e_._p_e_m] [--ccoonnffiigg _c_o_n_f_i_g_f_i_l_e] [--iinn
     _r_e_s_p_o_n_s_e_._t_s_r] [--iinnkkeeyy _p_r_i_v_a_t_e_._p_e_m] [--oouutt _r_e_s_p_o_n_s_e_._t_s_r] [--ppaassssiinn _a_r_g]
     [--ppoolliiccyy _o_b_j_e_c_t___i_d] [--qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q] [--sseeccttiioonn _t_s_a___s_e_c_t_i_o_n]
     [--ssiiggnneerr _t_s_a___c_e_r_t_._p_e_m] [--tteexxtt] [--ttookkeenn__iinn] [--ttookkeenn__oouutt]

     ooppeennssssll ttss --vveerriiffyy [--CCAAffiillee _t_r_u_s_t_e_d___c_e_r_t_s_._p_e_m] [--CCAAppaatthh
     _t_r_u_s_t_e_d___c_e_r_t___p_a_t_h] [--ddaattaa _f_i_l_e___t_o___h_a_s_h] [--ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s] [--iinn
     _r_e_s_p_o_n_s_e_._t_s_r] [--qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q] [--ttookkeenn__iinn] [--uunnttrruusstteedd
     _c_e_r_t___f_i_l_e_._p_e_m]

     The ttss command is a basic Time Stamping Authority (TSA) client and server
     application as specified in RFC 3161 (Time-Stamp Protocol, TSP).  A TSA
     can be part of a PKI deployment and its role is to provide long term
     proof of the existence of specific data.  Here is a brief description of
     the protocol:

     1.   The TSA client computes a one-way hash value for a data file and
          sends the hash to the TSA.

     2.   The TSA attaches the current date and time to the received hash
          value, signs them and sends the time stamp token back to the client.
          By creating this token the TSA certifies the existence of the origi‐
          nal data file at the time of response generation.

     3.   The TSA client receives the time stamp token and verifies the signa‐
          ture on it.  It also checks if the token contains the same hash
          value that it had sent to the TSA.

     There is one DER-encoded protocol data unit defined for transporting a
     time stamp request to the TSA and one for sending the time stamp response
     back to the client.  The ttss command has three main functions: creating a
     time stamp request based on a data file; creating a time stamp response
     based on a request; and verifying if a response corresponds to a particu‐
     lar request or a data file.

     There is no support for sending the requests/responses automatically over
     HTTP or TCP yet as suggested in RFC 3161.  Users must send the requests
     either by FTP or email.

     The --qquueerryy switch can be used for creating and printing a time stamp re‐
     quest with the following options:

     --cceerrtt   Expect the TSA to include its signing certificate in the re‐
             sponse.

     --ccoonnffiigg _c_o_n_f_i_g_f_i_l_e
             Specify an alternative configuration file.  Only the OID section
             is used.

     --ddaattaa _f_i_l_e___t_o___h_a_s_h
             The data file for which the time stamp request needs to be cre‐
             ated.  The default is standard input.

     --ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s
             Specify the message imprint explicitly without the data file.
             The imprint must be specified in a hexadecimal format, two char‐
             acters per byte, the bytes optionally separated by colons.  The
             number of bytes must match the message digest algorithm in use.

     --iinn _r_e_q_u_e_s_t_._t_s_q
             A previously created time stamp request in DER format that will
             be printed into the output file.  Useful for examining the con‐
             tent of a request in human-readable format.

     --mmdd44 | --mmdd55 | --rriippeemmdd116600 | --sshhaa | --sshhaa11
             The message digest to apply to the data file.  It supports all
             the message digest algorithms that are supported by the ddggsstt com‐
             mand.  The default is SHA-1.

     --nnoo__nnoonnccee
             Specify no nonce in the request.  The default, to include a
             64-bit long pseudo-random nonce, is recommended to protect
             against replay attacks.

     --oouutt _r_e_q_u_e_s_t_._t_s_q
             The output file to write to, or standard output if not specified.

     --ppoolliiccyy _o_b_j_e_c_t___i_d
             The policy that the client expects the TSA to use for creating
             the time stamp token.  Either dotted OID notation or OID names
             defined in the config file can be used.  If no policy is re‐
             quested the TSA uses its own default policy.

     --tteexxtt   Output in human-readable text format instead of DER.

     A time stamp response (TimeStampResp) consists of a response status and
     the time stamp token itself (ContentInfo), if the token generation was
     successful.  The --rreeppllyy command is for creating a time stamp response or
     time stamp token based on a request and printing the response/token in
     human-readable format.  If --ttookkeenn__oouutt is not specified the output is al‐
     ways a time stamp response (TimeStampResp), otherwise it is a time stamp
     token (ContentInfo).

     --cchhaaiinn _c_e_r_t_s___f_i_l_e_._p_e_m
             The collection of PEM certificates that will be included in the
             response in addition to the signer certificate if the --cceerrtt op‐
             tion was used for the request.  This file is supposed to contain
             the certificate chain for the signer certificate from its issuer
             upwards.  The --rreeppllyy command does not build a certificate chain
             automatically.

     --ccoonnffiigg _c_o_n_f_i_g_f_i_l_e
             Specify an alternative configuration file.

     --iinn _r_e_s_p_o_n_s_e_._t_s_r
             Specify a previously created time stamp response (or time stamp
             token, if --ttookkeenn__iinn is also specified) in DER format that will be
             written to the output file.  This option does not require a re‐
             quest; it is useful, for example, to examine the content of a re‐
             sponse or token or to extract the time stamp token from a re‐
             sponse.  If the input is a token and the output is a time stamp
             response a default "granted" status info is added to the token.

     --iinnkkeeyy _p_r_i_v_a_t_e_._p_e_m
             The signer private key of the TSA in PEM format.  Overrides the
             ssiiggnneerr__kkeeyy config file option.

     --oouutt _r_e_s_p_o_n_s_e_._t_s_r
             The response is written to this file.  The format and content of
             the file depends on other options (see --tteexxtt and --ttookkeenn__oouutt).
             The default is stdout.

     --ppaassssiinn _a_r_g
             The key password source.

     --ppoolliiccyy _o_b_j_e_c_t___i_d
             The default policy to use for the response.  Either dotted OID
             notation or OID names defined in the config file can be used.  If
             no policy is requested the TSA uses its own default policy.

     --qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q
             The file containing a DER-encoded time stamp request.

     --sseeccttiioonn _t_s_a___s_e_c_t_i_o_n
             The config file section containing the settings for response gen‐
             eration.

     --ssiiggnneerr _t_s_a___c_e_r_t_._p_e_m
             The PEM signer certificate of the TSA.  The TSA signing certifi‐
             cate must have exactly one extended key usage assigned to it:
             timeStamping.  The extended key usage must also be critical, oth‐
             erwise the certificate is going to be refused.  Overrides the
             ssiiggnneerr__cceerrtt variable of the config file.

     --tteexxtt   Output in human-readable text format instead of DER.

     --ttookkeenn__iinn
             The input is a DER-encoded time stamp token (ContentInfo) instead
             of a time stamp response (TimeStampResp).

     --ttookkeenn__oouutt
             The output is a time stamp token (ContentInfo) instead of a time
             stamp response (TimeStampResp).

     The --vveerriiffyy command is for verifying if a time stamp response or time
     stamp token is valid and matches a particular time stamp request or data
     file.  The --vveerriiffyy command does not use the configuration file.

     --CCAAffiillee _t_r_u_s_t_e_d___c_e_r_t_s_._p_e_m
             The file containing a set of trusted self-signed PEM CA certifi‐
             cates.  See vveerriiffyy for additional details.  Either this option or
             --CCAAppaatthh must be specified.

     --CCAAppaatthh _t_r_u_s_t_e_d___c_e_r_t___p_a_t_h
             The directory containing the trused CA certificates of the
             client.  See vveerriiffyy for additional details.  Either this option
             or --CCAAffiillee must be specified.

     --ddaattaa _f_i_l_e___t_o___h_a_s_h
             The response or token must be verified against _f_i_l_e___t_o___h_a_s_h.  The
             file is hashed with the message digest algorithm specified in the
             token.  The --ddiiggeesstt and --qquueerryyffiillee options must not be specified
             with this one.

     --ddiiggeesstt _d_i_g_e_s_t___b_y_t_e_s
             The response or token must be verified against the message digest
             specified with this option.  The number of bytes must match the
             message digest algorithm specified in the token.  The --ddaattaa and
             --qquueerryyffiillee options must not be specified with this one.

     --iinn _r_e_s_p_o_n_s_e_._t_s_r
             The time stamp response that needs to be verified, in DER format.
             This option in mandatory.

     --qquueerryyffiillee _r_e_q_u_e_s_t_._t_s_q
             The original time stamp request, in DER format.  The --ddaattaa and
             --ddiiggeesstt options must not be specified with this one.

     --ttookkeenn__iinn
             The input is a DER-encoded time stamp token (ContentInfo) instead
             of a time stamp response (TimeStampResp).

     --uunnttrruusstteedd _c_e_r_t___f_i_l_e_._p_e_m
             Additional untrusted PEM certificates which may be needed when
             building the certificate chain for the TSA's signing certificate.
             This file must contain the TSA signing certificate and all inter‐
             mediate CA certificates unless the response includes them.

     Options specified on the command line always override the settings in the
     config file:

     ttssaa _s_e_c_t_i_o_n, ddeeffaauulltt__ttssaa
             This is the main section and it specifies the name of another
             section that contains all the options for the --rreeppllyy option.
             This section can be overridden with the --sseeccttiioonn command line
             switch.

     ooiidd__ffiillee
             See ccaa for a description.

     ooiidd__sseeccttiioonn
             See ccaa for a description.

     sseerriiaall  The file containing the hexadecimal serial number of the last
             time stamp response created.  This number is incremented by 1 for
             each response.  If the file does not exist at the time of re‐
             sponse generation a new file is created with serial number 1.
             This parameter is mandatory.

     ssiiggnneerr__cceerrtt
             TSA signing certificate, in PEM format.  The same as the --ssiiggnneerr
             command line option.

     cceerrttss   A set of PEM-encoded certificates that need to be included in the
             response.  The same as the --cchhaaiinn command line option.

     ssiiggnneerr__kkeeyy
             The private key of the TSA, in PEM format.  The same as the
             --iinnkkeeyy command line option.

     ddeeffaauulltt__ppoolliiccyy
             The default policy to use when the request does not mandate any
             policy.  The same as the --ppoolliiccyy command line option.

     ootthheerr__ppoolliicciieess
             Comma separated list of policies that are also acceptable by the
             TSA and used only if the request explicitly specifies one of
             them.

     ddiiggeessttss
             The list of message digest algorithms that the TSA accepts.  At
             least one algorithm must be specified.  This parameter is manda‐
             tory.

     aaccccuurraaccyy
             The accuracy of the time source of the TSA in seconds, millisec‐
             onds and microseconds.  For example, secs:1, millisecs:500, mi‐
             crosecs:100.  If any of the components is missing, zero is as‐
             sumed for that field.

     cclloocckk__pprreecciissiioonn__ddiiggiittss
             The maximum number of digits, which represent the fraction of
             seconds, that need to be included in the time field.  The trail‐
             ing zeroes must be removed from the time, so there might actually
             be fewer digits or no fraction of seconds at all.  The maximum
             value is 6; the default is 0.

     oorrddeerriinngg
             If this option is yes, the responses generated by this TSA can
             always be ordered, even if the time difference between two re‐
             sponses is less than the sum of their accuracies.  The default is
             no.

     ttssaa__nnaammee
             Set this option to yes if the subject name of the TSA must be in‐
             cluded in the TSA name field of the response.  The default is no.

     eessss__cceerrtt__iidd__cchhaaiinn
             The SignedData objects created by the TSA always contain the cer‐
             tificate identifier of the signing certificate in a signed attri‐
             bute (see RFC 2634, Enhanced Security Services).  If this option
             is set to yes and either the cceerrttss variable or the --cchhaaiinn option
             is specified then the certificate identifiers of the chain will
             also be included in the SigningCertificate signed attribute.  If
             this variable is set to no, only the signing certificate identi‐
             fier is included.  The default is no.

VVEERRIIFFYY
     ooppeennssssll vveerriiffyy [--CCAAffiillee _f_i_l_e] [--CCAAppaatthh _d_i_r_e_c_t_o_r_y] [--cchheecckk__ssss__ssiigg]
     [--ccrrll__cchheecckk] [--ccrrll__cchheecckk__aallll] [--eexxpplliicciitt__ppoolliiccyy] [--eexxtteennddeedd__ccrrll] [--hheellpp]
     [--iiggnnoorree__ccrriittiiccaall] [--iinnhhiibbiitt__aannyy] [--iinnhhiibbiitt__mmaapp] [--iissssuueerr__cchheecckkss]
     [--ppoolliiccyy__cchheecckk] [--ppuurrppoossee _p_u_r_p_o_s_e] [--uunnttrruusstteedd _f_i_l_e] [--vveerrbboossee]
     [--xx550099__ssttrriicctt] [_c_e_r_t_i_f_i_c_a_t_e_s]

     The vveerriiffyy command verifies certificate chains.

     The options are as follows:

     --cchheecckk__ssss__ssiigg
             Verify the signature on the self-signed root CA.  This is dis‐
             abled by default because it doesn't add any security.

     --CCAAffiillee _f_i_l_e
             A _f_i_l_e of trusted certificates.  The _f_i_l_e should contain multiple
             certificates in PEM format, concatenated together.

     --CCAAppaatthh _d_i_r_e_c_t_o_r_y
             A _d_i_r_e_c_t_o_r_y of trusted certificates.  The certificates, or sym‐
             bolic links to them, should have names of the form _h_a_s_h.0, where
             _h_a_s_h is the hashed certificate subject name (see the --hhaasshh option
             of the xx550099 utility).

     --ccrrll__cchheecckk
             Check end entity certificate validity by attempting to look up a
             valid CRL.  If a valid CRL cannot be found an error occurs.

     --ccrrll__cchheecckk__aallll
             Check the validity of all certificates in the chain by attempting
             to look up valid CRLs.

     --eexxpplliicciitt__ppoolliiccyy
             Set policy variable require-explicit-policy (RFC 3280).

     --eexxtteennddeedd__ccrrll
             Enable extended CRL features such as indirect CRLs and alternate
             CRL signing keys.

     --hheellpp   Print a usage message.

     --iiggnnoorree__ccrriittiiccaall
             Ignore critical extensions instead of rejecting the certificate.

     --iinnhhiibbiitt__aannyy
             Set policy variable inhibit-any-policy (RFC 3280).

     --iinnhhiibbiitt__mmaapp
             Set policy variable inhibit-policy-mapping (RFC 3280).

     --iissssuueerr__cchheecckkss
             Print diagnostics relating to searches for the issuer certificate
             of the current certificate showing why each candidate issuer cer‐
             tificate was rejected.  The presence of rejection messages does
             not itself imply that anything is wrong: during the normal verify
             process several rejections may take place.

     --ppoolliiccyy__cchheecckk
             Enable certificate policy processing.

     --ppuurrppoossee _p_u_r_p_o_s_e
             The intended use for the certificate.  Without this option no
             chain verification will be done.  Currently accepted uses are
             ssssllcclliieenntt, ssssllsseerrvveerr, nnssssssllsseerrvveerr, ssmmiimmeessiiggnn, ssmmiimmeeeennccrryypptt,
             ccrrllssiiggnn, aannyy, and ooccsspphheellppeerr.

     --uunnttrruusstteedd _f_i_l_e
             A _f_i_l_e of untrusted certificates.  The _f_i_l_e should contain multi‐
             ple certificates.

     --vveerrbboossee
             Print extra information about the operations being performed.

     --xx550099__ssttrriicctt
             Disable workarounds for broken certificates which have to be dis‐
             abled for strict X.509 compliance.

     _c_e_r_t_i_f_i_c_a_t_e_s
             One or more PEM _c_e_r_t_i_f_i_c_a_t_e_s to verify.  If no certificate files
             are included, an attempt is made to read a certificate from stan‐
             dard input.  If the first certificate filename begins with a
             dash, use a lone dash to mark the last option.

     The vveerriiffyy program uses the same functions as the internal SSL and S/MIME
     verification, with one crucial difference: wherever possible an attempt
     is made to continue after an error, whereas normally the verify operation
     would halt on the first error.  This allows all the problems with a cer‐
     tificate chain to be determined.

     The verify operation consists of a number of separate steps.  Firstly a
     certificate chain is built up starting from the supplied certificate and
     ending in the root CA.  It is an error if the whole chain cannot be built
     up.  The chain is built up by looking up the issuer's certificate of the
     current certificate.  If a certificate is found which is its own issuer,
     it is assumed to be the root CA.

     All certificates whose subject name matches the issuer name of the cur‐
     rent certificate are subject to further tests.  The relevant authority
     key identifier components of the current certificate (if present) must
     match the subject key identifier (if present) and issuer and serial num‐
     ber of the candidate issuer; in addition the kkeeyyUUssaaggee extension of the
     candidate issuer (if present) must permit certificate signing.

     The lookup first looks in the list of untrusted certificates and if no
     match is found the remaining lookups are from the trusted certificates.
     The root CA is always looked up in the trusted certificate list: if the
     certificate to verify is a root certificate, then an exact match must be
     found in the trusted list.

     The second operation is to check every untrusted certificate's extensions
     for consistency with the supplied purpose.  If the --ppuurrppoossee option is not
     included, then no checks are done.  The supplied or "leaf" certificate
     must have extensions compatible with the supplied purpose and all other
     certificates must also be valid CA certificates.  The precise extensions
     required are described in more detail in the XX550099 section below.

     The third operation is to check the trust settings on the root CA.  The
     root CA should be trusted for the supplied purpose.  A certificate with
     no trust settings is considered to be valid for all purposes.

     The final operation is to check the validity of the certificate chain.
     The validity period is checked against the current system time and the
     nnoottBBeeffoorree and nnoottAAfftteerr dates in the certificate.  The certificate signa‐
     tures are also checked at this point.

     If all operations complete successfully, the certificate is considered
     valid.  If any operation fails then the certificate is not valid.  When a
     verify operation fails, the output messages can be somewhat cryptic.  The
     general form of the error message is:

     server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024-bit)
     error 24 at 1 depth lookup:invalid CA certificate

     The first line contains the name of the certificate being verified, fol‐
     lowed by the subject name of the certificate.  The second line contains
     the error number and the depth.  The depth is the number of the certifi‐
     cate being verified when a problem was detected starting with zero for
     the certificate being verified itself, then 1 for the CA that signed the
     certificate and so on.  Finally a text version of the error number is
     presented.

     An exhaustive list of the error codes and messages is shown below; this
     also includes the name of the error code as defined in the header file
     <_o_p_e_n_s_s_l_/_x_5_0_9___v_f_y_._h>.  Some of the error codes are defined but never re‐
     turned: these are described as "unused".

     0 X509_V_OK
           The operation was successful.

     2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
           The issuer certificate of an untrusted certificate could not be
           found.

     3 X509_V_ERR_UNABLE_TO_GET_CRL
           The CRL of a certificate could not be found.

     4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
           The certificate signature could not be decrypted.  This means that
           the actual signature value could not be determined rather than it
           not matching the expected value.  This is only meaningful for RSA
           keys.

     5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
           The CRL signature could not be decrypted.  This means that the ac‐
           tual signature value could not be determined rather than it not
           matching the expected value.  Unused.

     6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
           The public key in the certificate SSuubbjjeeccttPPuubblliiccKKeeyyIInnffoo could not be
           read.

     7 X509_V_ERR_CERT_SIGNATURE_FAILURE
           The signature of the certificate is invalid.

     8 X509_V_ERR_CRL_SIGNATURE_FAILURE
           The signature of the certificate is invalid.

     9 X509_V_ERR_CERT_NOT_YET_VALID
           The certificate is not yet valid: the nnoottBBeeffoorree date is after the
           current time.

     10 X509_V_ERR_CERT_HAS_EXPIRED
           The certificate has expired; that is, the nnoottAAfftteerr date is before
           the current time.

     11 X509_V_ERR_CRL_NOT_YET_VALID
           The CRL is not yet valid.

     12 X509_V_ERR_CRL_HAS_EXPIRED
           The CRL has expired.

     13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
           The certificate nnoottBBeeffoorree field contains an invalid time.

     14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
           The certificate nnoottAAfftteerr field contains an invalid time.

     15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
           The CRL llaassttUUppddaattee field contains an invalid time.

     16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
           The CRL nneexxttUUppddaattee field contains an invalid time.

     17 X509_V_ERR_OUT_OF_MEM
           An error occurred trying to allocate memory.  This should never
           happen.

     18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
           The passed certificate is self-signed and the same certificate can‐
           not be found in the list of trusted certificates.

     19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
           The certificate chain could be built up using the untrusted cer‐
           tificates but the root could not be found locally.

     20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
           The issuer certificate of a locally looked up certificate could not
           be found.  This normally means the list of trusted certificates is
           not complete.

     21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
           No signatures could be verified because the chain contains only one
           certificate and it is not self-signed.

     22 X509_V_ERR_CERT_CHAIN_TOO_LONG
           The certificate chain length is greater than the supplied maximum
           depth.  Unused.

     23 X509_V_ERR_CERT_REVOKED
           The certificate has been revoked.

     24 X509_V_ERR_INVALID_CA
           A CA certificate is invalid.  Either it is not a CA or its exten‐
           sions are not consistent with the supplied purpose.

     25 X509_V_ERR_PATH_LENGTH_EXCEEDED
           The bbaassiiccCCoonnssttrraaiinnttss pathlength parameter has been exceeded.

     26 X509_V_ERR_INVALID_PURPOSE
           The supplied certificate cannot be used for the specified purpose.

     27 X509_V_ERR_CERT_UNTRUSTED
           The root CA is not marked as trusted for the specified purpose.

     28 X509_V_ERR_CERT_REJECTED
           The root CA is marked to reject the specified purpose.

     29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH
           The current candidate issuer certificate was rejected because its
           subject name did not match the issuer name of the current certifi‐
           cate.  Only displayed when the --iissssuueerr__cchheecckkss option is set.

     30 X509_V_ERR_AKID_SKID_MISMATCH
           The current candidate issuer certificate was rejected because its
           subject key identifier was present and did not match the authority
           key identifier current certificate.  Only displayed when the
           --iissssuueerr__cchheecckkss option is set.

     31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
           The current candidate issuer certificate was rejected because its
           issuer name and serial number were present and did not match the
           authority key identifier of the current certificate.  Only dis‐
           played when the --iissssuueerr__cchheecckkss option is set.

     32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN
           The current candidate issuer certificate was rejected because its
           kkeeyyUUssaaggee extension does not permit certificate signing.

     50 X509_V_ERR_APPLICATION_VERIFICATION
           An application specific error.  Unused.

VVEERRSSIIOONN
     ooppeennssssll vveerrssiioonn [--aabbddffooppvv]

     The vveerrssiioonn command is used to print out version information about
     ooppeennssssll.

     The options are as follows:

     --aa      All information: this is the same as setting all the other flags.

     --bb      The date the current version of ooppeennssssll was built.

     --dd      OPENSSLDIR setting.

     --ff      Compilation flags.

     --oo      Option information: various options set when the library was
             built.

     --pp      Platform setting.

     --vv      The current ooppeennssssll version.

XX550099
     ooppeennssssll xx550099 [--CC] [--aaddddrreejjeecctt _a_r_g] [--aaddddttrruusstt _a_r_g] [--aalliiaass] [--CCAA _f_i_l_e]
     [--CCAAccrreeaatteesseerriiaall] [--CCAAffoorrmm ddeerr | ppeemm] [--CCAAkkeeyy _f_i_l_e] [--CCAAkkeeyyffoorrmm ddeerr |
     ppeemm] [--CCAAsseerriiaall _f_i_l_e] [--cceerrttoopptt _o_p_t_i_o_n] [--cchheecckkeenndd _a_r_g] [--ccllrreexxtt]
     [--ccllrrrreejjeecctt] [--ccllrrttrruusstt] [--ddaatteess] [--ddaayyss _a_r_g] [--eemmaaiill] [--eennddddaattee]
     [--eexxtteennssiioonnss _s_e_c_t_i_o_n] [--eexxttffiillee _f_i_l_e] [--ffiinnggeerrpprriinntt] [--hhaasshh] [--iinn _f_i_l_e]
     [--iinnffoorrmm ddeerr | nneett | ppeemm] [--iissssuueerr] [--iissssuueerr__hhaasshh] [--iissssuueerr__hhaasshh__oolldd]
     [--kkeeyyffoorrmm ddeerr | ppeemm] [--mmdd55 | --sshhaa11] [--mmoodduulluuss] [--nnaammeeoopptt _o_p_t_i_o_n] [--nnoooouutt]
     [--ooccsspp__uurrii] [--ooccssppiidd] [--oouutt _f_i_l_e] [--oouuttffoorrmm ddeerr | nneett | ppeemm] [--ppaassssiinn
     _a_r_g] [--ppuubbkkeeyy] [--ppuurrppoossee] [--rreeqq] [--sseerriiaall] [--sseett__sseerriiaall _n] [--sseettaalliiaass
     _a_r_g] [--ssiiggnnkkeeyy _f_i_l_e] [--ssttaarrttddaattee] [--ssuubbjjeecctt] [--ssuubbjjeecctt__hhaasshh]
     [--ssuubbjjeecctt__hhaasshh__oolldd] [--tteexxtt] [--ttrruussttoouutt] [--xx550099ttoorreeqq]

     The xx550099 command is a multi-purpose certificate utility.  It can be used
     to display certificate information, convert certificates to various
     forms, sign certificate requests like a "mini CA", or edit certificate
     trust settings.

     The following are x509 input, output, and general purpose options:

     --iinn _f_i_l_e
           The input file to read from, or standard input if not specified.

     --iinnffoorrmm ddeerr | nneett | ppeemm
           The input format.  Normally, the command will expect an X.509 cer‐
           tificate, but this can change if other options such as --rreeqq are
           present.

     --mmdd55 | --sshhaa11
           The digest to use.  This affects any signing or display option that
           uses a message digest, such as the --ffiinnggeerrpprriinntt, --ssiiggnnkkeeyy, and --CCAA
           options.  If not specified, MD5 is used.  SHA1 is always used with
           DSA keys.

     --oouutt _f_i_l_e
           The output file to write to, or standard output if none is speci‐
           fied.

     --oouuttffoorrmm ddeerr | nneett | ppeemm
           The output format.

     --ppaassssiinn _a_r_g
           The key password source.

     The following are x509 display options:

     --CC    Output the certificate in the form of a C source file.

     --cceerrttoopptt _o_p_t_i_o_n
           Customise the output format used with --tteexxtt, either using a list of
           comma-separated options or by specifying --cceerrttoopptt multiple times.
           The default behaviour is to print all fields.  The options are as
           follows:

                 ccaa__ddeeffaauulltt     Equivalent to nnoo__iissssuueerr, nnoo__ppuubbkkeeyy, nnoo__hheeaaddeerr,
                                nnoo__vveerrssiioonn, nnoo__ssiiggdduummpp, and nnoo__ssiiggnnaammee.
                 ccoommppaattiibbllee     Equivalent to no output options at all.
                 eexxtt__ddeeffaauulltt    Print unsupported certificate extensions.
                 eexxtt__dduummpp       Hex dump unsupported extensions.
                 eexxtt__eerrrroorr      Print an error message for unsupported cer‐
                                tificate extensions.
                 eexxtt__ppaarrssee      ASN.1 parse unsupported extensions.
                 nnoo__aauuxx         Do not print certificate trust information.
                 nnoo__eexxtteennssiioonnss  Do not print X509V3 extensions.
                 nnoo__hheeaaddeerr      Do not print header (Certificate and Data) in‐
                                formation.
                 nnoo__iissssuueerr      Do not print the issuer name.
                 nnoo__ppuubbkkeeyy      Do not print the public key.
                 nnoo__sseerriiaall      Do not print the serial number.
                 nnoo__ssiiggdduummpp     Do not give a hexadecimal dump of the certifi‐
                                cate signature.
                 nnoo__ssiiggnnaammee     Do not print the signature algorithm used.
                 nnoo__ssuubbjjeecctt     Do not print the subject name.
                 nnoo__vvaalliiddiittyy    Do not print the nnoottBBeeffoorree and nnoottAAfftteerr (va‐
                                lidity) fields.
                 nnoo__vveerrssiioonn     Do not print the version number.

     --ddaatteess
           Print the start and expiry date of a certificate.

     --eemmaaiill
           Output the email addresses, if any.

     --eennddddaattee
           Print the expiry date of the certificate; that is, the nnoottAAfftteerr
           date.

     --ffiinnggeerrpprriinntt
           Print the digest of the DER-encoded version of the whole certifi‐
           cate.

     --hhaasshh
           A synonym for --ssuubbjjeecctt__hhaasshh.

     --iissssuueerr
           Print the issuer name.

     --iissssuueerr__hhaasshh
           Print the hash of the certificate issuer name.

     --iissssuueerr__hhaasshh__oolldd
           Print the hash of the certificate issuer name using the older algo‐
           rithm as used by ooppeennssssll versions before 1.0.0.

     --mmoodduulluuss
           Print the value of the modulus of the public key contained in the
           certificate.

     --nnaammeeoopptt _o_p_t_i_o_n
           Customise how the subject or issuer names are displayed, either us‐
           ing a list of comma-separated options or by specifying --nnaammeeoopptt
           multiple times.  The default behaviour is to use the oonneelliinnee for‐
           mat.  The options, which can be preceded by a dash to turn them
           off, are as follows:

           aalliiggnn
                 Align field values for a more readable output.  Only usable
                 with _s_e_p___m_u_l_t_i_l_i_n_e.

           ccoommppaatt
                 Use the old format, equivalent to specifying no options at
                 all.

           ddnn__rreevv
                 Reverse the fields of the DN, as required by RFC 2253.  As a
                 side effect, this also reverses the order of multiple AVAs.

           dduummpp__aallll
                 Dump all fields.  When used with _d_u_m_p___d_e_r, it allows the DER
                 encoding of the structure to be unambiguously determined.

           dduummpp__ddeerr
                 Any fields that need to be hexdumped are dumped using the DER
                 encoding of the field.  Otherwise just the content octets
                 will be displayed.  Both options use the RFC 2253 #XXXX...
                 format.

           dduummpp__nnoossttrr
                 Dump non-character string types (for example OCTET STRING);
                 usually, non-character string types are displayed as though
                 each content octet represents a single character.

           dduummpp__uunnkknnoowwnn
                 Dump any field whose OID is not recognised by ooppeennssssll.

           eesscc__22225533
                 Escape the "special" characters required by RFC 2253 in a
                 field that is “ ,+"<>;”.  Additionally, ‘#’ is escaped at the
                 beginning of a string and a space character at the beginning
                 or end of a string.

           eesscc__ccttrrll
                 Escape control characters.  That is, those with ASCII values
                 less than 0x20 (space) and the delete (0x7f) character.  They
                 are escaped using the RFC 2253 \XX notation (where XX are two
                 hex digits representing the character value).

           eesscc__mmssbb
                 Escape characters with the MSB set; that is, with ASCII val‐
                 ues larger than 127.

           mmuullttiilliinnee
                 A multiline format.  Equivalent to eesscc__ccttrrll, eesscc__mmssbb,
                 sseepp__mmuullttiilliinnee, ssppaaccee__eeqq, llnnaammee, and aalliiggnn.

           nnoo__ttyyppee
                 Do not attempt to interpret multibyte characters.  That is,
                 content octets are merely dumped as though one octet repre‐
                 sents each character.  This is useful for diagnostic purposes
                 but results in rather odd looking output.

           nnooffnnaammee, ssnnaammee, llnnaammee, ooiidd
                 Alter how the field name is displayed: nnooffnnaammee does not dis‐
                 play the field at all; ssnnaammee uses the short name form (CN for
                 ccoommmmoonnNNaammee, for example); llnnaammee uses the long form.  ooiidd rep‐
                 resents the OID in numerical form and is useful for diagnos‐
                 tic purpose.

           oonneelliinnee
                 A one line format which is more readable than RRFFCC22225533.
                 Equivalent to eesscc__22225533, eesscc__ccttrrll, eesscc__mmssbb, uuttff88, dduummpp__nnoossttrr,
                 dduummpp__ddeerr, uussee__qquuoottee, sseepp__ccoommmmaa__pplluuss__ssppcc, ssppaaccee__eeqq, and ssnnaammee.

           RRFFCC22225533
                 Displays names compatible with RFC 2253.  Equivalent to
                 eesscc__22225533, eesscc__ccttrrll, eesscc__mmssbb, uuttff88, dduummpp__nnoossttrr, dduummpp__uunnkknnoowwnn,
                 dduummpp__ddeerr, sseepp__ccoommmmaa__pplluuss, ddnn__rreevv, and ssnnaammee.

           sseepp__ccoommmmaa__pplluuss, sseepp__ccoommmmaa__pplluuss__ssppaaccee, sseepp__sseemmii__pplluuss__ssppaaccee,
                 sseepp__mmuullttiilliinnee
                 Determine the field separators: the first character is be‐
                 tween RDNs and the second between multiple AVAs (multiple
                 AVAs are very rare and their use is discouraged).  The op‐
                 tions ending in "space" additionally place a space after the
                 separator to make it more readable.  sseepp__mmuullttiilliinnee uses a
                 linefeed character for the RDN separator and a spaced ‘+’ for
                 the AVA separator, as well as indenting the fields by four
                 characters.

           sshhooww__ttyyppee
                 Show the type of the ASN.1 character string.  The type pre‐
                 cedes the field contents.  For example "BMPSTRING: Hello
                 World".

           ssppaaccee__eeqq
                 Place spaces round the ‘=’ character which follows the field
                 name.

           uussee__qquuoottee
                 Escape some characters by surrounding the whole string with
                 ‘"’ characters.  Without the option, all escaping is done
                 with the ‘\’ character.

           uuttff88  Convert all strings to UTF8 format first, as required by RFC
                 2253.  On a UTF8 compatible terminal, the use of this option
                 (and not setting eesscc__mmssbb) may result in the correct display
                 of multibyte characters.  Usually, multibyte characters
                 larger than 0xff are represented using the format \UXXXX for
                 16 bits and \WXXXXXXXX for 32 bits, and any UTF8Strings are
                 converted to their character form first.

     --nnoooouutt
           Do not output the encoded version of the request.

     --ooccsspp__uurrii
           Print the OCSP responder addresses, if any.

     --ooccssppiidd
           Print OCSP hash values for the subject name and public key.

     --ppuubbkkeeyy
           Print the public key.

     --sseerriiaall
           Print the certificate serial number.

     --ssttaarrttddaattee
           Print the start date of the certificate; that is, the nnoottBBeeffoorree
           date.

     --ssuubbjjeecctt
           Print the subject name.

     --ssuubbjjeecctt__hhaasshh
           Print the hash of the certificate subject name.  This is used in
           ooppeennssssll to form an index to allow certificates in a directory to be
           looked up by subject name.

     --ssuubbjjeecctt__hhaasshh__oolldd
           Print the hash of the certificate subject name using the older al‐
           gorithm as used by ooppeennssssll versions before 1.0.0.

     --tteexxtt
           Print the full certificate in text form.

     A trusted certificate is a certificate which has several additional
     pieces of information attached to it such as the permitted and prohibited
     uses of the certificate and an alias.  When a certificate is being veri‐
     fied at least one certificate must be trusted.  By default, a trusted
     certificate must be stored locally and be a root CA.  The following are
     x509 trust settings options:

     --aaddddrreejjeecctt _a_r_g
           Add a prohibited use.  Accepts the same values as the --aaddddttrruusstt op‐
           tion.

     --aaddddttrruusstt _a_r_g
           Add a trusted certificate use.  Any object name can be used here,
           but currently only cclliieennttAAuutthh (SSL client use), sseerrvveerrAAuutthh (SSL
           server use), and eemmaaiillPPrrootteeccttiioonn (S/MIME email) are used.

     --aalliiaass
           Output the certificate alias.

     --ccllrrrreejjeecctt
           Clear all the prohibited or rejected uses of the certificate.

     --ccllrrttrruusstt
           Clear all the permitted or trusted uses of the certificate.

     --ppuurrppoossee
           Perform tests on the certificate extensions.  The same code is used
           when verifying untrusted certificates in chains, so this section is
           useful if a chain is rejected by the verify code.

           The bbaassiiccCCoonnssttrraaiinnttss extension CA flag is used to determine whether
           the certificate can be used as a CA.  If the CA flag is true, it is
           a CA; if the CA flag is false, it is not a CA.  All CAs should have
           the CA flag set to true.

           If the bbaassiiccCCoonnssttrraaiinnttss extension is absent, then the certificate
           is considered to be a possible CA; other extensions are checked ac‐
           cording to the intended use of the certificate.  A warning is given
           in this case because the certificate should really not be regarded
           as a CA.  However it is allowed to be a CA to work around some bro‐
           ken software.

           If the certificate is a V1 certificate (and thus has no extensions)
           and it is self-signed, it is also assumed to be a CA but a warning
           is again given.  This is to work around the problem of Verisign
           roots which are V1 self-signed certificates.

           If the kkeeyyUUssaaggee extension is present, then additional restraints
           are made on the uses of the certificate.  A CA certificate must
           have the kkeeyyCCeerrttSSiiggnn bit set if the kkeeyyUUssaaggee extension is present.

           The extended key usage extension places additional restrictions on
           the certificate uses.  If this extension is present, whether criti‐
           cal or not, the key can only be used for the purposes specified.

           A complete description of each test is given below.  The comments
           about bbaassiiccCCoonnssttrraaiinnttss and kkeeyyUUssaaggee and V1 certificates above apply
           to all CA certificates.

           SSL Client
                 The extended key usage extension must be absent or include
                 the web client authentication OID.  kkeeyyUUssaaggee must be absent
                 or it must have the ddiiggiittaallSSiiggnnaattuurree bit set.  The Netscape
                 certificate type must be absent or it must have the SSL
                 client bit set.

           SSL Client CA
                 The extended key usage extension must be absent or include
                 the web client authentication OID.  The Netscape certificate
                 type must be absent or it must have the SSL CA bit set: this
                 is used as a workaround if the bbaassiiccCCoonnssttrraaiinnttss extension is
                 absent.

           SSL Server
                 The extended key usage extension must be absent or include
                 the web server authentication and/or one of the SGC OIDs.
                 kkeeyyUUssaaggee must be absent or it must have the ddiiggiittaallSSiiggnnaattuurree
                 set, the kkeeyyEEnncciipphheerrmmeenntt set, or both bits set.  The Netscape
                 certificate type must be absent or have the SSL server bit
                 set.

           SSL Server CA
                 The extended key usage extension must be absent or include
                 the web server authentication and/or one of the SGC OIDs.
                 The Netscape certificate type must be absent or the SSL CA
                 bit must be set: this is used as a workaround if the
                 bbaassiiccCCoonnssttrraaiinnttss extension is absent.

           Netscape SSL Server
                 For Netscape SSL clients to connect to an SSL server; it must
                 have the kkeeyyEEnncciipphheerrmmeenntt bit set if the kkeeyyUUssaaggee extension is
                 present.  This isn't always valid because some cipher suites
                 use the key for digital signing.  Otherwise it is the same as
                 a normal SSL server.

           Common S/MIME Client Tests
                 The extended key usage extension must be absent or include
                 the email protection OID.  The Netscape certificate type must
                 be absent or should have the S/MIME bit set.  If the S/MIME
                 bit is not set in Netscape certificate type, then the SSL
                 client bit is tolerated as an alternative but a warning is
                 shown: this is because some Verisign certificates don't set
                 the S/MIME bit.

           S/MIME Signing
                 In addition to the common S/MIME client tests, the
                 ddiiggiittaallSSiiggnnaattuurree bit must be set if the kkeeyyUUssaaggee extension is
                 present.

           S/MIME Encryption
                 In addition to the common S/MIME tests, the kkeeyyEEnncciipphheerrmmeenntt
                 bit must be set if the kkeeyyUUssaaggee extension is present.

           S/MIME CA
                 The extended key usage extension must be absent or include
                 the email protection OID.  The Netscape certificate type must
                 be absent or must have the S/MIME CA bit set: this is used as
                 a workaround if the bbaassiiccCCoonnssttrraaiinnttss extension is absent.

           CRL Signing
                 The kkeeyyUUssaaggee extension must be absent or it must have the CRL
                 signing bit set.

           CRL Signing CA
                 The normal CA tests apply, except the bbaassiiccCCoonnssttrraaiinnttss exten‐
                 sion must be present.

     --sseettaalliiaass _a_r_g
           Set the alias of the certificate, allowing the certificate to be
           referred to using a nickname, such as "Steve's Certificate".

     --ttrruussttoouutt
           Output a trusted certificate (the default if any trust settings are
           modified).  An ordinary or trusted certificate can be input, but by
           default an ordinary certificate is output and any trust settings
           are discarded.

     The xx550099 utility can be used to sign certificates and requests: it can
     thus behave like a mini CA.  The following are x509 signing options:

     --CCAA _f_i_l_e
           The CA certificate to be used for signing.  When this option is
           present, xx550099 behaves like a mini CA.  The input file is signed by
           the CA using this option; that is, its issuer name is set to the
           subject name of the CA and it is digitally signed using the CA's
           private key.

           This option is normally combined with the --rreeqq option.  Without the
           --rreeqq option, the input is a certificate which must be self-signed.

     --CCAAccrreeaatteesseerriiaall
           Create the CA serial number file if it does not exist instead of
           generating an error.  The file will contain the serial number ‘02’
           and the certificate being signed will have ‘1’ as its serial num‐
           ber.

     --CCAAffoorrmm ddeerr | ppeemm
           The format of the CA certificate file.  The default is ppeemm.

     --CCAAkkeeyy _f_i_l_e
           Set the CA private key to sign a certificate with.  Otherwise it is
           assumed that the CA private key is present in the CA certificate
           file.

     --CCAAkkeeyyffoorrmm ddeerr | ppeemm
           The format of the CA private key.  The default is ppeemm.

     --CCAAsseerriiaall _f_i_l_e
           Use the serial number in _f_i_l_e to sign a certificate.  The file
           should consist of one line containing an even number of hex digits
           with the serial number to use.  After each use the serial number is
           incremented and written out to the file again.

           The default filename consists of the CA certificate file base name
           with _._s_r_l appended.  For example, if the CA certificate file is
           called _m_y_c_a_c_e_r_t_._p_e_m, it expects to find a serial number file called
           _m_y_c_a_c_e_r_t_._s_r_l.

     --cchheecckkeenndd _a_r_g
           Check whether the certificate expires in the next _a_r_g seconds.  If
           so, exit with return value 1; otherwise exit with return value 0.

     --ccllrreexxtt
           Delete any extensions from a certificate.  This option is used when
           a certificate is being created from another certificate (for exam‐
           ple with the --ssiiggnnkkeeyy or the --CCAA options).  Normally, all exten‐
           sions are retained.

     --ddaayyss _a_r_g
           The number of days to make a certificate valid for.  The default is
           30 days.

     --eexxtteennssiioonnss _s_e_c_t_i_o_n
           The section to add certificate extensions from.  If this option is
           not specified, the extensions should either be contained in the un‐
           named (default) section or the default section should contain a
           variable called "extensions" which contains the section to use.

     --eexxttffiillee _f_i_l_e
           File containing certificate extensions to use.  If not specified,
           no extensions are added to the certificate.

     --kkeeyyffoorrmm ddeerr | ppeemm
           The format of the private key file used in the --ssiiggnnkkeeyy option.

     --rreeqq  Expect a certificate request on input instead of a certificate.

     --sseett__sseerriiaall _n
           The serial number to use.  This option can be used with either the
           --ssiiggnnkkeeyy or --CCAA options.  If used in conjunction with the --CCAA op‐
           tion, the serial number file (as specified by the --CCAAsseerriiaall or
           --CCAAccrreeaatteesseerriiaall options) is not used.

           The serial number can be decimal or hex (if preceded by ‘0x’).
           Negative serial numbers can also be specified but their use is not
           recommended.

     --ssiiggnnkkeeyy _f_i_l_e
           Self-sign _f_i_l_e using the supplied private key.

           If the input file is a certificate, it sets the issuer name to the
           subject name (i.e. makes it self-signed), changes the public key to
           the supplied value, and changes the start and end dates.  The start
           date is set to the current time and the end date is set to a value
           determined by the --ddaayyss option.  Any certificate extensions are re‐
           tained unless the --ccllrreexxtt option is supplied.

           If the input is a certificate request, a self-signed certificate is
           created using the supplied private key using the subject name in
           the request.

     --xx550099ttoorreeqq
           Convert a certificate into a certificate request.  The --ssiiggnnkkeeyy op‐
           tion is used to pass the required private key.

CCOOMMMMOONN NNOOTTAATTIIOONN
     Several commands share a common syntax, as detailed below.

     Password arguments, typically specified using --ppaassssiinn and --ppaassssoouutt for
     input and output passwords, allow passwords to be obtained from a variety
     of sources.  Both of these options take a single argument, described be‐
     low.  If no password argument is given and a password is required, then
     the user is prompted to enter one: this will typically be read from the
     current terminal with echoing turned off.

           ppaassss:_p_a_s_s_w_o_r_d  The actual password is _p_a_s_s_w_o_r_d.  Since the password
                          is visible to utilities, this form should only be
                          used where security is not important.

           eennvv:_v_a_r        Obtain the password from the environment variable
                          _v_a_r.  Since the environment of other processes is
                          visible, this option should be used with caution.

           ffiillee:_p_a_t_h      The first line of _p_a_t_h is the password.  If the same
                          _p_a_t_h argument is supplied to --ppaassssiinn and --ppaassssoouutt,
                          then the first line will be used for the input pass‐
                          word and the next line for the output password.
                          _p_a_t_h need not refer to a regular file: it could, for
                          example, refer to a device or named pipe.

           ffdd:_n_u_m_b_e_r      Read the password from the file descriptor _n_u_m_b_e_r.
                          This can be used to send the data via a pipe, for
                          example.

           ssttddiinn          Read the password from standard input.

     Input/output formats, typically specified using --iinnffoorrmm and --oouuttffoorrmm, in‐
     dicate the format being read from or written to.  The argument is case
     insensitive.

           ddeerr     Distinguished Encoding Rules (DER) is a binary format.
           nneett     Insecure legacy format.
           ppeemm     Privacy Enhanced Mail (PEM) is base64-encoded.
           ssmmiimmee   An SMIME format message.
           ttxxtt     Plain ASCII text.

EENNVVIIRROONNMMEENNTT
     The following environment variables affect the execution of ooppeennssssll:

     OPENSSL_CONF          The location of the master configuration file.

FFIILLEESS
     /etc/ssl/             Default config directory for ooppeennssssll.
     /etc/ssl/lib/         Unused.
     /etc/ssl/private/     Default private key directory.
     /etc/ssl/openssl.cnf  Default configuration file for ooppeennssssll.
     /etc/ssl/x509v3.cnf   Default configuration file for xx550099 certificates.

SSEEEE AALLSSOO
     acme-client(1), nc(1), ssl(8), starttls(8)

SSTTAANNDDAARRDDSS
     T. Dierks and C. Allen, _T_h_e _T_L_S _P_r_o_t_o_c_o_l _V_e_r_s_i_o_n _1_._0, RFC 2246, January
     1999.

     M. Wahl, S. Killie, and T. Howes, _L_i_g_h_t_w_e_i_g_h_t _D_i_r_e_c_t_o_r_y _A_c_c_e_s_s _P_r_o_t_o_c_o_l
     _(_v_3_)_: _U_T_F_-_8 _S_t_r_i_n_g _R_e_p_r_e_s_e_n_t_a_t_i_o_n _o_f _D_i_s_t_i_n_g_u_i_s_h_e_d _N_a_m_e_s, RFC 2253,
     December 1997.

     B. Kaliski, _P_K_C_S _#_7_: _C_r_y_p_t_o_g_r_a_p_h_i_c _M_e_s_s_a_g_e _S_y_n_t_a_x _V_e_r_s_i_o_n _1_._5, RFC 2315,
     March 1998.

     R. Housley, W. Ford, W. Polk, and D. Solo, _I_n_t_e_r_n_e_t _X_._5_0_9 _P_u_b_l_i_c _K_e_y
     _I_n_f_r_a_s_t_r_u_c_t_u_r_e _C_e_r_t_i_f_i_c_a_t_e _a_n_d _C_R_L _P_r_o_f_i_l_e, RFC 2459, January 1999.

     M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. Adams, _X_._5_0_9
     _I_n_t_e_r_n_e_t _P_u_b_l_i_c _K_e_y _I_n_f_r_a_s_t_r_u_c_t_u_r_e _O_n_l_i_n_e _C_e_r_t_i_f_i_c_a_t_e _S_t_a_t_u_s _P_r_o_t_o_c_o_l _–
     _O_C_S_P, RFC 2560, June 1999.

     R. Housley, _C_r_y_p_t_o_g_r_a_p_h_i_c _M_e_s_s_a_g_e _S_y_n_t_a_x, RFC 2630, June 1999.

     P. Chown, _A_d_v_a_n_c_e_d _E_n_c_r_y_p_t_i_o_n _S_t_a_n_d_a_r_d _(_A_E_S_) _C_i_p_h_e_r_s_u_i_t_e_s _f_o_r _T_r_a_n_s_p_o_r_t
     _L_a_y_e_r _S_e_c_u_r_i_t_y _(_T_L_S_), RFC 3268, June 2002.

BSD                             January 3, 2017                            BSD
