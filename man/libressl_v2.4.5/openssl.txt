OPENSSL(1)                BSD General Commands Manual               OPENSSL(1)

NAME
     openssl — OpenSSL command line tool

SYNOPSIS
     openssl command [command_opts] [command_args]

     openssl list-standard-commands | list-message-digest-commands |
             list-cipher-commands | list-cipher-algorithms |
             list-message-digest-algorithms | list-public-key-algorithms

     openssl no-command

DESCRIPTION
     OpenSSL is a cryptography toolkit implementing the Transport Layer Secu‐
     rity (TLS v1) network protocol, as well as related cryptography stan‐
     dards.

     The openssl program is a command line tool for using the various cryptog‐
     raphy functions of openssl's crypto library from the shell.

     The pseudo-commands list-standard-commands, list-message-digest-commands,
     and list-cipher-commands output a list (one entry per line) of the names
     of all standard commands, message digest commands, or cipher commands,
     respectively, that are available in the present openssl utility.

     The pseudo-commands list-cipher-algorithms and
     list-message-digest-algorithms list all cipher and message digest names,
     one entry per line.  Aliases are listed as:

           from => to

     The pseudo-command list-public-key-algorithms lists all supported public
     key algorithms.

     The pseudo-command no-command tests whether a command of the specified
     name is available.  If command does not exist, it returns 0 and prints
     no-command; otherwise it returns 1 and prints command.  In both cases,
     the output goes to stdout and nothing is printed to stderr.  Additional
     command line arguments are always ignored.  Since for each cipher there
     is a command of the same name, this provides an easy way for shell
     scripts to test for the availability of ciphers in the openssl program.

     Note: no-command is not able to detect pseudo-commands such as quit,
     list-...-commands, or no-command itself.

ASN1PARSE
     openssl asn1parse [-i] [-dlimit number] [-dump] [-genconf file] [-genstr
     str] [-in file] [-inform der | pem | txt] [-length number] [-noout]
     [-offset number] [-oid file] [-out file] [-strparse offset]

     The asn1parse command is a diagnostic utility that can parse ASN.1 struc‐
     tures.  It can also be used to extract data from ASN.1 formatted data.

     The options are as follows:

     -dlimit number
             Dump the first number bytes of unknown data in hex form.

     -dump   Dump unknown data in hex form.

     -genconf file, -genstr str
             Generate encoded data based on string str, file file, or both,
             using the format described in ASN1_generate_nconf(3).  If only
             file is present then the string is obtained from the default sec‐
             tion using the name “asn1”.  The encoded data is passed through
             the ASN1 parser and printed out as though it came from a file;
             the contents can thus be examined and written to a file using the
             -out option.

     -i      Indent the output according to the "depth" of the structures.

     -in file
             The input file; the default is standard input.

     -inform der | pem | txt
             The input format.

     -length number
             Number of bytes to parse; the default is until end of file.

     -noout  Don't output the parsed version of the input file.

     -offset number
             Starting offset to begin parsing; the default is start of file.

     -oid file
             A file containing additional object identifiers (OIDs).  If an
             OID (object identifier) is not part of openssl's internal table
             it will be represented in numerical form (for example 1.2.3.4).

             Each line consists of three columns: the first column is the OID
             in numerical format and should be followed by whitespace.  The
             second column is the "short name", which is a single word fol‐
             lowed by whitespace.  The final column is the rest of the line
             and is the "long name".  asn1parse displays the long name.

     -out file
             The DER-encoded output file; the default is no encoded output
             (useful when combined with -strparse).

     -strparse offset
             Parse the content octets of the ASN.1 object starting at offset.
             This option can be used multiple times to "drill down" into a
             nested structure.

CA
     openssl ca [-batch] [-cert file] [-config file] [-crl_CA_compromise time]
     [-crl_compromise time] [-crl_hold instruction] [-crl_reason reason]
     [-crldays days] [-crlexts section] [-crlhours hours] [-days arg]
     [-enddate date] [-extensions section] [-extfile section] [-gencrl] [-in
     file] [-infiles] [-key keyfile] [-keyfile arg] [-keyform PEM] [-md arg]
     [-msie_hack] [-name section] [-noemailDN] [-notext] [-out file] [-outdir
     dir] [-passin arg] [-policy arg] [-preserveDN] [-revoke file] [-spkac
     file] [-ss_cert file] [-startdate date] [-status serial] [-subj arg]
     [-updatedb] [-verbose]

     The ca command is a minimal certificate authority (CA) application.  It
     can be used to sign certificate requests in a variety of forms and gener‐
     ate certificate revocation lists (CRLs).  It also maintains a text data‐
     base of issued certificates and their status.

     The options relevant to CAs are as follows:

     -batch
           This sets the batch mode.  In this mode no questions will be asked
           and all certificates will be certified automatically.

     -cert file
           The CA certificate file.

     -config file
           Specifies the configuration file to use.

     -days arg
           The number of days to certify the certificate for.

     -enddate date
           This allows the expiry date to be explicitly set.  The format of
           the date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure).

     -extensions section
           The section of the configuration file containing certificate exten‐
           sions to be added when a certificate is issued (defaults to
           x509_extensions unless the -extfile option is used).  If no exten‐
           sion section is present, a V1 certificate is created.  If the ex‐
           tension section is present (even if it is empty), then a V3 cer‐
           tificate is created.

     -extfile file
           An additional configuration file to read certificate extensions
           from (using the default section unless the -extensions option is
           also used).

     -in file
           An input file containing a single certificate request to be signed
           by the CA.

     -infiles
           If present, this should be the last option; all subsequent argu‐
           ments are assumed to be the names of files containing certificate
           requests.

     -key keyfile
           The password used to encrypt the private key.  Since on some sys‐
           tems the command line arguments are visible, this option should be
           used with caution.

     -keyfile file
           The private key to sign requests with.

     -keyform PEM
           Private key file format.

     -md alg
           The message digest to use.  Possible values include md5 and sha1.
           This option also applies to CRLs.

     -msie_hack
           This is a legacy option to make ca work with very old versions of
           the IE certificate enrollment control "certenr3".  It used Univer‐
           salStrings for almost everything.  Since the old control has vari‐
           ous security bugs, its use is strongly discouraged.  The newer con‐
           trol "Xenroll" does not need this option.

     -name section
           Specifies the configuration file section to use (overrides
           default_ca in the ca section).

     -noemailDN
           The DN of a certificate can contain the EMAIL field if present in
           the request DN, however it is good policy just having the email set
           into the altName extension of the certificate.  When this option is
           set, the EMAIL field is removed from the certificate's subject and
           set only in the, eventually present, extensions.  The email_in_dn
           keyword can be used in the configuration file to enable this behav‐
           iour.

     -notext
           Don't output the text form of a certificate to the output file.

     -out file
           The output file to output certificates to.  The default is standard
           output.  The certificate details will also be printed out to this
           file.

     -outdir directory
           The directory to output certificates to.  The certificate will be
           written to a file consisting of the serial number in hex with
           ".pem" appended.

     -passin arg
           The key password source.

     -policy arg
           This option defines the CA "policy" to use.  The policy section in
           the configuration file consists of a set of variables corresponding
           to certificate DN fields.  The values may be one of "match" (the
           value must match the same field in the CA certificate), "supplied"
           (the value must be present), or "optional" (the value may be
           present).  Any fields not mentioned in the policy section are
           silently deleted, unless the -preserveDN option is set, but this
           can be regarded more of a quirk than intended behaviour.

     -preserveDN
           Normally, the DN order of a certificate is the same as the order of
           the fields in the relevant policy section.  When this option is
           set, the order is the same as the request.  This is largely for
           compatibility with the older IE enrollment control which would only
           accept certificates if their DNs matched the order of the request.
           This is not needed for Xenroll.

     -spkac file
           A file containing a single Netscape signed public key and chal‐
           lenge, and additional field values to be signed by the CA.  This
           will usually come from the KEYGEN tag in an HTML form to create a
           new private key.  It is, however, possible to create SPKACs using
           the spkac utility.

           The file should contain the variable SPKAC set to the value of the
           SPKAC and also the required DN components as name value pairs.  If
           it's necessary to include the same component twice, then it can be
           preceded by a number and a ‘.’.

     -ss_cert file
           A single self-signed certificate to be signed by the CA.

     -startdate date
           This allows the start date to be explicitly set.  The format of the
           date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure).

     -status serial
           Show the status of the certificate with serial number serial.

     -updatedb
           Update database for expired certificates.

     -verbose
           This prints extra details about the operations being performed.

     The options relevant to CRLs are as follows:

     -crl_CA_compromise time
           This is the same as -crl_compromise, except the revocation reason
           is set to CACompromise.

     -crl_compromise time
           This sets the revocation reason to keyCompromise and the compromise
           time to time.  time should be in GeneralizedTime format, i.e.
           YYYYMMDDHHMMSSZ.

     -crl_hold instruction
           This sets the CRL revocation reason code to certificateHold and the
           hold instruction to instruction which must be an OID.  Although any
           OID can be used, only holdInstructionNone (the use of which is dis‐
           couraged by RFC 2459), holdInstructionCallIssuer or holdInstruc‐
           tionReject will normally be used.

     -crl_reason reason
           Revocation reason, where reason is one of: unspecified, keyCompro‐
           mise, CACompromise, affiliationChanged, superseded, cessationOfOp‐
           eration, certificateHold or removeFromCRL.  The matching of reason
           is case insensitive.  Setting any revocation reason will make the
           CRL v2.  In practice, removeFromCRL is not particularly useful be‐
           cause it is only used in delta CRLs which are not currently imple‐
           mented.

     -crldays num
           The number of days before the next CRL is due.  This is the days
           from now to place in the CRL nextUpdate field.

     -crlexts section
           The section of the configuration file containing CRL extensions to
           include.  If no CRL extension section is present then a V1 CRL is
           created; if the CRL extension section is present (even if it is
           empty) then a V2 CRL is created.  The CRL extensions specified are
           CRL extensions and not CRL entry extensions.  It should be noted
           that some software (for example Netscape) can't handle V2 CRLs.

     -crlhours num
           The number of hours before the next CRL is due.

     -gencrl
           This option generates a CRL based on information in the index file.

     -revoke file
           A file containing a certificate to revoke.

     -subj arg
           Supersedes the subject name given in the request.  The arg must be
           formatted as /type0=value0/type1=value1/type2=...; characters may
           be escaped by ‘\’ (backslash), no spaces are skipped.

     Many of the options can be set in the ca section of the configuration
     file (or in the default section of the configuration file), specified us‐
     ing default_ca or -name.  The options preserve and msie_hack are read di‐
     rectly from the ca section.

     Many of the configuration file options are identical to command line op‐
     tions.  Where the option is present in the configuration file and the
     command line, the command line value is used.  Where an option is de‐
     scribed as mandatory, then it must be present in the configuration file
     or the command line equivalent (if any) used.

     certificate
           The same as -cert.  It gives the file containing the CA certifi‐
           cate.  Mandatory.

     copy_extensions
           Determines how extensions in certificate requests should be han‐
           dled.  If set to none or this option is not present, then exten‐
           sions are ignored and not copied to the certificate.  If set to
           copy, then any extensions present in the request that are not al‐
           ready present are copied to the certificate.  If set to copyall,
           then all extensions in the request are copied to the certificate:
           if the extension is already present in the certificate it is
           deleted first.

           The copy_extensions option should be used with caution.  If care is
           not taken, it can be a security risk.  For example, if a certifi‐
           cate request contains a basicConstraints extension with CA:TRUE and
           the copy_extensions value is set to copyall and the user does not
           spot this when the certificate is displayed, then this will hand
           the requestor a valid CA certificate.

           This situation can be avoided by setting copy_extensions to copy
           and including basicConstraints with CA:FALSE in the configuration
           file.  Then if the request contains a basicConstraints extension,
           it will be ignored.

           The main use of this option is to allow a certificate request to
           supply values for certain extensions such as subjectAltName.

     crl_extensions
           The same as -crlexts.

     crlnumber
           A text file containing the next CRL number to use in hex.  The CRL
           number will be inserted in the CRLs only if this file exists.  If
           this file is present, it must contain a valid CRL number.

     database
           The text database file to use.  Mandatory.  This file must be
           present, though initially it will be empty.

     default_crl_hours, default_crl_days
           The same as the -crlhours and -crldays options.  These will only be
           used if neither command line option is present.  At least one of
           these must be present to generate a CRL.

     default_days
           The same as the -days option.  The number of days to certify a cer‐
           tificate for.

     default_enddate
           The same as the -enddate option.  Either this option or
           default_days (or the command line equivalents) must be present.

     default_md
           The same as the -md option.  The message digest to use.  Mandatory.

     default_startdate
           The same as the -startdate option.  The start date to certify a
           certificate for.  If not set, the current time is used.

     email_in_dn
           The same as -noemailDN.  If the EMAIL field is to be removed from
           the DN of the certificate, simply set this to "no".  If not
           present, the default is to allow for the EMAIL field in the cer‐
           tificate's DN.

     msie_hack
           The same as -msie_hack.

     name_opt, cert_opt
           These options allow the format used to display the certificate de‐
           tails when asking the user to confirm signing.  All the options
           supported by the x509 utilities' -nameopt and -certopt switches can
           be used here, except that no_signame and no_sigdump are permanently
           set and cannot be disabled (this is because the certificate signa‐
           ture cannot be displayed because the certificate has not been
           signed at this point).

           For convenience, the value ca_default is accepted by both to pro‐
           duce a reasonable output.

           If neither option is present, the format used in earlier versions
           of openssl is used.  Use of the old format is strongly discouraged
           because it only displays fields mentioned in the policy section,
           mishandles multicharacter string types and does not display exten‐
           sions.

     new_certs_dir
           The same as the -outdir command line option.  It specifies the di‐
           rectory where new certificates will be placed.  Mandatory.

     oid_file
           This specifies a file containing additional object identifiers.
           Each line of the file should consist of the numerical form of the
           object identifier followed by whitespace, then the short name fol‐
           lowed by whitespace and finally the long name.

     oid_section
           This specifies a section in the configuration file containing extra
           object identifiers.  Each line should consist of the short name of
           the object identifier followed by ‘=’ and the numerical form.  The
           short and long names are the same when this option is used.

     policy
           The same as -policy.  Mandatory.

     preserve
           The same as -preserveDN.

     private_key
           Same as the -keyfile option.  The file containing the CA private
           key.  Mandatory.

     serial
           A text file containing the next serial number to use in hex.
           Mandatory.  This file must be present and contain a valid serial
           number.

     unique_subject
           If the value yes is given, the valid certificate entries in the
           database must have unique subjects.  If the value no is given, sev‐
           eral valid certificate entries may have the exact same subject.
           The default value is yes.

     x509_extensions
           The same as -extensions.

CIPHERS
     openssl ciphers [-hVv] [-tls1] [cipherlist]

     The ciphers command converts openssl cipher lists into ordered SSL cipher
     preference lists.  It can be used as a test tool to determine the appro‐
     priate cipherlist.

     The options are as follows:

     -h, -?  Print a brief usage message.

     -tls1   Only include TLS v1 ciphers.

     -V      Verbose.  List ciphers with a complete description of protocol
             version, key exchange, authentication, encryption and mac algo‐
             rithms, any key size restrictions, and cipher suite codes (hex
             format).

     -v      Like -V, but without cipher suite codes.

     cipherlist
             A cipher list to convert to a cipher preference list.  If it is
             not included, the default cipher list will be used.

             The cipher list consists of one or more cipher strings separated
             by colons.  Commas or spaces are also acceptable separators, but
             colons are normally used.

             The actual cipher string can take several different forms:

             It can consist of a single cipher suite, such as RC4-SHA.

             It can represent a list of cipher suites containing a certain al‐
             gorithm, or cipher suites of a certain type.  For example SHA1
             represents all cipher suites using the digest algorithm SHA1.

             Lists of cipher suites can be combined in a single cipher string
             using the ‘+’ character (logical AND operation).  For example,
             SHA1+DES represents all cipher suites containing the SHA1 and DES
             algorithms.

             Each cipher string can be optionally preceded by the characters
             ‘!’, ‘-’, or ‘+’.  If ‘!’ is used, then the ciphers are perma‐
             nently deleted from the list.  The ciphers deleted can never
             reappear in the list even if they are explicitly stated.  If ‘-’
             is used, then the ciphers are deleted from the list, but some or
             all of the ciphers can be added again by later options.  If ‘+’
             is used, then the ciphers are moved to the end of the list.  This
             option doesn't add any new ciphers, it just moves matching exist‐
             ing ones.

             If none of these characters is present, the string is just inter‐
             preted as a list of ciphers to be appended to the current prefer‐
             ence list.  If the list includes any ciphers already present,
             they will be ignored; that is, they will not be moved to the end
             of the list.

             Additionally, the cipher string @STRENGTH can be used at any
             point to sort the current cipher list in order of encryption al‐
             gorithm key length.

     The following is a list of all permitted cipher strings and their mean‐
     ings.

     DEFAULT
           The default cipher list.  This is determined at compile time and is
           currently ALL:!aNULL:!eNULL:!SSLv2.  This must be the first cipher
           string specified.

     COMPLEMENTOFDEFAULT
           The ciphers included in ALL, but not enabled by default.  Currently
           this is ADH.  Note that this rule does not cover eNULL, which is
           not included by ALL (use COMPLEMENTOFALL if necessary).

     ALL   All cipher suites except the eNULL ciphers, which must be explic‐
           itly enabled.

     COMPLEMENTOFALL
           The cipher suites not enabled by ALL, currently being eNULL.

     HIGH  "High" encryption cipher suites.  This currently means those with
           key lengths larger than 128 bits.

     MEDIUM
           "Medium" encryption cipher suites, currently those using 128-bit
           encryption.

     LOW   "Low" encryption cipher suites, currently those using 64- or 56-bit
           encryption algorithms.

     eNULL, NULL
           The "NULL" ciphers; that is, those offering no encryption.  Because
           these offer no encryption at all and are a security risk, they are
           disabled unless explicitly included.

     aNULL
           The cipher suites offering no authentication.  This is currently
           the anonymous DH algorithms.  These cipher suites are vulnerable to
           a "man in the middle" attack, so their use is normally discouraged.

     kRSA, RSA
           Cipher suites using RSA key exchange.

     kEDH  Cipher suites using ephemeral DH key agreement.

     aRSA  Cipher suites using RSA authentication, i.e. the certificates carry
           RSA keys.

     aDSS, DSS
           Cipher suites using DSS authentication, i.e. the certificates carry
           DSS keys.

     TLSv1
           TLS v1.0 cipher suites.

     DH    Cipher suites using DH, including anonymous DH.

     ADH   Anonymous DH cipher suites.

     AES   Cipher suites using AES.

     3DES  Cipher suites using triple DES.

     DES   Cipher suites using DES (not triple DES).

     RC4   Cipher suites using RC4.

     CAMELLIA
           Cipher suites using Camellia.

     CHACHA20
           Cipher suites using ChaCha20.

     IDEA  Cipher suites using IDEA.

     MD5   Cipher suites using MD5.

     SHA1, SHA
           Cipher suites using SHA1.

CRL
     openssl crl [-CAfile file] [-CApath dir] [-fingerprint] [-hash] [-in
     file] [-inform der | pem] [-issuer] [-lastupdate] [-nextupdate] [-noout]
     [-out file] [-outform der | pem] [-text]

     The crl command processes CRL files in DER or PEM format.  The PEM CRL
     format uses the header and footer lines:

           -----BEGIN X509 CRL-----
           -----END X509 CRL-----

     The options are as follows:

     -CAfile file
             Verify the signature on a CRL by looking up the issuing certifi‐
             cate in file.

     -CApath directory
             Verify the signature on a CRL by looking up the issuing certifi‐
             cate in dir.  This directory must be a standard certificate di‐
             rectory, i.e. a hash of each subject name (using x509 -hash)
             should be linked to each certificate.

     -fingerprint
             Print the CRL fingerprint.

     -hash   Output a hash of the issuer name.  This can be used to look up
             CRLs in a directory by issuer name.

     -in file
             The input file to read from, or standard input if not specified.

     -inform der | pem
             The input format.

     -issuer
             Output the issuer name.

     -lastupdate
             Output the lastUpdate field.

     -nextupdate
             Output the nextUpdate field.

     -noout  Don't output the encoded version of the CRL.

     -out file
             The output file to write to, or standard output if not specified.

     -outform der | pem
             The output format.

     -text   Print out the CRL in text form.

CRL2PKCS7
     openssl crl2pkcs7 [-certfile file] [-in file] [-inform der | pem]
     [-nocrl] [-out file] [-outform der | pem]

     The crl2pkcs7 command takes an optional CRL and one or more certificates
     and converts them into a PKCS#7 degenerate "certificates only" structure.

     The options are as follows:

     -certfile file
             Add the certificates in PEM file to the PKCS#7 structure.  This
             option can be used more than once to read certificates from mul‐
             tiple files.

     -in file
             Read the CRL from file, or standard input if not specified.

     -inform der | pem
             Specify the CRL input format.

     -nocrl  Normally, a CRL is included in the output file.  With this op‐
             tion, no CRL is included in the output file and a CRL is not read
             from the input file.

     -out file
             Write the PKCS#7 structure to file, or standard output if not
             specified.

     -outform der | pem
             Specify the PKCS#7 structure output format.

DGST
     openssl dgst [-gost-mac | -streebog256 | -streebog512 | -md_gost94 |
     -md4 | -md5 | -ripemd160 | -sha1 |
     -sha224 | -sha256 | -sha384 | -sha512 | -whirlpool] [-binary] [-cd]
     [-hex] [-hmac key] [-keyform PEM] [-mac algorithm] [-macopt nm:v]
     [-out file] [-passin arg] [-prverify file] [-sign file] [-signature file]
     [-sigopt nm:v] [-verify file] [file ...]

     openssl gost-mac | streebog256 | streebog512 | md_gost94 | md4 | md5 |
     ripemd160 | sha1 | sha224 | sha256 | sha384 | sha512 | whirlpool [-c]
     [-d] [file ...]

     The digest functions output the message digest of a supplied file or
     files in hexadecimal form.  They can also be used for digital signing and
     verification.

     The options are as follows:

     -binary
             Output the digest or signature in binary form.

     -c      Print out the digest in two-digit groups separated by colons;
             only relevant if hex format output is used.

     -d      Print out BIO debugging information.

     -hex    Digest is to be output as a hex dump.  This is the default case
             for a "normal" digest as opposed to a digital signature.

     -hmac key
             Create a hashed MAC using key.

     -keyform PEM
             Specifies the key format to sign the digest with.

     -mac algorithm
             Create a keyed Message Authentication Code (MAC).  The most popu‐
             lar MAC algorithm is HMAC (hash-based MAC), but there are other
             MAC algorithms which are not based on hash.  MAC keys and other
             options should be set via the -macopt parameter.

     -macopt nm:v
             Passes options to the MAC algorithm, specified by -mac.  The fol‐
             lowing options are supported by HMAC:

             key:string
                     Specifies the MAC key as an alphanumeric string (use if
                     the key contain printable characters only).  String
                     length must conform to any restrictions of the MAC algo‐
                     rithm.

             hexkey:string
                     Specifies the MAC key in hexadecimal form (two hex digits
                     per byte).  Key length must conform to any restrictions
                     of the MAC algorithm.

     -out file
             The file to output to, or standard output by default.

     -passin arg
             The key password source.

     -prverify file
             Verify the signature using the private key in file.  The output
             is either "Verification OK" or "Verification Failure".

     -sign file
             Digitally sign the digest using the private key in file.

     -signature file
             The actual signature to verify.

     -sigopt nm:v
             Pass options to the signature algorithm during sign or verify op‐
             erations.  The names and values of these options are algorithm-
             specific.

     -verify file
             Verify the signature using the public key in file.  The output is
             either "Verification OK" or "Verification Failure".

     file ...
             File or files to digest.  If no files are specified then standard
             input is used.

DGST NOTES
     The digest of choice for all new applications is SHA1.  Other digests
     are, however, still widely used.

     If you wish to sign or verify data using the DSA algorithm, the dss1 di‐
     gest must be used.

     A source of random numbers is required for certain signing algorithms, in
     particular DSA.

     The signing and verify options should only be used if a single file is
     being signed or verified.

DH
     Diffie-Hellman Parameter Management.  The dh command has been replaced by
     dhparam.  See DHPARAM below.

DHPARAM
     openssl dhparam [-2 | -5] [-C] [-check] [-dsaparam] [-in file]
     [-inform DER | PEM] [-noout] [-out file] [-outform DER | PEM] [-text]
     [numbits]

     The dhparam command is used to manipulate DH parameter files.

     The options are as follows:

     -2, -5  The generator to use, either 2 or 5.  2 is the default.  If
             present, the input file is ignored and parameters are generated
             instead.

     -C      This option converts the parameters into C code.  The parameters
             can then be loaded by calling the get_dhnumbits() function.

     -check  Check the DH parameters.

     -dsaparam
             If this option is used, DSA rather than DH parameters are read or
             created; they are converted to DH format.  Otherwise, "strong"
             primes (such that (p-1)/2 is also prime) will be used for DH pa‐
             rameter generation.

             DH parameter generation with the -dsaparam option is much faster,
             and the recommended exponent length is shorter, which makes DH
             key exchange more efficient.  Beware that with such DSA-style DH
             parameters, a fresh DH key should be created for each use to
             avoid small-subgroup attacks that may be possible otherwise.

     -in file
             This specifies the input file to read parameters from, or stan‐
             dard input if this option is not specified.

     -inform DER | PEM
             This specifies the input format.  The argument DER uses an ASN1
             DER-encoded form compatible with the PKCS#3 DHparameter struc‐
             ture.  The PEM form is the default format: it consists of the DER
             format base64-encoded with additional header and footer lines.

     -noout  This option inhibits the output of the encoded version of the pa‐
             rameters.

     numbits
             This argument specifies that a parameter set should be generated
             of size numbits.  It must be the last option.  If not present, a
             value of 2048 is used.  If this value is present, the input file
             is ignored and parameters are generated instead.

     -out file
             This specifies the output file to write parameters to.  Standard
             output is used if this option is not present.  The output file‐
             name should not be the same as the input filename.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -text   This option prints out the DH parameters in human readable form.

DHPARAM WARNINGS
     The program dhparam combines the functionality of the programs dh and
     gendh in previous versions of OpenSSL and SSLeay.  The dh and gendh pro‐
     grams are retained for now, but may have different purposes in future
     versions of OpenSSL.

DHPARAM NOTES
     PEM format DH parameters use the header and footer lines:

           -----BEGIN DH PARAMETERS-----
           -----END DH PARAMETERS-----

     OpenSSL currently only supports the older PKCS#3 DH, not the newer X9.42
     DH.

     This program manipulates DH parameters not keys.

DHPARAM BUGS
     There should be a way to generate and manipulate DH keys.

DHPARAM HISTORY
     The dhparam command was added in OpenSSL 0.9.5.  The -dsaparam option was
     added in OpenSSL 0.9.6.

DSA
     openssl dsa [-aes128 | -aes192 | -aes256 | -des | -des3] [-in file]
     [-inform DER | PEM] [-modulus] [-noout] [-out file] [-outform DER | PEM]
     [-passin arg] [-passout arg] [-pubin] [-pubout] [-text]

     The dsa command processes DSA keys.  They can be converted between vari‐
     ous forms and their components printed out.

     Note: This command uses the traditional SSLeay compatible format for pri‐
     vate key encryption: newer applications should use the more secure PKCS#8
     format using the pkcs8 command.

     The options are as follows:

     -aes128 | -aes192 | -aes256 | -des | -des3
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  A pass
             phrase is prompted for.  If none of these options is specified,
             the key is written in plain text.  This means that using the dsa
             utility to read in an encrypted key with no encryption option can
             be used to remove the pass phrase from a key, or by setting the
             encryption options it can be use to add or change the pass
             phrase.  These options can only be used with PEM format output
             files.

     -in file
             This specifies the input file to read a key from, or standard in‐
             put if this option is not specified.  If the key is encrypted, a
             pass phrase will be prompted for.

     -inform DER | PEM
             This specifies the input format.  The DER argument with a private
             key uses an ASN1 DER-encoded form of an ASN.1 SEQUENCE consisting
             of the values of version (currently zero), P, Q, G, and the pub‐
             lic and private key components, respectively, as ASN.1 INTEGERs.
             When used with a public key it uses a SubjectPublicKeyInfo struc‐
             ture: it is an error if the key is not DSA.

             The PEM form is the default format: it consists of the DER format
             base64-encoded with additional header and footer lines.  In the
             case of a private key, PKCS#8 format is also accepted.

     -modulus
             This option prints out the value of the public key component of
             the key.

     -noout  This option prevents output of the encoded version of the key.

     -out file
             This specifies the output file to write a key to, or standard
             output if not specified.  If any encryption options are set then
             a pass phrase will be prompted for.  The output filename should
             not be the same as the input filename.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -passin arg
             The key password source.

     -passout arg
             The output file password source.

     -pubin  By default, a private key is read from the input file.  With this
             option a public key is read instead.

     -pubout
             By default, a private key is output.  With this option a public
             key will be output instead.  This option is automatically set if
             the input is a public key.

     -text   Prints out the public/private key components and parameters.

DSA NOTES
     The PEM private key format uses the header and footer lines:

           -----BEGIN DSA PRIVATE KEY-----
           -----END DSA PRIVATE KEY-----

     The PEM public key format uses the header and footer lines:

           -----BEGIN PUBLIC KEY-----
           -----END PUBLIC KEY-----

DSA EXAMPLES
     To remove the pass phrase on a DSA private key:

           $ openssl dsa -in key.pem -out keyout.pem

     To encrypt a private key using triple DES:

           $ openssl dsa -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl dsa -in key.pem -outform DER -out keyout.der

     To print out the components of a private key to standard output:

           $ openssl dsa -in key.pem -text -noout

     To just output the public part of a private key:

           $ openssl dsa -in key.pem -pubout -out pubkey.pem

DSAPARAM
     openssl dsaparam [-C] [-genkey] [-in file] [-inform DER | PEM] [-noout]
     [-out file] [-outform DER | PEM] [-text] [numbits]

     The dsaparam command is used to manipulate or generate DSA parameter
     files.

     The options are as follows:

     -C      This option converts the parameters into C code.  The parameters
             can then be loaded by calling the get_dsaXXX() function.

     -genkey
             This option will generate a DSA either using the specified or
             generated parameters.

     -in file
             This specifies the input file to read parameters from, or stan‐
             dard input if this option is not specified.  If the numbits pa‐
             rameter is included, then this option will be ignored.

     -inform DER | PEM
             This specifies the input format.  The DER argument uses an ASN1
             DER-encoded form compatible with RFC 2459 (PKIX) DSS-Parms that
             is a SEQUENCE consisting of p, q and g, respectively.  The PEM
             form is the default format: it consists of the DER format
             base64-encoded with additional header and footer lines.

     -noout  This option inhibits the output of the encoded version of the pa‐
             rameters.

     numbits
             This option specifies that a parameter set should be generated of
             size numbits.  If this option is included, the input file (if
             any) is ignored.

     -out file
             This specifies the output file to write parameters to.  Standard
             output is used if this option is not present.  The output file‐
             name should not be the same as the input filename.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -text   This option prints out the DSA parameters in human readable form.

DSAPARAM NOTES
     PEM format DSA parameters use the header and footer lines:

           -----BEGIN DSA PARAMETERS-----
           -----END DSA PARAMETERS-----

     DSA parameter generation is a slow process and as a result the same set
     of DSA parameters is often used to generate several distinct keys.

EC
     openssl ec [-conv_form arg] [-des] [-des3] [-in file] [-inform DER | PEM]
     [-noout] [-out file] [-outform DER | PEM] [-param_enc arg] [-param_out]
     [-passin arg] [-passout arg] [-pubin] [-pubout] [-text]

     The ec command processes EC keys.  They can be converted between various
     forms and their components printed out.  Note: OpenSSL uses the private
     key format specified in “SEC 1: Elliptic Curve Cryptography”
     (http://www.secg.org/). To convert an OpenSSL EC private key into the
     PKCS#8 private key format use the pkcs8 command.

     The options are as follows:

     -conv_form arg
             This specifies how the points on the elliptic curve are converted
             into octet strings.  Possible values are: compressed (the default
             value), uncompressed, and hybrid.  For more information regarding
             the point conversion forms please read the X9.62 standard.  Note:
             Due to patent issues the compressed option is disabled by default
             for binary curves and can be enabled by defining the preprocessor
             macro OPENSSL_EC_BIN_PT_COMP at compile time.

     -des | -des3
             These options encrypt the private key with the DES, triple DES,
             or any other cipher supported by OpenSSL before outputting it.  A
             pass phrase is prompted for.  If none of these options is speci‐
             fied the key is written in plain text.  This means that using the
             ec utility to read in an encrypted key with no encryption option
             can be used to remove the pass phrase from a key, or by setting
             the encryption options it can be use to add or change the pass
             phrase.  These options can only be used with PEM format output
             files.

     -in file
             This specifies the input filename to read a key from, or standard
             input if this option is not specified.  If the key is encrypted a
             pass phrase will be prompted for.

     -inform DER | PEM
             This specifies the input format.  DER with a private key uses an
             ASN.1 DER-encoded SEC1 private key.  When used with a public key
             it uses the SubjectPublicKeyInfo structure as specified in RFC
             3280.  PEM is the default format: it consists of the DER format
             base64 encoded with additional header and footer lines.  In the
             case of a private key PKCS#8 format is also accepted.

     -noout  Prevents output of the encoded version of the key.

     -out file
             Specifies the output filename to write a key to, or standard out‐
             put if none is specified.  If any encryption options are set then
             a pass phrase will be prompted for.  The output filename should
             not be the same as the input filename.

     -outform DER | PEM
             This specifies the output format.  The options have the same
             meaning as the -inform option.

     -param_enc arg
             This specifies how the elliptic curve parameters are encoded.
             Possible value are: named_curve, i.e. the EC parameters are spec‐
             ified by an OID; or explicit, where the EC parameters are explic‐
             itly given (see RFC 3279 for the definition of the EC parameter
             structures).  The default value is named_curve.  Note: the
             implicitlyCA alternative, as specified in RFC 3279, is currently
             not implemented in OpenSSL.

     -passin arg
             The key password source.

     -passout arg
             The output file password source.

     -pubin  By default a private key is read from the input file; with this
             option a public key is read instead.

     -pubout
             By default a private key is output; with this option a public key
             is output instead.  This option is automatically set if the input
             is a public key.

     -text   Prints out the public/private key components and parameters.

EC NOTES
     The PEM private key format uses the header and footer lines:

           -----BEGIN EC PRIVATE KEY-----
           -----END EC PRIVATE KEY-----

     The PEM public key format uses the header and footer lines:

           -----BEGIN PUBLIC KEY-----
           -----END PUBLIC KEY-----

EC EXAMPLES
     To encrypt a private key using triple DES:

           $ openssl ec -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl ec -in key.pem -outform DER -out keyout.der

     To print out the components of a private key to standard output:

           $ openssl ec -in key.pem -text -noout

     To just output the public part of a private key:

           $ openssl ec -in key.pem -pubout -out pubkey.pem

     To change the parameter encoding to explicit:

           $ openssl ec -in key.pem -param_enc explicit -out keyout.pem

     To change the point conversion form to compressed:

           $ openssl ec -in key.pem -conv_form compressed -out keyout.pem

EC HISTORY
     The ec command was first introduced in OpenSSL 0.9.8.

EC AUTHORS
     Nils Larsch.

ECPARAM
     openssl ecparam [-C] [-check] [-conv_form arg] [-genkey] [-in file]
     [-inform DER | PEM] [-list_curves] [-name arg] [-no_seed] [-noout]
     [-out file] [-outform DER | PEM] [-param_enc arg] [-text]

     This command is used to manipulate or generate EC parameter files.

     The options are as follows:

     -C      Convert the EC parameters into C code.  The parameters can then
             be loaded by calling the get_ec_group_XXX() function.

     -check  Validate the elliptic curve parameters.

     -conv_form arg
             Specify how the points on the elliptic curve are converted into
             octet strings.  Possible values are: compressed (the default
             value), uncompressed, and hybrid.  For more information regarding
             the point conversion forms please read the X9.62 standard.  Note:
             Due to patent issues the compressed option is disabled by default
             for binary curves and can be enabled by defining the preprocessor
             macro OPENSSL_EC_BIN_PT_COMP at compile time.

     -genkey
             Generate an EC private key using the specified parameters.

     -in file
             Specify the input filename to read parameters from or standard
             input if this option is not specified.

     -inform DER | PEM
             Specify the input format.  DER uses an ASN.1 DER-encoded form
             compatible with RFC 3279 EcpkParameters.  PEM is the default for‐
             mat: it consists of the DER format base64 encoded with additional
             header and footer lines.

     -list_curves
             Print out a list of all currently implemented EC parameter names
             and exit.

     -name arg
             Use the EC parameters with the specified 'short' name.  Use
             -list_curves to get a list of all currently implemented EC param‐
             eters.

     -no_seed
             Inhibit that the 'seed' for the parameter generation is included
             in the ECParameters structure (see RFC 3279).

     -noout  Inhibit the output of the encoded version of the parameters.

     -out file
             Specify the output filename parameters are written to.  Standard
             output is used if this option is not present.  The output file‐
             name should not be the same as the input filename.

     -outform DER | PEM
             Specify the output format; the parameters have the same meaning
             as the -inform option.

     -param_enc arg
             This specifies how the elliptic curve parameters are encoded.
             Possible value are: named_curve, i.e. the EC parameters are spec‐
             ified by an OID, or explicit, where the EC parameters are explic‐
             itly given (see RFC 3279 for the definition of the EC parameter
             structures).  The default value is named_curve.  Note: the
             implicitlyCA alternative, as specified in RFC 3279, is currently
             not implemented in OpenSSL.

     -text   Print out the EC parameters in human readable form.

ECPARAM NOTES
     PEM format EC parameters use the header and footer lines:

           -----BEGIN EC PARAMETERS-----
           -----END EC PARAMETERS-----

     OpenSSL is currently not able to generate new groups and therefore
     ecparam can only create EC parameters from known (named) curves.

ECPARAM EXAMPLES
     To create EC parameters with the group 'prime192v1':

           $ openssl ecparam -out ec_param.pem -name prime192v1

     To create EC parameters with explicit parameters:

           $ openssl ecparam -out ec_param.pem -name prime192v1 \
                   -param_enc explicit

     To validate given EC parameters:

           $ openssl ecparam -in ec_param.pem -check

     To create EC parameters and a private key:

           $ openssl ecparam -out ec_key.pem -name prime192v1 -genkey

     To change the point encoding to 'compressed':

           $ openssl ecparam -in ec_in.pem -out ec_out.pem \
                   -conv_form compressed

     To print out the EC parameters to standard output:

           $ openssl ecparam -in ec_param.pem -noout -text

ECPARAM HISTORY
     The ecparam command was first introduced in OpenSSL 0.9.8.

ECPARAM AUTHORS
     Nils Larsch.

ENC
     openssl enc -ciphername [-AadePp] [-base64] [-bufsize number] [-debug]
     [-in file] [-iv IV] [-K key] [-k password] [-kfile file] [-md digest]
     [-none] [-nopad] [-nosalt] [-out file] [-pass arg] [-S salt] [-salt]

     The symmetric cipher commands allow data to be encrypted or decrypted us‐
     ing various block and stream ciphers using keys based on passwords or ex‐
     plicitly provided.  Base64 encoding or decoding can also be performed ei‐
     ther by itself or in addition to the encryption or decryption.

     The options are as follows:

     -A      If the -a option is set, then base64 process the data on one
             line.

     -a, -base64
             Base64 process the data.  This means that if encryption is taking
             place, the data is base64-encoded after encryption.  If decryp‐
             tion is set, the input data is base64 decoded before being de‐
             crypted.

     -bufsize number
             Set the buffer size for I/O.

     -d      Decrypt the input data.

     -debug  Debug the BIOs used for I/O.

     -e      Encrypt the input data: this is the default.

     -in file
             The input file; standard input by default.

     -iv IV  The actual IV (initialisation vector) to use: this must be repre‐
             sented as a string comprised only of hex digits.  When only the
             key is specified using the -K option, the IV must explicitly be
             defined.  When a password is being specified using one of the
             other options, the IV is generated from this password.

     -K key  The actual key to use: this must be represented as a string com‐
             prised only of hex digits.  If only the key is specified, the IV
             must be additionally specified using the -iv option.  When both a
             key and a password are specified, the key given with the -K op‐
             tion will be used and the IV generated from the password will be
             taken.  It probably does not make much sense to specify both key
             and password.

     -k password
             The password to derive the key from.  This is for compatibility
             with previous versions of OpenSSL.  Superseded by the -pass op‐
             tion.

     -kfile file
             Read the password to derive the key from the first line of file.
             This is for compatibility with previous versions of OpenSSL.  Su‐
             perseded by the -pass option.

     -md digest
             Use digest to create a key from a pass phrase.  digest may be one
             of “md5” or “sha1”.

     -none   Use NULL cipher (no encryption or decryption of input).

     -nopad  Disable standard block padding.

     -nosalt
             Don't use a salt in the key derivation routines.  This option
             should NEVER be used unless compatibility with previous versions
             of OpenSSL or SSLeay is required.

     -out file
             The output file, standard output by default.

     -P      Print out the salt, key, and IV used, then immediately exit;
             don't do any encryption or decryption.

     -p      Print out the salt, key, and IV used.

     -pass arg
             The password source.

     -S salt
             The actual salt to use: this must be represented as a string com‐
             prised only of hex digits.

     -salt   Use a salt in the key derivation routines.  This is the default.

ENC NOTES
     The program can be called either as openssl ciphername or openssl enc
     -ciphername.

     A password will be prompted for to derive the key and IV if necessary.

     The -nosalt option should NEVER be used unless compatibility with previ‐
     ous versions of OpenSSL or SSLeay is required.

     With the -nosalt option it is possible to perform efficient dictionary
     attacks on the password and to attack stream cipher encrypted data.  The
     reason for this is that without the salt the same password always gener‐
     ates the same encryption key.  When the salt is being used the first
     eight bytes of the encrypted data are reserved for the salt: it is gener‐
     ated at random when encrypting a file and read from the encrypted file
     when it is decrypted.

     Some of the ciphers do not have large keys and others have security im‐
     plications if not used correctly.  A beginner is advised to just use a
     strong block cipher in CBC mode such as bf or des3.

     All the block ciphers normally use PKCS#5 padding also known as standard
     block padding: this allows a rudimentary integrity or password check to
     be performed.  However, since the chance of random data passing the test
     is better than 1 in 256, it isn't a very good test.

     If padding is disabled, the input data must be a multiple of the cipher
     block length.

     All RC2 ciphers have the same key and effective key length.

     Blowfish and RC5 algorithms use a 128-bit key.

ENC SUPPORTED CIPHERS
           aes-[128|192|256]-cbc    128/192/256 bit AES in CBC mode
           aes-[128|192|256]   Alias for aes-[128|192|256]-cbc
           aes-[128|192|256]-cfb    128/192/256 bit AES in 128 bit CFB mode
           aes-[128|192|256]-cfb1   128/192/256 bit AES in 1 bit CFB mode
           aes-[128|192|256]-cfb8   128/192/256 bit AES in 8 bit CFB mode
           aes-[128|192|256]-ecb    128/192/256 bit AES in ECB mode
           aes-[128|192|256]-ofb    128/192/256 bit AES in OFB mode

           base64              Base 64

           bf             Alias for bf-cbc
           bf-cbc              Blowfish in CBC mode
           bf-cfb              Blowfish in CFB mode
           bf-ecb              Blowfish in ECB mode
           bf-ofb              Blowfish in OFB mode

           cast           Alias for cast-cbc
           cast-cbc       CAST in CBC mode
           cast5-cbc      CAST5 in CBC mode
           cast5-cfb      CAST5 in CFB mode
           cast5-ecb      CAST5 in ECB mode
           cast5-ofb      CAST5 in OFB mode

           des            Alias for des-cbc
           des-cbc             DES in CBC mode
           des-cfb             DES in CBC mode
           des-ecb             DES in ECB mode
           des-ofb             DES in OFB mode

           des-ede             Two key triple DES EDE in ECB mode
           des-ede-cbc         Two key triple DES EDE in CBC mode
           des-ede-cfb         Two key triple DES EDE in CFB mode
           des-ede-ofb         Two key triple DES EDE in OFB mode

           des3           Alias for des-ede3-cbc
           des-ede3       Three key triple DES EDE in ECB mode
           des-ede3-cbc        Three key triple DES EDE in CBC mode
           des-ede3-cfb        Three key triple DES EDE CFB mode
           des-ede3-ofb        Three key triple DES EDE in OFB mode

           desx           DESX algorithm

           rc2            Alias for rc2-cbc
           rc2-cbc             128-bit RC2 in CBC mode
           rc2-cfb             128-bit RC2 in CFB mode
           rc2-ecb             128-bit RC2 in ECB mode
           rc2-ofb             128-bit RC2 in OFB mode
           rc2-64-cbc          64-bit RC2 in CBC mode
           rc2-40-cbc          40-bit RC2 in CBC mode

           rc4            128-bit RC4
           rc4-40              40-bit RC4

ENC EXAMPLES
     Just base64 encode a binary file:

           $ openssl base64 -in file.bin -out file.b64

     Decode the same file:

           $ openssl base64 -d -in file.b64 -out file.bin

     Encrypt a file using triple DES in CBC mode using a prompted password:

           $ openssl des3 -salt -in file.txt -out file.des3

     Decrypt a file using a supplied password:

           $ openssl des3 -d -in file.des3 -out file.txt -k mypassword

     Encrypt a file then base64 encode it (so it can be sent via mail for ex‐
     ample) using Blowfish in CBC mode:

           $ openssl bf -a -salt -in file.txt -out file.bf

     Base64 decode a file then decrypt it:

           $ openssl bf -d -a -in file.bf -out file.txt

ENC BUGS
     The -A option when used with large files doesn't work properly.

     There should be an option to allow an iteration count to be included.

     The enc program only supports a fixed number of algorithms with certain
     parameters.  Therefore it is not possible to use RC2 with a 76-bit key or
     RC4 with an 84-bit key with this program.

ERRSTR
     openssl errstr [-stats] errno ...

     The errstr command performs error number to error string conversion, gen‐
     erating a human-readable string representing the error code errno.  The
     string is obtained through the ERR_error_string_n(3) function and has the
     following format:

           error:[error code]:[library name]:[function name]:[reason string]

     [error code] is an 8-digit hexadecimal number.  The remaining fields
     [library name], [function name], and [reason string] are all ASCII text.

     The options are as follows:

     -stats  Print debugging statistics about various aspects of the hash ta‐
             ble.

ERRSTR EXAMPLES
     The following error code:

           27594:error:2006D080:lib(32):func(109):reason(128):bss_file.c:107:

     ...can be displayed with:

           $ openssl errstr 2006D080

     ...to produce the error message:

           error:2006D080:BIO routines:BIO_new_file:no such file

GENDH
     Generation of Diffie-Hellman Parameters.  Replaced by dhparam.  See
     DHPARAM above.

GENDSA
     openssl gendsa [-aes128 | -aes192 | -aes256 | -des | -des3] [-out file]
     [paramfile]

     The gendsa command generates a DSA private key from a DSA parameter file
     (which will typically be generated by the openssl dsaparam command).

     The options are as follows:

     -aes128 | -aes192 | -aes256 | -des | -des3
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  A pass
             phrase is prompted for.  If none of these options are specified,
             no encryption is used.

     -out file
             The output file.  If this argument is not specified, standard
             output is used.

     paramfile
             This option specifies the DSA parameter file to use.  The parame‐
             ters in this file determine the size of the private key.  DSA pa‐
             rameters can be generated and examined using the openssl dsaparam
             command.

GENDSA NOTES
     DSA key generation is little more than random number generation so it is
     much quicker than RSA key generation, for example.

GENPKEY
     openssl genpkey [-algorithm alg] [cipher] [-genparam] [-out file]
     [-outform DER | PEM] [-paramfile file] [-pass arg] [-pkeyopt opt:value]
     [-text]

     The genpkey command generates private keys.  The use of this program is
     encouraged over the algorithm specific utilities because additional algo‐
     rithm options can be used.

     The options are as follows:

     -algorithm alg
             The public key algorithm to use, such as RSA, DSA, or DH.  If
             used this option must precede any -pkeyopt options.  The options
             -paramfile and -algorithm are mutually exclusive.

     cipher  Encrypt the private key with the supplied cipher.  Any algorithm
             name accepted by EVP_get_cipherbyname() is acceptable, such as
             des3.

     -genparam
             Generate a set of parameters instead of a private key.  If used
             this option must precede any -algorithm, -paramfile, or -pkeyopt
             options.

     -out file
             The output filename.  If this argument is not specified then
             standard output is used.

     -outform DER | PEM
             This specifies the output format, DER or PEM.

     -paramfile file
             Some public key algorithms generate a private key based on a set
             of parameters.  They can be supplied using this option.  If this
             option is used the public key algorithm used is determined by the
             parameters.  If used this option must precede any -pkeyopt op‐
             tions.  The options -paramfile and -algorithm are mutually exclu‐
             sive.

     -pass arg
             The output file password source.

     -pkeyopt opt:value
             Set the public key algorithm option opt to value.  The precise
             set of options supported depends on the public key algorithm used
             and its implementation.  See GENPKEY KEY GENERATION OPTIONS below
             for more details.

     -text   Print an (unencrypted) text representation of private and public
             keys and parameters along with the DER or PEM structure.

GENPKEY KEY GENERATION OPTIONS
     The options supported by each algorithm and indeed each implementation of
     an algorithm can vary.  The options for the OpenSSL implementations are
     detailed below.

           rsa_keygen_bits:numbits
                   (RSA) The number of bits in the generated key.  If not
                   specified 2048 is used.

           rsa_keygen_pubexp:value
                   (RSA) The RSA public exponent value.  This can be a large
                   decimal or hexadecimal value if preceded by 0x.  The de‐
                   fault value is 65537.

           dsa_paramgen_bits:numbits
                   (DSA) The number of bits in the generated parameters.  If
                   not specified 1024 is used.

           dh_paramgen_prime_len:numbits
                   (DH) The number of bits in the prime parameter p.

           dh_paramgen_generator:value
                   (DH) The value to use for the generator g.

           ec_paramgen_curve:curve
                   (EC) The EC curve to use.

GENPKEY EXAMPLES
     Generate an RSA private key using default parameters:

           $ openssl genpkey -algorithm RSA -out key.pem

     Encrypt and output a private key using 128-bit AES and the passphrase
     "hello":

           $ openssl genpkey -algorithm RSA -out key.pem \
                   -aes-128-cbc -pass pass:hello

     Generate a 2048-bit RSA key using 3 as the public exponent:

           $ openssl genpkey -algorithm RSA -out key.pem \
                   -pkeyopt rsa_keygen_bits:2048 -pkeyopt rsa_keygen_pubexp:3

     Generate 1024-bit DSA parameters:

           $ openssl genpkey -genparam -algorithm DSA \
                   -out dsap.pem -pkeyopt dsa_paramgen_bits:1024

     Generate a DSA key from parameters:

           $ openssl genpkey -paramfile dsap.pem -out dsakey.pem

     Generate 1024-bit DH parameters:

           $ openssl genpkey -genparam -algorithm DH \
                   -out dhp.pem -pkeyopt dh_paramgen_prime_len:1024

     Generate a DH key from parameters:

           $ openssl genpkey -paramfile dhp.pem -out dhkey.pem

GENRSA
     openssl genrsa [-3 | -f4] [-aes128 | -aes192 | -aes256 | -des | -des3]
     [-out file] [-passout arg] [numbits]

     The genrsa command generates an RSA private key.

     The options are as follows:

     -3 | -f4
             The public exponent to use, either 3 or 65537.  The default is
             65537.

     -aes128 | -aes192 | -aes256 | -des | -des3
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  If none
             of these options are specified, no encryption is used.  If en‐
             cryption is used, a pass phrase is prompted for, if it is not
             supplied via the -passout option.

     -out file
             The output file.  If this argument is not specified, standard
             output is used.

     -passout arg
             The output file password source.

     numbits
             The size of the private key to generate in bits.  This must be
             the last option specified.  The default is 2048.

GENRSA NOTES
     RSA private key generation essentially involves the generation of two
     prime numbers.  When generating a private key, various symbols will be
     output to indicate the progress of the generation.  A ‘.’ represents each
     number which has passed an initial sieve test; ‘+’ means a number has
     passed a single round of the Miller-Rabin primality test.  A newline
     means that the number has passed all the prime tests (the actual number
     depends on the key size).

     Because key generation is a random process, the time taken to generate a
     key may vary somewhat.

GENRSA BUGS
     A quirk of the prime generation algorithm is that it cannot generate
     small primes.  Therefore the number of bits should not be less that 64.
     For typical private keys this will not matter because for security rea‐
     sons they will be much larger (typically 2048 bits).

NSEQ
     openssl nseq [-in file] [-out file] [-toseq]

     The nseq command takes a file containing a Netscape certificate sequence
     and prints out the certificates contained in it or takes a file of cer‐
     tificates and converts it into a Netscape certificate sequence.

     The options are as follows:

     -in file
             This specifies the input file to read, or standard input if this
             option is not specified.

     -out file
             Specifies the output file, or standard output by default.

     -toseq  Normally, a Netscape certificate sequence will be input and the
             output is the certificates contained in it.  With the -toseq op‐
             tion the situation is reversed: a Netscape certificate sequence
             is created from a file of certificates.

NSEQ EXAMPLES
     Output the certificates in a Netscape certificate sequence:

           $ openssl nseq -in nseq.pem -out certs.pem

     Create a Netscape certificate sequence:

           $ openssl nseq -in certs.pem -toseq -out nseq.pem

NSEQ NOTES
     The PEM-encoded form uses the same headers and footers as a certificate:

           -----BEGIN CERTIFICATE-----
           -----END CERTIFICATE-----

     A Netscape certificate sequence is a Netscape specific form that can be
     sent to browsers as an alternative to the standard PKCS#7 format when
     several certificates are sent to the browser: for example during certifi‐
     cate enrollment.  It is used by the Netscape certificate server, for ex‐
     ample.

NSEQ BUGS
     This program needs a few more options, like allowing DER or PEM input and
     output files and allowing multiple certificate files to be used.

OCSP
     openssl ocsp [-CA file] [-CAfile file] [-CApath directory] [-cert file]
     [-dgst alg] [-host hostname:port] [-index indexfile] [-issuer file]
     [-ndays days] [-nmin minutes] [-no_cert_checks] [-no_cert_verify]
     [-no_certs] [-no_chain] [-no_intern] [-no_nonce] [-no_signature_verify]
     [-nonce] [-noverify] [-nrequest number] [-out file] [-path path]
     [-port portnum] [-req_text] [-reqin file] [-reqout file] [-resp_key_id]
     [-resp_no_certs] [-resp_text] [-respin file] [-respout file] [-rkey file]
     [-rother file] [-rsigner file] [-serial number] [-sign_other file]
     [-signer file] [-signkey file] [-status_age age] [-text] [-trust_other]
     [-url responder_url] [-VAfile file] [-validity_period nsec]
     [-verify_other file]

     The Online Certificate Status Protocol (OCSP) enables applications to de‐
     termine the (revocation) state of an identified certificate (RFC 2560).

     The ocsp command performs many common OCSP tasks.  It can be used to
     print out requests and responses, create requests and send queries to an
     OCSP responder, and behave like a mini OCSP server itself.

     The options are as follows:

     -CAfile file, -CApath directory
             file or path containing trusted CA certificates.  These are used
             to verify the signature on the OCSP response.

     -cert file
             Add the certificate file to the request.  The issuer certificate
             is taken from the previous -issuer option, or an error occurs if
             no issuer certificate is specified.

     -dgst alg
             Sets the digest algorithm to use for certificate identification
             in the OCSP request.  By default SHA-1 is used.

     -host hostname:port, -path path
             If the -host option is present, then the OCSP request is sent to
             the host hostname on port port.  -path specifies the HTTP path
             name to use, or ‘/’ by default.

     -issuer file
             This specifies the current issuer certificate.  This option can
             be used multiple times.  The certificate specified in file must
             be in PEM format.  This option must come before any -cert op‐
             tions.

     -no_cert_checks
             Don't perform any additional checks on the OCSP response signer's
             certificate.  That is, do not make any checks to see if the
             signer's certificate is authorised to provide the necessary sta‐
             tus information: as a result this option should only be used for
             testing purposes.

     -no_cert_verify
             Don't verify the OCSP response signer's certificate at all.
             Since this option allows the OCSP response to be signed by any
             certificate, it should only be used for testing purposes.

     -no_certs
             Don't include any certificates in signed request.

     -no_chain
             Do not use certificates in the response as additional untrusted
             CA certificates.

     -no_intern
             Ignore certificates contained in the OCSP response when searching
             for the signer's certificate.  With this option, the signer's
             certificate must be specified with either the -verify_other or
             -VAfile options.

     -no_signature_verify
             Don't check the signature on the OCSP response.  Since this op‐
             tion tolerates invalid signatures on OCSP responses, it will nor‐
             mally only be used for testing purposes.

     -nonce, -no_nonce
             Add an OCSP nonce extension to a request or disable an OCSP nonce
             addition.  Normally, if an OCSP request is input using the
             -respin option no nonce is added: using the -nonce option will
             force addition of a nonce.  If an OCSP request is being created
             (using the -cert and -serial options) a nonce is automatically
             added; specifying -no_nonce overrides this.

     -noverify
             Don't attempt to verify the OCSP response signature or the nonce
             values.  This option will normally only be used for debugging
             since it disables all verification of the responder's certifi‐
             cate.

     -out file
             Specify output file; default is standard output.

     -req_text, -resp_text, -text
             Print out the text form of the OCSP request, response, or both,
             respectively.

     -reqin file, -respin file
             Read an OCSP request or response file from file.  These options
             are ignored if an OCSP request or response creation is implied by
             other options (for example with the -serial, -cert, and -host op‐
             tions).

     -reqout file, -respout file
             Write out the DER-encoded certificate request or response to
             file.

     -serial num
             Same as the -cert option except the certificate with serial num‐
             ber num is added to the request.  The serial number is inter‐
             preted as a decimal integer unless preceded by ‘0x’.  Negative
             integers can also be specified by preceding the value with a ‘-’
             sign.

     -sign_other file
             Additional certificates to include in the signed request.

     -signer file, -signkey file
             Sign the OCSP request using the certificate specified in the
             -signer option and the private key specified by the -signkey op‐
             tion.  If the -signkey option is not present, then the private
             key is read from the same file as the certificate.  If neither
             option is specified, the OCSP request is not signed.

     -trust_other
             The certificates specified by the -verify_other option should be
             explicitly trusted and no additional checks will be performed on
             them.  This is useful when the complete responder certificate
             chain is not available or trusting a root CA is not appropriate.

     -url responder_url
             Specify the responder URL.  Both HTTP and HTTPS (SSL/TLS) URLs
             can be specified.

     -VAfile file
             file containing explicitly trusted responder certificates.
             Equivalent to the -verify_other and -trust_other options.

     -validity_period nsec, -status_age age
             These options specify the range of times, in seconds, which will
             be tolerated in an OCSP response.  Each certificate status re‐
             sponse includes a notBefore time and an optional notAfter time.
             The current time should fall between these two values, but the
             interval between the two times may be only a few seconds.  In
             practice the OCSP responder and clients' clocks may not be pre‐
             cisely synchronised and so such a check may fail.  To avoid this
             the -validity_period option can be used to specify an acceptable
             error range in seconds, the default value is 5 minutes.

             If the notAfter time is omitted from a response, then this means
             that new status information is immediately available.  In this
             case the age of the notBefore field is checked to see it is not
             older than age seconds old.  By default, this additional check is
             not performed.

     -verify_other file
             file containing additional certificates to search when attempting
             to locate the OCSP response signing certificate.  Some responders
             omit the actual signer's certificate from the response; this op‐
             tion can be used to supply the necessary certificate in such
             cases.

OCSP SERVER OPTIONS
     -CA file
           CA certificate corresponding to the revocation information in
           indexfile.

     -index indexfile
           indexfile is a text index file in ca format containing certificate
           revocation information.

           If the -index option is specified, the ocsp utility is in responder
           mode, otherwise it is in client mode.  The request(s) the responder
           processes can be either specified on the command line (using the
           -issuer and -serial options), supplied in a file (using the -respin
           option) or via external OCSP clients (if port or url is specified).

           If the -index option is present, then the -CA and -rsigner options
           must also be present.

     -nmin minutes, -ndays days
           Number of minutes or days when fresh revocation information is
           available: used in the nextUpdate field.  If neither option is
           present, the nextUpdate field is omitted, meaning fresh revocation
           information is immediately available.

     -nrequest number
           The OCSP server will exit after receiving number requests, default
           unlimited.

     -port portnum
           Port to listen for OCSP requests on.  The port may also be speci‐
           fied using the -url option.

     -resp_key_id
           Identify the signer certificate using the key ID; default is to use
           the subject name.

     -resp_no_certs
           Don't include any certificates in the OCSP response.

     -rkey file
           The private key to sign OCSP responses with; if not present, the
           file specified in the -rsigner option is used.

     -rother file
           Additional certificates to include in the OCSP response.

     -rsigner file
           The certificate to sign OCSP responses with.

OCSP RESPONSE VERIFICATION
     OCSP Response follows the rules specified in RFC 2560.

     Initially the OCSP responder certificate is located and the signature on
     the OCSP request checked using the responder certificate's public key.

     Then a normal certificate verify is performed on the OCSP responder cer‐
     tificate building up a certificate chain in the process.  The locations
     of the trusted certificates used to build the chain can be specified by
     the -CAfile and -CApath options or they will be looked for in the stan‐
     dard OpenSSL certificates directory.

     If the initial verify fails, the OCSP verify process halts with an error.

     Otherwise the issuing CA certificate in the request is compared to the
     OCSP responder certificate: if there is a match then the OCSP verify suc‐
     ceeds.

     Otherwise the OCSP responder certificate's CA is checked against the is‐
     suing CA certificate in the request.  If there is a match and the OCSP‐
     Signing extended key usage is present in the OCSP responder certificate,
     then the OCSP verify succeeds.

     Otherwise the root CA of the OCSP responder's CA is checked to see if it
     is trusted for OCSP signing.  If it is, the OCSP verify succeeds.

     If none of these checks is successful, the OCSP verify fails.

     What this effectively means is that if the OCSP responder certificate is
     authorised directly by the CA it is issuing revocation information about
     (and it is correctly configured), then verification will succeed.

     If the OCSP responder is a global responder which can give details about
     multiple CAs and has its own separate certificate chain, then its root CA
     can be trusted for OCSP signing.  For example:

           $ openssl x509 -in ocspCA.pem -addtrust OCSPSigning \
                   -out trustedCA.pem

     Alternatively, the responder certificate itself can be explicitly trusted
     with the -VAfile option.

OCSP NOTES
     As noted, most of the verify options are for testing or debugging pur‐
     poses.  Normally, only the -CApath, -CAfile and (if the responder is a
     `global VA') -VAfile options need to be used.

     The OCSP server is only useful for test and demonstration purposes: it is
     not really usable as a full OCSP responder.  It contains only a very sim‐
     ple HTTP request handling and can only handle the POST form of OCSP
     queries.  It also handles requests serially, meaning it cannot respond to
     new requests until it has processed the current one.  The text index file
     format of revocation is also inefficient for large quantities of revoca‐
     tion data.

     It is possible to run the ocsp application in responder mode via a CGI
     script using the -respin and -respout options.

OCSP EXAMPLES
     Create an OCSP request and write it to a file:

           $ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \
                   -reqout req.der

     Send a query to an OCSP responder with URL http://ocsp.myhost.com/, save
     the response to a file and print it out in text form:

           $ openssl ocsp -issuer issuer.pem -cert c1.pem -cert c2.pem \
                   -url http://ocsp.myhost.com/ -resp_text -respout resp.der

     Read in an OCSP response and print out in text form:

           $ openssl ocsp -respin resp.der -text

     OCSP server on port 8888 using a standard ca configuration, and a sepa‐
     rate responder certificate.  All requests and responses are printed to a
     file:

           $ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \
                   rcert.pem -CA demoCA/cacert.pem -text -out log.txt

     As above, but exit after processing one request:

           $ openssl ocsp -index demoCA/index.txt -port 8888 -rsigner \
                   rcert.pem -CA demoCA/cacert.pem -nrequest 1

     Query status information using internally generated request:

           $ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \
                   demoCA/cacert.pem -issuer demoCA/cacert.pem -serial 1

     Query status information using request read from a file and write the re‐
     sponse to a second file:

           $ openssl ocsp -index demoCA/index.txt -rsigner rcert.pem -CA \
                   demoCA/cacert.pem -reqin req.der -respout resp.der

PASSWD
     openssl passwd [-1 | -apr1 | -crypt] [-in file] [-noverify] [-quiet]
     [-reverse] [-salt string] [-stdin] [-table] [password]

     The passwd command computes the hash of a password typed at run-time or
     the hash of each password in a list.  The password list is taken from the
     named file for option -in, from stdin for option -stdin, or from the com‐
     mand line, or from the terminal otherwise.  The UNIX standard algorithm
     crypt and the MD5-based BSD password algorithm 1 and its Apache variant
     apr1 are available.

     The options are as follows:

     -1      Use the MD5 based BSD password algorithm 1.

     -apr1   Use the apr1 algorithm (Apache variant of the) BSD algorithm.

     -crypt  Use the crypt algorithm (default).

     -in file
             Read passwords from file.

     -noverify
             Don't verify when reading a password from the terminal.

     -quiet  Don't output warnings when passwords given on the command line
             are truncated.

     -reverse
             Switch table columns.  This only makes sense in conjunction with
             the -table option.

     -salt string
             Use the specified salt.  When reading a password from the termi‐
             nal, this implies -noverify.

     -stdin  Read passwords from stdin.

     -table  In the output list, prepend the cleartext password and a TAB
             character to each password hash.

PASSWD EXAMPLES
           $ openssl passwd -crypt -salt xx password
     prints "xxj31ZMTZzkVA".

           $ openssl passwd -1 -salt xxxxxxxx password
     prints "$1$xxxxxxxx$UYCIxa628.9qXjpQCjM4a.".

           $ openssl passwd -apr1 -salt xxxxxxxx password
     prints "$apr1$xxxxxxxx$dxHfLAsjHkDRmG83UXe8K0".

PKCS7
     openssl pkcs7 [-in file] [-inform DER | PEM] [-noout] [-out file]
     [-outform DER | PEM] [-print_certs] [-text]

     The pkcs7 command processes PKCS#7 files in DER or PEM format.

     The options are as follows:

     -in file
             This specifies the input file to read from, or standard input if
             this option is not specified.

     -inform DER | PEM
             This specifies the input format.  DER format is a DER-encoded
             PKCS#7 v1.5 structure.  PEM (the default) is a base64-encoded
             version of the DER form with header and footer lines.

     -noout  Don't output the encoded version of the PKCS#7 structure (or cer‐
             tificates if -print_certs is set).

     -out file
             Specifies the output file to write to, or standard output by de‐
             fault.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -print_certs
             Prints out any certificates or CRLs contained in the file.  They
             are preceded by their subject and issuer names in a one-line for‐
             mat.

     -text   Prints out certificate details in full rather than just subject
             and issuer names.

PKCS7 EXAMPLES
     Convert a PKCS#7 file from PEM to DER:

           $ openssl pkcs7 -in file.pem -outform DER -out file.der

     Output all certificates in a file:

           $ openssl pkcs7 -in file.pem -print_certs -out certs.pem

PKCS7 NOTES
     The PEM PKCS#7 format uses the header and footer lines:

           -----BEGIN PKCS7-----
           -----END PKCS7-----

     For compatibility with some CAs it will also accept:

           -----BEGIN CERTIFICATE-----
           -----END CERTIFICATE-----

PKCS7 RESTRICTIONS
     There is no option to print out all the fields of a PKCS#7 file.

     The PKCS#7 routines only understand PKCS#7 v 1.5 as specified in RFC
     2315.  They cannot currently parse, for example, the new CMS as described
     in RFC 2630.

PKCS8
     openssl pkcs8 [-embed] [-in file] [-inform DER | PEM] [-nocrypt]
     [-noiter] [-nooct] [-nsdb] [-out file] [-outform DER | PEM] [-passin arg]
     [-passout arg] [-topk8] [-v1 alg] [-v2 alg]

     The pkcs8 command processes private keys in PKCS#8 format.  It can handle
     both unencrypted PKCS#8 PrivateKeyInfo format and EncryptedPrivateKeyInfo
     format with a variety of PKCS#5 (v1.5 and v2.0) and PKCS#12 algorithms.

     The options are as follows:

     -embed  This option generates DSA keys in a broken format.  The DSA pa‐
             rameters are embedded inside the PrivateKey structure.  In this
             form the OCTET STRING contains an ASN1 SEQUENCE consisting of two
             structures: a SEQUENCE containing the parameters and an ASN1 IN‐
             TEGER containing the private key.

     -in file
             This specifies the input file to read a key from, or standard in‐
             put if this option is not specified.  If the key is encrypted, a
             pass phrase will be prompted for.

     -inform DER | PEM
             This specifies the input format.  If a PKCS#8 format key is ex‐
             pected on input, then either a DER- or PEM-encoded version of a
             PKCS#8 key will be expected.  Otherwise the DER or PEM format of
             the traditional format private key is used.

     -nocrypt
             PKCS#8 keys generated or input are normally PKCS#8
             EncryptedPrivateKeyInfo structures using an appropriate password-
             based encryption algorithm.  With this option, an unencrypted
             PrivateKeyInfo structure is expected or output.  This option does
             not encrypt private keys at all and should only be used when ab‐
             solutely necessary.  Certain software such as some versions of
             Java code signing software use unencrypted private keys.

     -noiter
             Use an iteration count of 1.  See the PKCS12 section below for a
             detailed explanation of this option.

     -nooct  This option generates RSA private keys in a broken format that
             some software uses.  Specifically the private key should be en‐
             closed in an OCTET STRING, but some software just includes the
             structure itself without the surrounding OCTET STRING.

     -nsdb   This option generates DSA keys in a broken format compatible with
             Netscape private key databases.  The PrivateKey contains a SE‐
             QUENCE consisting of the public and private keys, respectively.

     -out file
             This specifies the output file to write a key to, or standard
             output by default.  If any encryption options are set, a pass
             phrase will be prompted for.  The output filename should not be
             the same as the input filename.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -passin arg
             The key password source.

     -passout arg
             The output file password source.

     -topk8  Normally, a PKCS#8 private key is expected on input and a tradi‐
             tional format private key will be written.  With the -topk8 op‐
             tion the situation is reversed: it reads a traditional format
             private key and writes a PKCS#8 format key.

     -v1 alg
             This option specifies a PKCS#5 v1.5 or PKCS#12 algorithm to use.
             A complete list of possible algorithms is included below.

     -v2 alg
             This option enables the use of PKCS#5 v2.0 algorithms.  Normally,
             PKCS#8 private keys are encrypted with the password-based encryp‐
             tion algorithm called pbeWithMD5AndDES-CBC; this uses 56-bit DES
             encryption but it was the strongest encryption algorithm sup‐
             ported in PKCS#5 v1.5.  Using the -v2 option PKCS#5 v2.0 algo‐
             rithms are used which can use any encryption algorithm such as
             168-bit triple DES or 128-bit RC2, however not many implementa‐
             tions support PKCS#5 v2.0 yet.  If using private keys with
             OpenSSL then this doesn't matter.

             The alg argument is the encryption algorithm to use; valid values
             include des, des3, and rc2.  It is recommended that des3 is used.

PKCS8 NOTES
     The encrypted form of a PEM-encoded PKCS#8 file uses the following head‐
     ers and footers:

           -----BEGIN ENCRYPTED PRIVATE KEY-----
           -----END ENCRYPTED PRIVATE KEY-----

     The unencrypted form uses:

           -----BEGIN PRIVATE KEY-----
           -----END PRIVATE KEY-----

     Private keys encrypted using PKCS#5 v2.0 algorithms and high iteration
     counts are more secure than those encrypted using the traditional SSLeay
     compatible formats.  So if additional security is considered important,
     the keys should be converted.

     The default encryption is only 56 bits because this is the encryption
     that most current implementations of PKCS#8 support.

     Some software may use PKCS#12 password-based encryption algorithms with
     PKCS#8 format private keys: these are handled automatically but there is
     no option to produce them.

     It is possible to write out DER-encoded encrypted private keys in PKCS#8
     format because the encryption details are included at an ASN1 level
     whereas the traditional format includes them at a PEM level.

PKCS#5 V1.5 AND PKCS#12 ALGORITHMS
     Various algorithms can be used with the -v1 command line option, includ‐
     ing PKCS#5 v1.5 and PKCS#12.  These are described in more detail below.

     PBE-MD5-DES
           These algorithms were included in the original PKCS#5 v1.5 specifi‐
           cation.  They only offer 56 bits of protection since they both use
           DES.

     PBE-SHA1-RC2-64 | PBE-MD5-RC2-64 | PBE-SHA1-DES
           These algorithms are not mentioned in the original PKCS#5 v1.5
           specification but they use the same key derivation algorithm and
           are supported by some software.  They are mentioned in PKCS#5 v2.0.
           They use either 64-bit RC2 or 56-bit DES.

     PBE-SHA1-RC4-128 | PBE-SHA1-RC4-40 | PBE-SHA1-3DES | PBE-SHA1-2DES
     PBE-SHA1-RC2-128 | PBE-SHA1-RC2-40
           These algorithms use the PKCS#12 password-based encryption algo‐
           rithm and allow strong encryption algorithms like triple DES or
           128-bit RC2 to be used.

PKCS8 EXAMPLES
     Convert a private key from traditional to PKCS#5 v2.0 format using triple
     DES:

           $ openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem

     Convert a private key to PKCS#8 using a PKCS#5 1.5 compatible algorithm
     (DES):

           $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem

     Convert a private key to PKCS#8 using a PKCS#12 compatible algorithm
     (3DES):

           $ openssl pkcs8 -in key.pem -topk8 -out enckey.pem \
                   -v1 PBE-SHA1-3DES

     Read a DER-unencrypted PKCS#8 format private key:

           $ openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem

     Convert a private key from any PKCS#8 format to traditional format:

           $ openssl pkcs8 -in pk8.pem -out key.pem

PKCS8 STANDARDS
     Test vectors from this PKCS#5 v2.0 implementation were posted to the
     pkcs-tng mailing list using triple DES, DES and RC2 with high iteration
     counts; several people confirmed that they could decrypt the private keys
     produced and therefore it can be assumed that the PKCS#5 v2.0 implementa‐
     tion is reasonably accurate at least as far as these algorithms are con‐
     cerned.

     The format of PKCS#8 DSA (and other) private keys is not well documented:
     it is hidden away in PKCS#11 v2.01, section 11.9; OpenSSL's default DSA
     PKCS#8 private key format complies with this standard.

PKCS8 BUGS
     There should be an option that prints out the encryption algorithm in use
     and other details such as the iteration count.

     PKCS#8 using triple DES and PKCS#5 v2.0 should be the default private key
     format; for OpenSSL compatibility, several of the utilities use the old
     format at present.

PKCS12
     openssl pkcs12 [-aes128 | -aes192 | -aes256 | -des | -des3] [-cacerts]
     [-CAfile file] [-caname name] [-CApath directory] [-certfile file]
     [-certpbe alg] [-chain] [-clcerts] [-CSP name] [-descert] [-export]
     [-in file] [-info] [-inkey file] [-keyex] [-keypbe alg] [-keysig]
     [-macalg alg] [-maciter] [-name name] [-nocerts] [-nodes] [-noiter]
     [-nokeys] [-nomac] [-nomaciter] [-nomacver] [-noout] [-out file]
     [-passin arg] [-passout arg] [-twopass]

     The pkcs12 command allows PKCS#12 files (sometimes referred to as PFX
     files) to be created and parsed.  PKCS#12 files are used by several pro‐
     grams including Netscape, MSIE and MS Outlook.

     There are a lot of options; the meaning of some depends on whether a
     PKCS#12 file is being created or parsed.  By default, a PKCS#12 file is
     parsed; a PKCS#12 file can be created by using the -export option (see
     below).

PKCS12 PARSING OPTIONS
     -aes128 | -aes192 | -aes256 | -des | -des3
           Use AES, DES, or triple DES, respectively, to encrypt private keys
           before outputting.  The default is triple DES.

     -cacerts
           Only output CA certificates (not client certificates).

     -clcerts
           Only output client certificates (not CA certificates).

     -in file
           This specifies the file of the PKCS#12 file to be parsed.  Standard
           input is used by default.

     -info
           Output additional information about the PKCS#12 file structure, al‐
           gorithms used, and iteration counts.

     -nocerts
           No certificates at all will be output.

     -nodes
           Don't encrypt the private keys at all.

     -nokeys
           No private keys will be output.

     -nomacver
           Don't attempt to verify the integrity MAC before reading the file.

     -noout
           This option inhibits output of the keys and certificates to the
           output file version of the PKCS#12 file.

     -out file
           The file to write certificates and private keys to, standard output
           by default.  They are all written in PEM format.

     -passin arg
           The key password source.

     -passout arg
           The output file password source.

     -twopass
           Prompt for separate integrity and encryption passwords: most soft‐
           ware always assumes these are the same so this option will render
           such PKCS#12 files unreadable.

PKCS12 FILE CREATION OPTIONS
     -CAfile file
           CA storage as a file.

     -CApath directory
           CA storage as a directory.  This directory must be a standard cer‐
           tificate directory: that is, a hash of each subject name (using
           x509 -hash) should be linked to each certificate.

     -caname name
           This specifies the "friendly name" for other certificates.  This
           option may be used multiple times to specify names for all certifi‐
           cates in the order they appear.  Netscape ignores friendly names on
           other certificates, whereas MSIE displays them.

     -certfile file
           A file to read additional certificates from.

     -certpbe alg, -keypbe alg
           These options allow the algorithm used to encrypt the private key
           and certificates to be selected.  Any PKCS#5 v1.5 or PKCS#12 PBE
           algorithm name can be used (see the PKCS12 NOTES section for more
           information).  If a cipher name (as output by the
           list-cipher-algorithms command) is specified then it is used with
           PKCS#5 v2.0.  For interoperability reasons it is advisable to only
           use PKCS#12 algorithms.

     -chain
           If this option is present, an attempt is made to include the entire
           certificate chain of the user certificate.  The standard CA store
           is used for this search.  If the search fails, it is considered a
           fatal error.

     -CSP name
           Write name as a Microsoft CSP name.

     -descert
           Encrypt the certificate using triple DES; this may render the
           PKCS#12 file unreadable by some "export grade" software.  By de‐
           fault, the private key is encrypted using triple DES and the cer‐
           tificate using 40-bit RC2.

     -export
           This option specifies that a PKCS#12 file will be created rather
           than parsed.

     -in file
           The file to read certificates and private keys from, standard input
           by default.  They must all be in PEM format.  The order doesn't
           matter but one private key and its corresponding certificate should
           be present.  If additional certificates are present, they will also
           be included in the PKCS#12 file.

     -inkey file
           File to read private key from.  If not present, a private key must
           be present in the input file.

     -keyex | -keysig
           Specifies that the private key is to be used for key exchange or
           just signing.  This option is only interpreted by MSIE and similar
           MS software.  Normally, "export grade" software will only allow
           512-bit RSA keys to be used for encryption purposes, but arbitrary
           length keys for signing.  The -keysig option marks the key for
           signing only.  Signing only keys can be used for S/MIME signing,
           authenticode (ActiveX control signing) and SSL client authentica‐
           tion; however, due to a bug only MSIE 5.0 and later support the use
           of signing only keys for SSL client authentication.

     -macalg alg
           Specify the MAC digest algorithm.  If not included then SHA1 is
           used.

     -maciter
           This option is included for compatibility with previous versions;
           it used to be needed to use MAC iterations counts but they are now
           used by default.

     -name name
           This specifies the "friendly name" for the certificate and private
           key.  This name is typically displayed in list boxes by software
           importing the file.

     -nomac
           Don't attempt to provide the MAC integrity.

     -nomaciter, -noiter
           These options affect the iteration counts on the MAC and key algo‐
           rithms.  Unless you wish to produce files compatible with MSIE 4.0,
           you should leave these options alone.

           To discourage attacks by using large dictionaries of common pass‐
           words, the algorithm that derives keys from passwords can have an
           iteration count applied to it: this causes a certain part of the
           algorithm to be repeated and slows it down.  The MAC is used to
           check the file integrity but since it will normally have the same
           password as the keys and certificates it could also be attacked.
           By default, both MAC and encryption iteration counts are set to
           2048; using these options the MAC and encryption iteration counts
           can be set to 1.  Since this reduces the file security you should
           not use these options unless you really have to.  Most software
           supports both MAC and key iteration counts.  MSIE 4.0 doesn't sup‐
           port MAC iteration counts, so it needs the -nomaciter option.

     -out file
           This specifies file to write the PKCS#12 file to.  Standard output
           is used by default.

     -passin arg
           The key password source.

     -passout arg
           The output file password source.

PKCS12 NOTES
     Although there are a large number of options, most of them are very
     rarely used.  For PKCS#12 file parsing, only -in and -out need to be used
     for PKCS#12 file creation.  -export and -name are also used.

     If none of the -clcerts, -cacerts, or -nocerts options are present, then
     all certificates will be output in the order they appear in the input
     PKCS#12 files.  There is no guarantee that the first certificate present
     is the one corresponding to the private key.  Certain software which re‐
     quires a private key and certificate and assumes the first certificate in
     the file is the one corresponding to the private key: this may not always
     be the case.  Using the -clcerts option will solve this problem by only
     outputting the certificate corresponding to the private key.  If the CA
     certificates are required, they can be output to a separate file using
     the -nokeys and -cacerts options to just output CA certificates.

     The -keypbe and -certpbe algorithms allow the precise encryption algo‐
     rithms for private keys and certificates to be specified.  Normally, the
     defaults are fine but occasionally software can't handle triple DES en‐
     crypted private keys; then the option -keypbe PBE-SHA1-RC2-40 can be used
     to reduce the private key encryption to 40-bit RC2.  A complete descrip‐
     tion of all algorithms is contained in the PKCS8 section above.

PKCS12 EXAMPLES
     Parse a PKCS#12 file and output it to a file:

           $ openssl pkcs12 -in file.p12 -out file.pem

     Output only client certificates to a file:

           $ openssl pkcs12 -in file.p12 -clcerts -out file.pem

     Don't encrypt the private key:

           $ openssl pkcs12 -in file.p12 -out file.pem -nodes

     Print some info about a PKCS#12 file:

           $ openssl pkcs12 -in file.p12 -info -noout

     Create a PKCS#12 file:

           $ openssl pkcs12 -export -in file.pem -out file.p12 \
                   -name "My Certificate"

     Include some extra certificates:

           $ openssl pkcs12 -export -in file.pem -out file.p12 \
                   -name "My Certificate" -certfile othercerts.pem

PKCS12 BUGS
     Some would argue that the PKCS#12 standard is one big bug :-)

     Versions of OpenSSL before 0.9.6a had a bug in the PKCS#12 key generation
     routines.  Under rare circumstances this could produce a PKCS#12 file en‐
     crypted with an invalid key.  As a result some PKCS#12 files which trig‐
     gered this bug from other implementations (MSIE or Netscape) could not be
     decrypted by OpenSSL and similarly OpenSSL could produce PKCS#12 files
     which could not be decrypted by other implementations.  The chances of
     producing such a file are relatively small: less than 1 in 256.

     A side effect of fixing this bug is that any old invalidly encrypted
     PKCS#12 files can no longer be parsed by the fixed version.  Under such
     circumstances the pkcs12 utility will report that the MAC is OK but fail
     with a decryption error when extracting private keys.

     This problem can be resolved by extracting the private keys and certifi‐
     cates from the PKCS#12 file using an older version of OpenSSL and recre‐
     ating the PKCS#12 file from the keys and certificates using a newer ver‐
     sion of OpenSSL.  For example:

           $ old-openssl -in bad.p12 -out keycerts.pem
           $ openssl -in keycerts.pem -export -name "My PKCS#12 file" \
                   -out fixed.p12

PKEY
     openssl pkey [cipher] [-in file] [-inform DER | PEM] [-noout] [-out file]
     [-outform DER | PEM] [-passin arg] [-passout arg] [-pubin] [-pubout]
     [-text] [-text_pub]

     The pkey command processes public or private keys.  They can be converted
     between various forms and their components printed out.

     The options are as follows:

     cipher  These options encrypt the private key with the supplied cipher.
             Any algorithm name accepted by EVP_get_cipherbyname() is accept‐
             able, such as des3.

     -in file
             This specifies the input filename to read a key from, or standard
             input if this option is not specified.  If the key is encrypted a
             pass phrase will be prompted for.

     -inform DER | PEM
             This specifies the input format, DER or PEM.

     -noout  Do not output the encoded version of the key.

     -out file
             This specifies the output filename to write a key to, or standard
             output if this option is not specified.  If any encryption op‐
             tions are set then a pass phrase will be prompted for.  The out‐
             put filename should not be the same as the input filename.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -passin arg
             The key password source.

     -passout arg
             The output file password source.

     -pubin  By default a private key is read from the input file: with this
             option a public key is read instead.

     -pubout
             By default a private key is output: with this option a public key
             will be output instead.  This option is automatically set if the
             input is a public key.

     -text   Print out the various public or private key components in plain
             text in addition to the encoded version.

     -text_pub
             Print out only public key components even if a private key is be‐
             ing processed.

PKEY EXAMPLES
     To remove the pass phrase on an RSA private key:

           $ openssl pkey -in key.pem -out keyout.pem

     To encrypt a private key using triple DES:

           $ openssl pkey -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl pkey -in key.pem -outform DER -out keyout.der

     To print the components of a private key to standard output:

           $ openssl pkey -in key.pem -text -noout

     To print the public components of a private key to standard output:

           $ openssl pkey -in key.pem -text_pub -noout

     To just output the public part of a private key:

           $ openssl pkey -in key.pem -pubout -out pubkey.pem

PKEYPARAM
     openssl pkeyparam [-in file] [-noout] [-out file] [-text]

     The pkey command processes public or private keys.  They can be converted
     between various forms and their components printed out.

     The options are as follows:

     -in file
             This specifies the input filename to read parameters from, or
             standard input if this option is not specified.

     -noout  Do not output the encoded version of the parameters.

     -out file
             This specifies the output filename to write parameters to, or
             standard output if this option is not specified.

     -text   Prints out the parameters in plain text in addition to the en‐
             coded version.

PKEYPARAM EXAMPLES
     Print out text version of parameters:

           $ openssl pkeyparam -in param.pem -text

PKEYPARAM NOTES
     There are no -inform or -outform options for this command because only
     PEM format is supported because the key type is determined by the PEM
     headers.

PKEYUTL
     openssl pkeyutl [-asn1parse] [-certin] [-decrypt] [-derive] [-encrypt]
     [-hexdump] [-in file] [-inkey file] [-keyform DER | PEM] [-out file]
     [-passin arg] [-peerform DER | PEM] [-peerkey file] [-pkeyopt opt:value]
     [-pubin] [-rev] [-sigfile file] [-sign] [-verify] [-verifyrecover]

     The pkeyutl command can be used to perform public key operations using
     any supported algorithm.

     The options are as follows:

     -asn1parse
             ASN1parse the output data.  This is useful when combined with the
             -verifyrecover option when an ASN1 structure is signed.

     -certin
             The input is a certificate containing a public key.

     -decrypt
             Decrypt the input data using a private key.

     -derive
             Derive a shared secret using the peer key.

     -encrypt
             Encrypt the input data using a public key.

     -hexdump
             Hex dump the output data.

     -in file
             Specify the input filename to read data from, or standard input
             if this option is not specified.

     -inkey file
             The input key file.  By default it should be a private key.

     -keyform DER | PEM
             The key format DER or PEM.

     -out file
             Specify the output filename to write to, or standard output by
             default.

     -passin arg
             The key password source.

     -peerform DER | PEM
             The peer key format DER or PEM.

     -peerkey file
             The peer key file, used by key derivation (agreement) operations.

     -pkeyopt opt:value
             Public key options.

     -pubin  The input file is a public key.

     -rev    Reverse the order of the input buffer.  This is useful for some
             libraries (such as CryptoAPI) which represent the buffer in lit‐
             tle endian format.

     -sigfile file
             Signature file (verify operation only).

     -sign   Sign the input data and output the signed result.  This requires
             a private key.

     -verify
             Verify the input data against the signature file and indicate if
             the verification succeeded or failed.

     -verifyrecover
             Verify the input data and output the recovered data.

PKEYUTL NOTES
     The operations and options supported vary according to the key algorithm
     and its implementation.  The OpenSSL operations and options are indicated
     below.

     Unless otherwise mentioned all algorithms support the digest:alg option
     which specifies the digest in use for sign, verify, and verifyrecover op‐
     erations.  The value alg should represent a digest name as used in the
     EVP_get_digestbyname() function, for example sha1.

   RSA algorithm
     The RSA algorithm supports the encrypt, decrypt, sign, verify, and veri‐
     fyrecover operations in general.  Some padding modes only support some of
     these operations however.

     rsa_padding_mode:mode
             This sets the RSA padding mode.  Acceptable values for mode are
             pkcs1 for PKCS#1 padding; none for no padding; oaep for OAEP
             mode; x931 for X9.31 mode; and pss for PSS.

             In PKCS#1 padding if the message digest is not set then the sup‐
             plied data is signed or verified directly instead of using a Di‐
             gestInfo structure.  If a digest is set then a DigestInfo struc‐
             ture is used and its length must correspond to the digest type.

             For oeap mode only encryption and decryption is supported.

             For x931 if the digest type is set it is used to format the block
             data; otherwise the first byte is used to specify the X9.31 di‐
             gest ID.  Sign, verify, and verifyrecover can be performed in
             this mode.

             For pss mode only sign and verify are supported and the digest
             type must be specified.

     rsa_pss_saltlen:len
             For pss mode only this option specifies the salt length.  Two
             special values are supported: -1 sets the salt length to the di‐
             gest length.  When signing -2 sets the salt length to the maximum
             permissible value.  When verifying -2 causes the salt length to
             be automatically determined based on the PSS block structure.

   DSA algorithm
     The DSA algorithm supports the sign and verify operations.  Currently
     there are no additional options other than digest.  Only the SHA1 digest
     can be used and this digest is assumed by default.

   DH algorithm
     The DH algorithm supports the derive operation and no additional options.

   EC algorithm
     The EC algorithm supports the sign, verify, and derive operations.  The
     sign and verify operations use ECDSA and derive uses ECDH.  Currently
     there are no additional options other than digest.  Only the SHA1 digest
     can be used and this digest is assumed by default.

PKEYUTL EXAMPLES
     Sign some data using a private key:

           $ openssl pkeyutl -sign -in file -inkey key.pem -out sig

     Recover the signed data (e.g. if an RSA key is used):

           $ openssl pkeyutl -verifyrecover -in sig -inkey key.pem

     Verify the signature (e.g. a DSA key):

           $ openssl pkeyutl -verify -in file -sigfile sig \
                   -inkey key.pem

     Sign data using a message digest value (this is currently only valid for
     RSA):

           $ openssl pkeyutl -sign -in file -inkey key.pem \
                   -out sig -pkeyopt digest:sha256

     Derive a shared secret value:

           $ openssl pkeyutl -derive -inkey key.pem \
                   -peerkey pubkey.pem -out secret

PRIME
     openssl prime [-bits n] [-checks n] [-generate] [-hex] [-safe] p

     The prime command is used to generate prime numbers, or to check numbers
     for primality.  Results are probabilistic: they have an exceedingly high
     likelihood of being correct, but are not guaranteed.

     The options are as follows:

     -bits n
             Specify the number of bits in the generated prime number.  Must
             be used in conjunction with -generate.

     -checks n
             Perform a Miller-Rabin probabilistic primality test with n itera‐
             tions.  The default is 20.

     -generate
             Generate a pseudo-random prime number.  Must be used in conjunc‐
             tion with -bits.

     -hex    Output in hex format.

     -safe   Generate only "safe" prime numbers (i.e. a prime p so that
             (p-1)/2 is also prime).

     p       Test if number p is prime.

RAND
     openssl rand [-base64] [-hex] [-out file] num

     The rand command outputs num pseudo-random bytes.

     The options are as follows:

     -base64
             Perform base64 encoding on the output.

     -hex    Specify hexadecimal output.

     -out file
             Write to file instead of standard output.

REQ
     openssl req [-asn1-kludge] [-batch] [-config file] [-days n]
     [-extensions section] [-in file] [-inform DER | PEM] [-key keyfile]
     [-keyform DER | PEM] [-keyout file] [-md4 | -md5 | -sha1] [-modulus]
     [-nameopt option] [-new] [-newhdr] [-newkey arg] [-no-asn1-kludge]
     [-nodes] [-noout] [-out file] [-outform DER | PEM] [-passin arg]
     [-passout arg] [-pubkey] [-reqexts section] [-reqopt option]
     [-set_serial n] [-subj arg] [-subject] [-text] [-utf8] [-verbose]
     [-verify] [-x509]

     The req command primarily creates and processes certificate requests in
     PKCS#10 format.  It can additionally create self-signed certificates, for
     use as root CAs, for example.

     The options are as follows:

     -asn1-kludge
             By default, the req command outputs certificate requests contain‐
             ing no attributes in the correct PKCS#10 format.  However certain
             CAs will only accept requests containing no attributes in an in‐
             valid form: this option produces this invalid format.

             More precisely, the Attributes in a PKCS#10 certificate request
             are defined as a SET OF Attribute.  They are not optional, so if
             no attributes are present then they should be encoded as an empty
             SET OF.  The invalid form does not include the empty SET OF,
             whereas the correct form does.

             It should be noted that very few CAs still require the use of
             this option.

     -batch  Non-interactive mode.

     -config file
             This allows an alternative configuration file to be specified;
             this overrides the compile time filename or any specified in the
             OPENSSL_CONF environment variable.

     -days n
             When the -x509 option is being used, this specifies the number of
             days to certify the certificate for.  The default is 30 days.

     -extensions section, -reqexts section
             These options specify alternative sections to include certificate
             extensions (if the -x509 option is present) or certificate re‐
             quest extensions.  This allows several different sections to be
             used in the same configuration file to specify requests for a va‐
             riety of purposes.

     -in file
             This specifies the input file to read a request from, or standard
             input if this option is not specified.  A request is only read if
             the creation options -new and -newkey are not specified.

     -inform DER | PEM
             This specifies the input format.  The DER argument uses an ASN1
             DER-encoded form compatible with the PKCS#10.  The PEM form is
             the default format: it consists of the DER format base64-encoded
             with additional header and footer lines.

     -key keyfile
             This specifies the file to read the private key from.  It also
             accepts PKCS#8 format private keys for PEM format files.

     -keyform DER | PEM
             The format of the private key file specified in the -key argu‐
             ment.  PEM is the default.

     -keyout file
             This gives the file to write the newly created private key to.
             If this option is not specified, the filename present in the con‐
             figuration file is used.

     -md5 | -sha1 | -sha256
             This specifies the message digest to sign the request with.  This
             overrides the digest algorithm specified in the configuration
             file.

             Some public key algorithms may override this choice.  For in‐
             stance, DSA signatures always use SHA1.

     -modulus
             This option prints out the value of the modulus of the public key
             contained in the request.

     -nameopt option, -reqopt option
             These options determine how the subject or issuer names are dis‐
             played.  The option argument can be a single option or multiple
             options separated by commas.  Alternatively, these options may be
             used more than once to set multiple options.  See the X509 sec‐
             tion below for details.

     -new    This option generates a new certificate request.  It will prompt
             the user for the relevant field values.  The actual fields
             prompted for and their maximum and minimum sizes are specified in
             the configuration file and any requested extensions.

             If the -key option is not used, it will generate a new RSA pri‐
             vate key using information specified in the configuration file.

     -newhdr
             Adds the word NEW to the PEM file header and footer lines on the
             outputed request.  Some software (Netscape certificate server)
             and some CAs need this.

     -newkey arg
             This option creates a new certificate request and a new private
             key.  The argument takes one of several forms.  rsa:nbits, where
             nbits is the number of bits, generates an RSA key nbits in size.
             If nbits is omitted, i.e. -newkey rsa specified, the default key
             size, specified in the configuration file, is used.

             All other algorithms support the alg:file form, where file may be
             an algorithm parameter file, created by the genpkey -genparam
             command or an X.509 certificate for a key with appropriate algo‐
             rithm.

             param:file generates a key using the parameter file or certifi‐
             cate file; the algorithm is determined by the parameters.
             algname:file use algorithm algname and parameter file file: the
             two algorithms must match or an error occurs.  algname just uses
             algorithm algname, and parameters, if necessary, should be speci‐
             fied via the -pkeyopt option.

             dsa:file generates a DSA key using the parameters in the file
             file.

     -no-asn1-kludge
             Reverses the effect of -asn1-kludge.

     -nodes  If this option is specified and a private key is created, it will
             not be encrypted.

     -noout  This option prevents output of the encoded version of the re‐
             quest.

     -out file
             This specifies the output file to write to, or standard output by
             default.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -passin arg
             The key password source.

     -passout arg
             The output file password source.

     -pubkey
             Outputs the public key.

     -reqopt option
             Customise the output format used with -text.  The option argument
             can be a single option or multiple options separated by commas.

             See the discussion of the -certopt option in the x509 command.

     -set_serial n
             Serial number to use when outputting a self-signed certificate.
             This may be specified as a decimal value or a hex value if pre‐
             ceded by ‘0x’.  It is possible to use negative serial numbers but
             this is not recommended.

     -subj arg
             Replaces subject field of input request with specified data and
             outputs modified request.  The arg must be formatted as
             /type0=value0/type1=value1/type2=...; characters may be escaped
             by ‘\’ (backslash); no spaces are skipped.

     -subject
             Prints out the request subject (or certificate subject if -x509
             is specified.

     -text   Prints out the certificate request in text form.

     -utf8   This option causes field values to be interpreted as UTF8
             strings; by default they are interpreted as ASCII.  This means
             that the field values, whether prompted from a terminal or ob‐
             tained from a configuration file, must be valid UTF8 strings.

     -verbose
             Print extra details about the operations being performed.

     -verify
             Verifies the signature on the request.

     -x509   This option outputs a self-signed certificate instead of a cer‐
             tificate request.  This is typically used to generate a test cer‐
             tificate or a self-signed root CA.  The extensions added to the
             certificate (if any) are specified in the configuration file.
             Unless specified using the -set_serial option, 0 will be used for
             the serial number.

REQ CONFIGURATION FILE FORMAT
     The configuration options are specified in the req section of the config‐
     uration file.  As with all configuration files, if no value is specified
     in the specific section (i.e. req) then the initial unnamed or default
     section is searched too.

     The options available are described in detail below.

     attributes
           This specifies the section containing any request attributes: its
           format is the same as distinguished_name.  Typically these may con‐
           tain the challengePassword or unstructuredName types.  They are
           currently ignored by OpenSSL's request signing utilities, but some
           CAs might want them.

     default_bits
           This specifies the default key size in bits.  If not specified,
           2048 is used.  It is used if the -new option is used.  It can be
           overridden by using the -newkey option.

     default_keyfile
           This is the default file to write a private key to.  If not speci‐
           fied, the key is written to standard output.  This can be overrid‐
           den by the -keyout option.

     default_md
           This option specifies the digest algorithm to use.  Possible values
           include md5, sha1 and sha256.  If not present, SHA256 is used.
           This option can be overridden on the command line.

     distinguished_name
           This specifies the section containing the distinguished name fields
           to prompt for when generating a certificate or certificate request.
           The format is described in the next section.

     encrypt_key
           If this is set to no and a private key is generated, it is not en‐
           crypted.  This is equivalent to the -nodes command line option.
           For compatibility, encrypt_rsa_key is an equivalent option.

     input_password | output_password
           The passwords for the input private key file (if present) and the
           output private key file (if one will be created).  The command line
           options -passin and -passout override the configuration file val‐
           ues.

     oid_file
           This specifies a file containing additional OBJECT IDENTIFIERS.
           Each line of the file should consist of the numerical form of the
           object identifier, followed by whitespace, then the short name fol‐
           lowed by whitespace and finally the long name.

     oid_section
           This specifies a section in the configuration file containing extra
           object identifiers.  Each line should consist of the short name of
           the object identifier followed by ‘=’ and the numerical form.  The
           short and long names are the same when this option is used.

     prompt
           If set to the value no, this disables prompting of certificate
           fields and just takes values from the config file directly.  It
           also changes the expected format of the distinguished_name and
           attributes sections.

     req_extensions
           This specifies the configuration file section containing a list of
           extensions to add to the certificate request.  It can be overridden
           by the -reqexts command line switch.

     string_mask
           This option limits the string types for encoding certain fields.
           The following values may be used, limiting strings to the indicated
           types:

           utf8only     UTF8String. This is the default, as recommended by
                        PKIX in RFC 2459.

           default      PrintableString, IA5String, T61String, BMPString,
                        UTF8String.

           pkix         PrintableString, IA5String, BMPString, UTF8String.
                        This was inspired by the PKIX recommendation in RFC
                        2459 for certificates generated before 2004, but dif‐
                        fers by also permitting IA5String.

           nombstr      PrintableString, IA5String, T61String,
                        UniversalString.  This was a workaround for some an‐
                        cient software that had problems with the variable-
                        sized BMPString and UTF8String types.

           MASK:number  This is an explicit bitmask of permitted types, where
                        number is a C-style hex, decimal, or octal number
                        that's a bit-wise OR of B_ASN1_* values from
                        <openssl/asn1.h>.

     utf8  If set to the value yes, then field values are interpreted as UTF8
           strings; by default they are interpreted as ASCII.  This means that
           the field values, whether prompted from a terminal or obtained from
           a configuration file, must be valid UTF8 strings.

     x509_extensions
           This specifies the configuration file section containing a list of
           extensions to add to a certificate generated when the -x509 switch
           is used.  It can be overridden by the -extensions command line
           switch.

REQ DISTINGUISHED NAME AND ATTRIBUTE SECTION FORMAT
     There are two separate formats for the distinguished name and attribute
     sections.  If the -prompt option is set to no, then these sections just
     consist of field names and values: for example,

           CN=My Name
           OU=My Organization
           emailAddress=someone@somewhere.org

     This allows external programs (e.g. GUI based) to generate a template
     file with all the field names and values and just pass it to req.  An ex‐
     ample of this kind of configuration file is contained in the REQ EXAMPLES
     section.

     Alternatively if the -prompt option is absent or not set to no, then the
     file contains field prompting information.  It consists of lines of the
     form:

           fieldName="prompt"
           fieldName_default="default field value"
           fieldName_min= 2
           fieldName_max= 4

     "fieldName" is the field name being used, for example commonName (or CN).
     The "prompt" string is used to ask the user to enter the relevant de‐
     tails.  If the user enters nothing, the default value is used; if no de‐
     fault value is present, the field is omitted.  A field can still be omit‐
     ted if a default value is present, if the user just enters the ‘.’ char‐
     acter.

     The number of characters entered must be between the fieldName_min and
     fieldName_max limits: there may be additional restrictions based on the
     field being used (for example countryName can only ever be two characters
     long and must fit in a PrintableString).

     Some fields (such as organizationName) can be used more than once in a
     DN.  This presents a problem because configuration files will not recog‐
     nize the same name occurring twice.  To avoid this problem, if the
     fieldName contains some characters followed by a full stop, they will be
     ignored.  So, for example, a second organizationName can be input by
     calling it "1.organizationName".

     The actual permitted field names are any object identifier short or long
     names.  These are compiled into OpenSSL and include the usual values such
     as commonName, countryName, localityName, organizationName,
     organizationUnitName, stateOrProvinceName.  Additionally, emailAddress is
     included as well as name, surname, givenName initials and dnQualifier.

     Additional object identifiers can be defined with the oid_file or
     oid_section options in the configuration file.  Any additional fields
     will be treated as though they were a DirectoryString.

REQ EXAMPLES
     Examine and verify a certificate request:

           $ openssl req -in req.pem -text -verify -noout

     Create a private key and then generate a certificate request from it:

           $ openssl genrsa -out key.pem 2048
           $ openssl req -new -key key.pem -out req.pem

     The same but just using req:

           $ openssl req -newkey rsa:2048 -keyout key.pem -out req.pem

     Generate a self-signed root certificate:

           $ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out req.pem

     Example of a file pointed to by the oid_file option:

           1.2.3.4        shortName       A longer Name
           1.2.3.6        otherName       Other longer Name

     Example of a section pointed to by oid_section making use of variable ex‐
     pansion:

           testoid1=1.2.3.5
           testoid2=${testoid1}.6

     Sample configuration file prompting for field values:

      [ req ]
      default_bits           = 1024
      default_keyfile        = privkey.pem
      distinguished_name     = req_distinguished_name
      attributes             = req_attributes
      x509_extensions        = v3_ca

      dirstring_type = nobmp

      [ req_distinguished_name ]
      countryName                    = Country Name (2 letter code)
      countryName_default            = AU
      countryName_min                = 2
      countryName_max                = 2

      localityName                   = Locality Name (eg, city)

      organizationalUnitName         = Organizational Unit Name (eg, section)

      commonName                     = Common Name (eg, YOUR name)
      commonName_max                 = 64

      emailAddress                   = Email Address
      emailAddress_max               = 40

      [ req_attributes ]
      challengePassword              = A challenge password
      challengePassword_min          = 4
      challengePassword_max          = 20

      [ v3_ca ]

      subjectKeyIdentifier=hash
      authorityKeyIdentifier=keyid:always,issuer:always
      basicConstraints = CA:true

     Sample configuration containing all field values:


      [ req ]
      default_bits           = 1024
      default_keyfile        = keyfile.pem
      distinguished_name     = req_distinguished_name
      attributes             = req_attributes
      prompt                 = no
      output_password        = mypass

      [ req_distinguished_name ]
      C                      = GB
      ST                     = Test State or Province
      L                      = Test Locality
      O                      = Organization Name
      OU                     = Organizational Unit Name
      CN                     = Common Name
      emailAddress           = test@email.address

      [ req_attributes ]
      challengePassword              = A challenge password

REQ NOTES
     The header and footer lines in the PEM format are normally:

           -----BEGIN CERTIFICATE REQUEST-----
           -----END CERTIFICATE REQUEST-----

     Some software (some versions of Netscape certificate server) instead
     needs:

           -----BEGIN NEW CERTIFICATE REQUEST-----
           -----END NEW CERTIFICATE REQUEST-----

     which is produced with the -newhdr option but is otherwise compatible.
     Either form is accepted transparently on input.

     The certificate requests generated by Xenroll with MSIE have extensions
     added.  It includes the keyUsage extension which determines the type of
     key (signature only or general purpose) and any additional OIDs entered
     by the script in an extendedKeyUsage extension.

REQ DIAGNOSTICS
     The following messages are frequently asked about:

           Using configuration from /some/path/openssl.cnf
           Unable to load config info

     This is followed some time later by...

           unable to find 'distinguished_name' in config
           problems making Certificate Request

     The first error message is the clue: it can't find the configuration
     file!  Certain operations (like examining a certificate request) don't
     need a configuration file so its use isn't enforced.  Generation of cer‐
     tificates or requests, however, do need a configuration file.  This could
     be regarded as a bug.

     Another puzzling message is this:

           Attributes:
               a0:00

     This is displayed when no attributes are present and the request includes
     the correct empty SET OF structure (the DER encoding of which is 0xa0
     0x00).  If you just see:

           Attributes:

     then the SET OF is missing and the encoding is technically invalid (but
     it is tolerated).  See the description of the command line option
     -asn1-kludge for more information.

REQ ENVIRONMENT VARIABLES
     The variable OPENSSL_CONF, if defined, allows an alternative configura‐
     tion file location to be specified; it will be overridden by the -config
     command line switch if it is present.

REQ BUGS
     OpenSSL's handling of T61Strings (aka TeletexStrings) is broken: it ef‐
     fectively treats them as ISO 8859-1 (Latin 1); Netscape and MSIE have
     similar behaviour.  This can cause problems if you need characters that
     aren't available in PrintableStrings and you don't want to or can't use
     BMPStrings.

     As a consequence of the T61String handling, the only correct way to rep‐
     resent accented characters in OpenSSL is to use a BMPString: unfortu‐
     nately Netscape currently chokes on these.  If you have to use accented
     characters with Netscape and MSIE then you currently need to use the in‐
     valid T61String form.

     The current prompting is not very friendly.  It doesn't allow you to con‐
     firm what you've just entered.  Other things, like extensions in certifi‐
     cate requests, are statically defined in the configuration file.  Some of
     these, like an email address in subjectAltName, should be input by the
     user.

RSA
     openssl rsa [-aes128 | -aes192 | -aes256 | -des | -des3] [-check]
     [-in file] [-inform DER | NET | PEM] [-modulus] [-noout] [-out file]
     [-outform DER | NET | PEM] [-passin arg] [-passout arg] [-pubin]
     [-pubout] [-sgckey] [-text]

     The rsa command processes RSA keys.  They can be converted between vari‐
     ous forms and their components printed out.

     Note: this command uses the traditional SSLeay compatible format for pri‐
     vate key encryption: newer applications should use the more secure PKCS#8
     format using the pkcs8 utility.

     The options are as follows:

     -aes128 | -aes192 | -aes256 | -des | -des3
             These options encrypt the private key with the AES, DES, or the
             triple DES ciphers, respectively, before outputting it.  A pass
             phrase is prompted for.  If none of these options are specified,
             the key is written in plain text.  This means that using the rsa
             utility to read in an encrypted key with no encryption option can
             be used to remove the pass phrase from a key, or by setting the
             encryption options it can be used to add or change the pass
             phrase.  These options can only be used with PEM format output
             files.

     -check  This option checks the consistency of an RSA private key.

     -in file
             This specifies the input file to read a key from, or standard in‐
             put if this option is not specified.  If the key is encrypted, a
             pass phrase will be prompted for.

     -inform DER | NET | PEM
             This specifies the input format.  The DER argument uses an ASN1
             DER-encoded form compatible with the PKCS#1 RSAPrivateKey or Sub‐
             jectPublicKeyInfo format.  The PEM form is the default format: it
             consists of the DER format base64-encoded with additional header
             and footer lines.  On input PKCS#8 format private keys are also
             accepted.  The NET form is a format described in the RSA NOTES
             section.

     -noout  This option prevents output of the encoded version of the key.

     -modulus
             This option prints out the value of the modulus of the key.

     -out file
             This specifies the output file to write a key to, or standard
             output if this option is not specified.  If any encryption op‐
             tions are set, a pass phrase will be prompted for.  The output
             filename should not be the same as the input filename.

     -outform DER | NET | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -passin arg
             The key password source.

     -passout arg
             The output file password source.

     -pubin  By default, a private key is read from the input file; with this
             option a public key is read instead.

     -pubout
             By default, a private key is output; with this option a public
             key will be output instead.  This option is automatically set if
             the input is a public key.

     -sgckey
             Use the modified NET algorithm used with some versions of Micro‐
             soft IIS and SGC keys.

     -text   Prints out the various public or private key components in plain
             text, in addition to the encoded version.

RSA NOTES
     The PEM private key format uses the header and footer lines:

           -----BEGIN RSA PRIVATE KEY-----
           -----END RSA PRIVATE KEY-----

     The PEM public key format uses the header and footer lines:

           -----BEGIN PUBLIC KEY-----
           -----END PUBLIC KEY-----

     The NET form is a format compatible with older Netscape servers and Mi‐
     crosoft IIS .key files; this uses unsalted RC4 for its encryption.  It is
     not very secure and so should only be used when necessary.

     Some newer version of IIS have additional data in the exported .key
     files.  To use these with the rsa utility, view the file with a binary
     editor and look for the string "private-key", then trace back to the byte
     sequence 0x30, 0x82 (this is an ASN1 SEQUENCE).  Copy all the data from
     this point onwards to another file and use that as the input to the rsa
     utility with the -inform NET option.  If there is an error after entering
     the password, try the -sgckey option.

RSA EXAMPLES
     To remove the pass phrase on an RSA private key:

           $ openssl rsa -in key.pem -out keyout.pem

     To encrypt a private key using triple DES:

           $ openssl rsa -in key.pem -des3 -out keyout.pem

     To convert a private key from PEM to DER format:

           $ openssl rsa -in key.pem -outform DER -out keyout.der

     To print out the components of a private key to standard output:

           $ openssl rsa -in key.pem -text -noout

     To just output the public part of a private key:

           $ openssl rsa -in key.pem -pubout -out pubkey.pem

RSA BUGS
     The command line password arguments don't currently work with NET format.

     There should be an option that automatically handles .key files, without
     having to manually edit them.

RSAUTL
     openssl rsautl [-asn1parse] [-certin] [-decrypt] [-encrypt] [-hexdump]
     [-in file] [-inkey file] [-keyform DER | PEM]
     [-oaep | -pkcs | -raw | -ssl] [-out file] [-pubin] [-sign] [-verify]

     The rsautl command can be used to sign, verify, encrypt and decrypt data
     using the RSA algorithm.

     The options are as follows:

     -asn1parse
             Asn1parse the output data; this is useful when combined with the
             -verify option.

     -certin
             The input is a certificate containing an RSA public key.

     -decrypt
             Decrypt the input data using an RSA private key.

     -encrypt
             Encrypt the input data using an RSA public key.

     -hexdump
             Hex dump the output data.

     -in file
             This specifies the input file to read data from, or standard in‐
             put if this option is not specified.

     -inkey file
             The input key file, by default it should be an RSA private key.

     -keyform DER | PEM
             Private ket format.  Default is PEM.

     -oaep | -pkcs | -raw | -ssl
             The padding to use: PKCS#1 OAEP, PKCS#1 v1.5 (the default), or no
             padding, respectively.  For signatures, only -pkcs and -raw can
             be used.

     -out file
             Specifies the output file to write to, or standard output by de‐
             fault.

     -pubin  The input file is an RSA public key.

     -sign   Sign the input data and output the signed result.  This requires
             an RSA private key.

     -verify
             Verify the input data and output the recovered data.

RSAUTL NOTES
     rsautl, because it uses the RSA algorithm directly, can only be used to
     sign or verify small pieces of data.

RSAUTL EXAMPLES
     Sign some data using a private key:

           $ openssl rsautl -sign -in file -inkey key.pem -out sig

     Recover the signed data:

           $ openssl rsautl -verify -in sig -inkey key.pem

     Examine the raw signed data:

      $ openssl rsautl -verify -in file -inkey key.pem -raw -hexdump

      0000 - 00 01 ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0010 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0020 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0030 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0040 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0050 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0060 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
      0070 - ff ff ff ff 00 68 65 6c-6c 6f 20 77 6f 72 6c 64   .....hello world

     The PKCS#1 block formatting is evident from this.  If this was done using
     encrypt and decrypt, the block would have been of type 2 (the second
     byte) and random padding data visible instead of the 0xff bytes.

     It is possible to analyse the signature of certificates using this util‐
     ity in conjunction with asn1parse.  Consider the self-signed example in
     certs/pca-cert.pem: running asn1parse as follows yields:

      $ openssl asn1parse -in pca-cert.pem

         0:d=0  hl=4 l= 742 cons: SEQUENCE
         4:d=1  hl=4 l= 591 cons:  SEQUENCE
         8:d=2  hl=2 l=   3 cons:   cont [ 0 ]
        10:d=3  hl=2 l=   1 prim:    INTEGER           :02
        13:d=2  hl=2 l=   1 prim:   INTEGER           :00
        16:d=2  hl=2 l=  13 cons:   SEQUENCE
        18:d=3  hl=2 l=   9 prim:    OBJECT            :md5WithRSAEncryption
        29:d=3  hl=2 l=   0 prim:    NULL
        31:d=2  hl=2 l=  92 cons:   SEQUENCE
        33:d=3  hl=2 l=  11 cons:    SET
        35:d=4  hl=2 l=   9 cons:     SEQUENCE
        37:d=5  hl=2 l=   3 prim:      OBJECT            :countryName
        42:d=5  hl=2 l=   2 prim:      PRINTABLESTRING   :AU
       ....
       599:d=1  hl=2 l=  13 cons:  SEQUENCE
       601:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption
       612:d=2  hl=2 l=   0 prim:   NULL
       614:d=1  hl=3 l= 129 prim:  BIT STRING

     The final BIT STRING contains the actual signature.  It can be extracted
     with:

           $ openssl asn1parse -in pca-cert.pem -out sig -noout -strparse 614

     The certificate public key can be extracted with:

           $ openssl x509 -in test/testx509.pem -pubkey -noout >pubkey.pem

     The signature can be analysed with:

      $ openssl rsautl -in sig -verify -asn1parse -inkey pubkey.pem -pubin

         0:d=0  hl=2 l=  32 cons: SEQUENCE
         2:d=1  hl=2 l=  12 cons:  SEQUENCE
         4:d=2  hl=2 l=   8 prim:   OBJECT            :md5
        14:d=2  hl=2 l=   0 prim:   NULL
        16:d=1  hl=2 l=  16 prim:  OCTET STRING
        0000 - f3 46 9e aa 1a 4a 73 c9-37 ea 93 00 48 25 08 b5  .F...Js.7...H%..

     This is the parsed version of an ASN1 DigestInfo structure.  It can be
     seen that the digest used was MD5.  The actual part of the certificate
     that was signed can be extracted with:

           $ openssl asn1parse -in pca-cert.pem -out tbs -noout -strparse 4

     and its digest computed with:

           $ openssl md5 -c tbs
           MD5(tbs)= f3:46:9e:aa:1a:4a:73:c9:37:ea:93:00:48:25:08:b5

     which it can be seen agrees with the recovered value above.

S_CLIENT
     openssl s_client [-4 | -6] [-bugs] [-CAfile file] [-CApath directory]
     [-cert file] [-check_ss_sig] [-cipher cipherlist] [-connect host:port |
     host/port] [-crl_check] [-crl_check_all] [-crlf] [-debug] [-extended_crl]
     [-ign_eof] [-ignore_critical] [-issuer_checks] [-key keyfile] [-msg]
     [-nbio] [-nbio_test] [-no_ticket] [-no_tls1] [-no_tls1_1] [-no_tls1_2]
     [-pause] [-policy_check] [-prexit] [-proxy host:port] [-psk key]
     [-psk_identity identity] [-quiet] [-reconnect] [-servername name]
     [-showcerts] [-starttls protocol] [-state] [-tls1] [-tls1_1] [-tls1_2]
     [-tlsextdebug] [-verify depth] [-x509_strict] [-xmpphost host]

     The s_client command implements a generic SSL/TLS client which connects
     to a remote host using SSL/TLS.  It is a very useful diagnostic tool for
     SSL servers.

     The options are as follows:

     -4      Specify that s_client should attempt connections using IPv4 only.

     -6      Specify that s_client should attempt connections using IPv6 only.

     -bugs   There are several known bugs in SSL and TLS implementations.
             Adding this option enables various workarounds.

     -CAfile file
             A file containing trusted certificates to use during server au‐
             thentication and to use when attempting to build the client cer‐
             tificate chain.

     -CApath directory
             The directory to use for server certificate verification.  This
             directory must be in "hash format"; see -verify for more informa‐
             tion.  These are also used when building the client certificate
             chain.

     -cert file
             The certificate to use, if one is requested by the server.  The
             default is not to use a certificate.

     -check_ss_sig, -crl_check, -crl_check_all, -extended_crl,
             -ignore_critical, -issuer_checks, -policy_check, -x509_strict
             Set various certificate chain validation options.  See the VERIFY
             command for details.

     -cipher cipherlist
             This allows the cipher list sent by the client to be modified.
             Although the server determines which cipher suite is used, it
             should take the first supported cipher in the list sent by the
             client.  See the CIPHERS section above for more information.

     -connect host:port | host/port
             This specifies the host and optional port to connect to.  If not
             specified, an attempt is made to connect to the local host on
             port 4433.  Alternatively, the host and port pair may be sepa‐
             rated using a forward-slash character.  This form is useful for
             numeric IPv6 addresses.

     -crlf   This option translates a line feed from the terminal into CR+LF
             as required by some servers.

     -debug  Print extensive debugging information including a hex dump of all
             traffic.

     -ign_eof
             Inhibit shutting down the connection when end of file is reached
             in the input.

     -key keyfile
             The private key to use.  If not specified, the certificate file
             will be used.

     -msg    Show all protocol messages with hex dump.

     -nbio   Turns on non-blocking I/O.

     -nbio_test
             Tests non-blocking I/O.

     -no_tls1 | -no_tls1_1 | -no_tls1_2
             By default, the initial handshake uses a method which should be
             compatible with servers supporting any version of TLS.  These op‐
             tions disable the use of TLS1.0, 1.1, and 1.2, respectively.

             Unfortunately there are a lot of ancient and broken servers in
             use which cannot handle this technique and will fail to connect.

     -no_ticket
             Disable RFC 4507 session ticket support.

     -pause  Pauses 1 second between each read and write call.

     -prexit
             Print session information when the program exits.  This will al‐
             ways attempt to print out information even if the connection
             fails.  Normally, information will only be printed out once if
             the connection succeeds.  This option is useful because the ci‐
             pher in use may be renegotiated or the connection may fail be‐
             cause a client certificate is required or is requested only after
             an attempt is made to access a certain URL.  Note: the output
             produced by this option is not always accurate because a connec‐
             tion might never have been established.

     -proxy host:port
             Use the HTTP proxy at host and port.  The connection to the proxy
             is done in cleartext and the -connect argument is given to the
             proxy.  If not specified, localhost is used as final destination.
             After that, switch the connection through the proxy to the desti‐
             nation to TLS.

     -psk key
             Use the PSK key key when using a PSK cipher suite.  The key is
             given as a hexadecimal number without the leading 0x, for example
             -psk 1a2b3c4d.

     -psk_identity identity
             Use the PSK identity identity when using a PSK cipher suite.

     -quiet  Inhibit printing of session and certificate information.  This
             implicitly turns on -ign_eof as well.

     -reconnect
             Reconnects to the same server 5 times using the same session ID;
             this can be used as a test that session caching is working.

     -servername name
             Include the TLS Server Name Indication (SNI) extension in the
             ClientHello message, using the specified server name.

     -showcerts
             Display the whole server certificate chain: normally only the
             server certificate itself is displayed.

     -starttls protocol
             Send the protocol-specific message(s) to switch to TLS for commu‐
             nication.  protocol is a keyword for the intended protocol.  Cur‐
             rently, the supported keywords are "ftp", "imap", "smtp", "pop3",
             and "xmpp".

     -state  Prints out the SSL session states.

     -tls1 | -tls1_1 | -tls1_2
             Permit only TLS1.0, 1.1, or 1.2, respectively.

     -tlsextdebug
             Print out a hex dump of any TLS extensions received from the
             server.

     -verify depth
             The verify depth to use.  This specifies the maximum length of
             the server certificate chain and turns on server certificate ver‐
             ification.  Currently the verify operation continues after errors
             so all the problems with a certificate chain can be seen.  As a
             side effect the connection will never fail due to a server cer‐
             tificate verify failure.

     -xmpphost hostname
             This option, when used with -starttls xmpp, specifies the host
             for the "to" attribute of the stream element.  If this option is
             not specified then the host specified with -connect will be used.

S_CLIENT CONNECTED COMMANDS
     If a connection is established with an SSL server, any data received from
     the server is displayed and any key presses will be sent to the server.
     When used interactively (which means neither -quiet nor -ign_eof have
     been given), the session will be renegotiated if the line begins with an
     R; if the line begins with a Q or if end of file is reached, the connec‐
     tion will be closed down.

S_CLIENT NOTES
     s_client can be used to debug SSL servers.  To connect to an SSL HTTP
     server the command:

           $ openssl s_client -connect servername:443

     would typically be used (HTTPS uses port 443).  If the connection suc‐
     ceeds, an HTTP command can be given such as "GET" to retrieve a web page.

     If the handshake fails, there are several possible causes; if it is noth‐
     ing obvious like no client certificate, then the -bugs, -tls1, -tls1_1,
     -tls1_2, -no_tls1, -no_tls1_1, and -no_tls1_2 options can be tried in
     case it is a buggy server.

     A frequent problem when attempting to get client certificates working is
     that a web client complains it has no certificates or gives an empty list
     to choose from.  This is normally because the server is not sending the
     client's certificate authority in its "acceptable CA list" when it re‐
     quests a certificate.  By using s_client the CA list can be viewed and
     checked.  However some servers only request client authentication after a
     specific URL is requested.  To obtain the list in this case it is neces‐
     sary to use the -prexit option and send an HTTP request for an appropri‐
     ate page.

     If a certificate is specified on the command line using the -cert option,
     it will not be used unless the server specifically requests a client cer‐
     tificate.  Therefore merely including a client certificate on the command
     line is no guarantee that the certificate works.

     If there are problems verifying a server certificate, the -showcerts op‐
     tion can be used to show the whole chain.

     Compression methods are only supported for -tls1.

S_CLIENT BUGS
     Because this program has a lot of options and also because some of the
     techniques used are rather old, the C source of s_client is rather hard
     to read and not a model of how things should be done.  A typical SSL
     client program would be much simpler.

     The -verify option should really exit if the server verification fails.

     The -prexit option is a bit of a hack.  We should really report informa‐
     tion whenever a session is renegotiated.

S_SERVER
     openssl s_server [-accept port] [-bugs] [-CAfile file]
     [-CApath directory] [-cert file] [-cipher cipherlist] [-context id]
     [-crl_check] [-crl_check_all] [-crlf] [-dcert file] [-debug]
     [-dhparam file] [-dkey file] [-hack] [-HTTP] [-id_prefix arg]
     [-key keyfile] [-msg] [-nbio] [-nbio_test] [-no_dhe] [-no_tls1]
     [-no_tls1_1] [-no_tls1_2] [-no_tmp_rsa] [-nocert] [-psk key]
     [-psk_hint hint] [-quiet] [-serverpref] [-state] [-tls1] [-tls1_1]
     [-tls1_2] [-Verify depth] [-verify depth] [-WWW] [-www]

     The s_server command implements a generic SSL/TLS server which listens
     for connections on a given port using SSL/TLS.

     The options are as follows:

     -accept port
             The TCP port to listen on for connections.  If not specified,
             4433 is used.

     -bugs   There are several known bugs in SSL and TLS implementations.
             Adding this option enables various workarounds.

     -CAfile file
             A file containing trusted certificates to use during client au‐
             thentication and to use when attempting to build the server cer‐
             tificate chain.  The list is also used in the list of acceptable
             client CAs passed to the client when a certificate is requested.

     -CApath directory
             The directory to use for client certificate verification.  This
             directory must be in "hash format"; see -verify for more informa‐
             tion.  These are also used when building the server certificate
             chain.

     -cert file
             The certificate to use; most server's cipher suites require the
             use of a certificate and some require a certificate with a cer‐
             tain public key type: for example the DSS cipher suites require a
             certificate containing a DSS (DSA) key.  If not specified, the
             file server.pem will be used.

     -cipher cipherlist
             This allows the cipher list used by the server to be modified.
             When the client sends a list of supported ciphers, the first
             client cipher also included in the server list is used.  Because
             the client specifies the preference order, the order of the
             server cipherlist is irrelevant.  See the CIPHERS section for
             more information.

     -context id
             Sets the SSL context ID.  It can be given any string value.  If
             this option is not present, a default value will be used.

     -crl_check, -crl_check_all
             Check the peer certificate has not been revoked by its CA.  The
             CRLs are appended to the certificate file.  With the
             -crl_check_all option, all CRLs of all CAs in the chain are
             checked.

     -crlf   This option translates a line feed from the terminal into CR+LF.

     -dcert file, -dkey file
             Specify an additional certificate and private key; these behave
             in the same manner as the -cert and -key options except there is
             no default if they are not specified (no additional certificate
             or key is used).  As noted above some cipher suites require a
             certificate containing a key of a certain type.  Some cipher
             suites need a certificate carrying an RSA key and some a DSS
             (DSA) key.  By using RSA and DSS certificates and keys, a server
             can support clients which only support RSA or DSS cipher suites
             by using an appropriate certificate.

     -debug  Print extensive debugging information including a hex dump of all
             traffic.

     -dhparam file
             The DH parameter file to use.  The ephemeral DH cipher suites
             generate keys using a set of DH parameters.  If not specified, an
             attempt is made to load the parameters from the server certifi‐
             cate file.  If this fails, a static set of parameters hard coded
             into the s_server program will be used.

     -hack   This option enables a further workaround for some early Netscape
             SSL code (?).

     -HTTP   Emulates a simple web server.  Pages will be resolved relative to
             the current directory; for example if the URL
             https://myhost/page.html is requested, the file ./page.html will
             be loaded.  The files loaded are assumed to contain a complete
             and correct HTTP response (lines that are part of the HTTP re‐
             sponse line and headers must end with CRLF).

     -id_prefix arg
             Generate SSL/TLS session IDs prefixed by arg.  This is mostly
             useful for testing any SSL/TLS code (e.g. proxies) that wish to
             deal with multiple servers, when each of which might be generat‐
             ing a unique range of session IDs (e.g. with a certain prefix).

     -key keyfile
             The private key to use.  If not specified, the certificate file
             will be used.

     -msg    Show all protocol messages with hex dump.

     -nbio   Turns on non-blocking I/O.

     -nbio_test
             Tests non-blocking I/O.

     -no_dhe
             If this option is set, no DH parameters will be loaded, effec‐
             tively disabling the ephemeral DH cipher suites.

     -no_tls1 | -no_tls1_1 | -no_tls1_2
             By default, the initial handshake uses a method which should be
             compatible with clients supporting any version of TLS.  These op‐
             tions disable the use of TLS1.0, 1.1, and 1.2, respectively.

     -no_tmp_rsa
             Certain export cipher suites sometimes use a temporary RSA key;
             this option disables temporary RSA key generation.

     -nocert
             If this option is set, no certificate is used.  This restricts
             the cipher suites available to the anonymous ones (currently just
             anonymous DH).

     -psk key
             Use the PSK key key when using a PSK cipher suite.  The key is
             given as a hexadecimal number without the leading 0x, for example
             -psk 1a2b3c4d.

     -psk_hint hint
             Use the PSK identity hint hint when using a PSK cipher suite.

     -quiet  Inhibit printing of session and certificate information.

     -serverpref
             Use server's cipher preferences.

     -state  Prints out the SSL session states.

     -tls1 | -tls1_1 | -tls1_2
             Permit only TLS1.0, 1.1, or 1.2, respectively.

     -WWW    Emulates a simple web server.  Pages will be resolved relative to
             the current directory; for example if the URL
             https://myhost/page.html is requested, the file ./page.html will
             be loaded.

     -www    Sends a status message back to the client when it connects.  This
             includes lots of information about the ciphers used and various
             session parameters.  The output is in HTML format so this option
             will normally be used with a web browser.

     -Verify depth, -verify depth
             The verify depth to use.  This specifies the maximum length of
             the client certificate chain and makes the server request a cer‐
             tificate from the client.  With the -Verify option, the client
             must supply a certificate or an error occurs.  With the -verify
             option, a certificate is requested but the client does not have
             to send one.

S_SERVER CONNECTED COMMANDS
     If a connection request is established with an SSL client and neither the
     -www nor the -WWW option has been used, then normally any data received
     from the client is displayed and any key presses will be sent to the
     client.

     Certain single letter commands are also recognized which perform special
     operations: these are listed below.

     P     Send some plain text down the underlying TCP connection: this
           should cause the client to disconnect due to a protocol violation.

     Q     End the current SSL connection and exit.

     q     End the current SSL connection, but still accept new connections.

     R     Renegotiate the SSL session and request a client certificate.

     r     Renegotiate the SSL session.

     S     Print out some session cache status information.

S_SERVER NOTES
     s_server can be used to debug SSL clients.  To accept connections from a
     web browser the command:

           $ openssl s_server -accept 443 -www

     can be used, for example.

     Most web browsers (in particular Netscape and MSIE) only support RSA ci‐
     pher suites, so they cannot connect to servers which don't use a certifi‐
     cate carrying an RSA key or a version of OpenSSL with RSA disabled.

     Although specifying an empty list of CAs when requesting a client cer‐
     tificate is strictly speaking a protocol violation, some SSL clients in‐
     terpret this to mean any CA is acceptable.  This is useful for debugging
     purposes.

     The session parameters can printed out using the sess_id program.

S_SERVER BUGS
     Because this program has a lot of options and also because some of the
     techniques used are rather old, the C source of s_server is rather hard
     to read and not a model of how things should be done.  A typical SSL
     server program would be much simpler.

     The output of common ciphers is wrong: it just gives the list of ciphers
     that OpenSSL recognizes and the client supports.

     There should be a way for the s_server program to print out details of
     any unknown cipher suites a client says it supports.

S_TIME
     openssl s_time [-bugs] [-CAfile file] [-CApath directory] [-cert file]
     [-cipher cipherlist] [-connect host:port] [-key keyfile] [-nbio] [-new]
     [-no_shutdown] [-reuse] [-time seconds] [-verify depth] [-www page]

     The s_client command implements a generic SSL/TLS client which connects
     to a remote host using SSL/TLS.  It can request a page from the server
     and includes the time to transfer the payload data in its timing measure‐
     ments.  It measures the number of connections within a given timeframe,
     the amount of data transferred (if any), and calculates the average time
     spent for one connection.

     The options are as follows:

     -bugs   There are several known bugs in SSL and TLS implementations.
             Adding this option enables various workarounds.

     -CAfile file
             A file containing trusted certificates to use during server au‐
             thentication and to use when attempting to build the client cer‐
             tificate chain.

     -CApath directory
             The directory to use for server certificate verification.  This
             directory must be in "hash format"; see verify for more informa‐
             tion.  These are also used when building the client certificate
             chain.

     -cert file
             The certificate to use, if one is requested by the server.  The
             default is not to use a certificate.  The file is in PEM format.

     -cipher cipherlist
             This allows the cipher list sent by the client to be modified.
             Although the server determines which cipher suite is used, it
             should take the first supported cipher in the list sent by the
             client.  See the ciphers command for more information.

     -connect host:port
             This specifies the host and optional port to connect to.

     -key keyfile
             The private key to use.  If not specified, the certificate file
             will be used.  The file is in PEM format.

     -nbio   Turns on non-blocking I/O.

     -new    Performs the timing test using a new session ID for each connec‐
             tion.  If neither -new nor -reuse are specified, they are both on
             by default and executed in sequence.

     -no_shutdown
             Shut down the connection without sending a “close notify” shut‐
             down alert to the server.

     -reuse  Performs the timing test using the same session ID; this can be
             used as a test that session caching is working.  If neither -new
             nor -reuse are specified, they are both on by default and exe‐
             cuted in sequence.

     -time seconds
             Specifies how long (in seconds) s_time should establish connec‐
             tions and optionally transfer payload data from a server.  The
             default is 30 seconds.  Server and client performance and the
             link speed determine how many connections s_time can establish.

     -verify depth
             The verify depth to use.  This specifies the maximum length of
             the server certificate chain and turns on server certificate ver‐
             ification.  Currently the verify operation continues after er‐
             rors, so all the problems with a certificate chain can be seen.
             As a side effect, the connection will never fail due to a server
             certificate verify failure.

     -www page
             This specifies the page to GET from the server.  A value of ‘/’
             gets the index.htm[l] page.  If this parameter is not specified,
             s_time will only perform the handshake to establish SSL connec‐
             tions but not transfer any payload data.

S_TIME NOTES
     s_client can be used to measure the performance of an SSL connection.  To
     connect to an SSL HTTP server and get the default page the command

           $ openssl s_time -connect servername:443 -www / -CApath yourdir \
                   -CAfile yourfile.pem -cipher commoncipher

     would typically be used (HTTPS uses port 443).  “commoncipher” is a ci‐
     pher to which both client and server can agree; see the ciphers command
     for details.

     If the handshake fails, there are several possible causes: if it is noth‐
     ing obvious like no client certificate, the -bugs option can be tried in
     case it is a buggy server.

     A frequent problem when attempting to get client certificates working is
     that a web client complains it has no certificates or gives an empty list
     to choose from.  This is normally because the server is not sending the
     clients certificate authority in its "acceptable CA list" when it re‐
     quests a certificate.  By using s_client, the CA list can be viewed and
     checked.  However some servers only request client authentication after a
     specific URL is requested.  To obtain the list in this case, it is neces‐
     sary to use the -prexit option of s_client and send an HTTP request for
     an appropriate page.

     If a certificate is specified on the command line using the -cert option,
     it will not be used unless the server specifically requests a client cer‐
     tificate.  Therefore merely including a client certificate on the command
     line is no guarantee that the certificate works.

S_TIME BUGS
     Because this program does not have all the options of the s_client pro‐
     gram to turn protocols on and off, you may not be able to measure the
     performance of all protocols with all servers.

     The -verify option should really exit if the server verification fails.

SESS_ID
     openssl sess_id [-cert] [-context ID] [-in file] [-inform DER | PEM]
     [-noout] [-out file] [-outform DER | PEM] [-text]

     The sess_id program processes the encoded version of the SSL session
     structure and optionally prints out SSL session details (for example the
     SSL session master key) in human readable format.  Since this is a diag‐
     nostic tool that needs some knowledge of the SSL protocol to use prop‐
     erly, most users will not need to use it.

     The options are as follows:

     -cert   If a certificate is present in the session, it will be output us‐
             ing this option; if the -text option is also present, then it
             will be printed out in text form.

     -context ID
             This option can set the session ID so the output session informa‐
             tion uses the supplied ID.  The ID can be any string of charac‐
             ters.  This option won't normally be used.

     -in file
             This specifies the input file to read session information from,
             or standard input by default.

     -inform DER | PEM
             This specifies the input format.  The DER argument uses an ASN1
             DER-encoded format containing session details.  The precise for‐
             mat can vary from one version to the next.  The PEM form is the
             default format: it consists of the DER format base64-encoded with
             additional header and footer lines.

     -noout  This option prevents output of the encoded version of the ses‐
             sion.

     -out file
             This specifies the output file to write session information to,
             or standard output if this option is not specified.

     -outform DER | PEM
             This specifies the output format; the options have the same mean‐
             ing as the -inform option.

     -text   Prints out the various public or private key components in plain
             text in addition to the encoded version.

SESS_ID OUTPUT
     Typical output:

     SSL-Session:
         Protocol  : TLSv1
         Cipher    : 0016
         Session-ID: 871E62626C554CE95488823752CBD5F3673A3EF3DCE9C67BD916C809914B40ED
         Session-ID-ctx: 01000000
         Master-Key: A7CEFC571974BE02CAC305269DC59F76EA9F0B180CB6642697A68251F2D2BB57E51DBBB4C7885573192AE9AEE220FACD
         Key-Arg   : None
         Start Time: 948459261
         Timeout   : 300 (sec)
         Verify return code 0 (ok)

     These are described below in more detail.

     Protocol             This is the protocol in use.
     Cipher               The cipher used is the actual raw SSL or TLS cipher
                          code; see the SSL or TLS specifications for more in‐
                          formation.
     Session-ID           The SSL session ID in hex format.
     Session-ID-ctx       The session ID context in hex format.
     Master-Key           This is the SSL session master key.
     Key-Arg              The key argument; this is only used in SSL v2.
     Start Time           This is the session start time, represented as an
                          integer in standard UNIX format.
     Timeout              The timeout in seconds.
     Verify return code   This is the return code when an SSL client certifi‐
                          cate is verified.

SESS_ID NOTES
     The PEM-encoded session format uses the header and footer lines:

           -----BEGIN SSL SESSION PARAMETERS-----
           -----END SSL SESSION PARAMETERS-----

     Since the SSL session output contains the master key, it is possible to
     read the contents of an encrypted session using this information.  There‐
     fore appropriate security precautions should be taken if the information
     is being output by a "real" application.  This is, however, strongly dis‐
     couraged and should only be used for debugging purposes.

SESS_ID BUGS
     The cipher and start time should be printed out in human readable form.

SMIME
     openssl smime [-aes128 | -aes192 | -aes256 | -des |
     -des3 | -rc2-40 | -rc2-64 | -rc2-128] [-binary] [-CAfile file]
     [-CApath directory] [-certfile file] [-check_ss_sig] [-content file]
     [-crl_check] [-crl_check_all] [-decrypt] [-encrypt] [-extended_crl]
     [-from addr] [-ignore_critical] [-in file] [-indef]
     [-inform DER | PEM | SMIME] [-inkey file] [-issuer_checks] [-keyform PEM]
     [-md digest] [-noattr] [-nocerts] [-nochain] [-nodetach] [-noindef]
     [-nointern] [-nosigs] [-noverify] [-out file]
     [-outform DER | PEM | SMIME] [-passin arg] [-pk7out] [-policy_check]
     [-recip file] [-resign] [-sign] [-signer file] [-stream] [-subject s]
     [-text] [-to addr] [-verify] [-x509_strict] [cert.pem ...]

     The smime command handles S/MIME mail.  It can encrypt, decrypt, sign,
     and verify S/MIME messages.

     There are six operation options that set the type of operation to be per‐
     formed.  The meaning of the other options varies according to the opera‐
     tion type.

     The six operation options are as follows:

     -decrypt
           Decrypt mail using the supplied certificate and private key.  Ex‐
           pects an encrypted mail message in MIME format for the input file.
           The decrypted mail is written to the output file.

     -encrypt
           Encrypt mail for the given recipient certificates.  Input file is
           the message to be encrypted.  The output file is the encrypted mail
           in MIME format.

     -pk7out
           Takes an input message and writes out a PEM-encoded PKCS#7 struc‐
           ture.

     -resign
           Resign a message: take an existing message and one or more new
           signers.

     -sign
           Sign mail using the supplied certificate and private key.  Input
           file is the message to be signed.  The signed message in MIME for‐
           mat is written to the output file.

     -verify
           Verify signed mail.  Expects a signed mail message on input and
           outputs the signed data.  Both clear text and opaque signing is
           supported.

     The remaining options are as follows:

     -aes128 | -aes192 | -aes256 | -des | -des3 | -rc2-40 | -rc2-64 | -rc2-128
           The encryption algorithm to use.  128-, 192-, or 256-bit AES, DES
           (56 bits), triple DES (168 bits), or 40-, 64-, or 128-bit RC2, re‐
           spectively; if not specified, 40-bit RC2 is used.  Only used with
           -encrypt.

     -binary
           Normally, the input message is converted to "canonical" format
           which is effectively using CR and LF as end of line - as required
           by the S/MIME specification.  When this option is present no trans‐
           lation occurs.  This is useful when handling binary data which may
           not be in MIME format.

     -CAfile file
           A file containing trusted CA certificates; only used with -verify.

     -CApath directory
           A directory containing trusted CA certificates; only used with
           -verify.  This directory must be a standard certificate directory:
           that is, a hash of each subject name (using x509 -hash) should be
           linked to each certificate.

     cert.pem ...
           One or more certificates of message recipients: used when encrypt‐
           ing a message.

     -certfile file
           Allows additional certificates to be specified.  When signing,
           these will be included with the message.  When verifying, these
           will be searched for the signers' certificates.  The certificates
           should be in PEM format.

     -check_ss_sig, -crl_check, -crl_check_all, -extended_crl,
           -ignore_critical, -issuer_checks, -policy_check, -x509_strict
           Set various certificate chain validation options.  See the VERIFY
           command for details.

     -content file
           This specifies a file containing the detached content.  This is
           only useful with the -verify command.  This is only usable if the
           PKCS#7 structure is using the detached signature form where the
           content is not included.  This option will override any content if
           the input format is S/MIME and it uses the multipart/signed MIME
           content type.

     -from addr, -subject s, -to addr
           The relevant mail headers.  These are included outside the signed
           portion of a message so they may be included manually.  When sign‐
           ing, many S/MIME mail clients check that the signer's certificate
           email address matches the From: address.

     -in file
           The input message to be encrypted or signed or the MIME message to
           be decrypted or verified.

     -indef
           Enable streaming I/O for encoding operations.  This permits single
           pass processing of data without the need to hold the entire con‐
           tents in memory, potentially supporting very large files.  Stream‐
           ing is automatically set for S/MIME signing with detached data if
           the output format is SMIME; it is currently off by default for all
           other operations.

     -inform DER | PEM | SMIME
           This specifies the input format for the PKCS#7 structure.  The de‐
           fault is SMIME, which reads an S/MIME format message.  PEM and DER
           format change this to expect PEM and DER format PKCS#7 structures
           instead.  This currently only affects the input format of the
           PKCS#7 structure; if no PKCS#7 structure is being input (for exam‐
           ple with -encrypt or -sign), this option has no effect.

     -inkey file
           The private key to use when signing or decrypting.  This must match
           the corresponding certificate.  If this option is not specified,
           the private key must be included in the certificate file specified
           with the -recip or -signer file.  When signing, this option can be
           used multiple times to specify successive keys.

     -keyform PEM
           Input private key format.

     -md digest
           The digest algorithm to use when signing or resigning.  If not
           present then the default digest algorithm for the signing key is
           used (usually SHA1).

     -noattr
           Normally, when a message is signed a set of attributes are included
           which include the signing time and supported symmetric algorithms.
           With this option they are not included.

     -nocerts
           When signing a message, the signer's certificate is normally in‐
           cluded; with this option it is excluded.  This will reduce the size
           of the signed message but the verifier must have a copy of the
           signer's certificate available locally (passed using the -certfile
           option, for example).

     -nochain
           Do not do chain verification of signers' certificates: that is,
           don't use the certificates in the signed message as untrusted CAs.

     -nodetach
           When signing a message use opaque signing: this form is more resis‐
           tant to translation by mail relays but it cannot be read by mail
           agents that do not support S/MIME.  Without this option cleartext
           signing with the MIME type multipart/signed is used.

     -noindef
           Disable streaming I/O where it would produce an encoding of indefi‐
           nite length.  This option currently has no effect.  In future
           streaming will be enabled by default on all relevant operations and
           this option will disable it.

     -nointern
           When verifying a message, normally certificates (if any) included
           in the message are searched for the signing certificate.  With this
           option, only the certificates specified in the -certfile option are
           used.  The supplied certificates can still be used as untrusted CAs
           however.

     -nosigs
           Don't try to verify the signatures on the message.

     -noverify
           Do not verify the signer's certificate of a signed message.

     -out file
           The message text that has been decrypted or verified, or the output
           MIME format message that has been signed or verified.

     -outform DER | PEM | SMIME
           This specifies the output format for the PKCS#7 structure.  The de‐
           fault is SMIME, which writes an S/MIME format message.  PEM and DER
           format change this to write PEM and DER format PKCS#7 structures
           instead.  This currently only affects the output format of the
           PKCS#7 structure; if no PKCS#7 structure is being output (for exam‐
           ple with -verify or -decrypt) this option has no effect.

     -passin arg
           The key password source.

     -recip file
           The recipients certificate when decrypting a message.  This cer‐
           tificate must match one of the recipients of the message or an er‐
           ror occurs.

     -signer file
           A signing certificate when signing or resigning a message; this op‐
           tion can be used multiple times if more than one signer is re‐
           quired.  If a message is being verified, the signer's certificates
           will be written to this file if the verification was successful.

     -stream
           The same as -indef.

     -text
           This option adds plain text (text/plain) MIME headers to the sup‐
           plied message if encrypting or signing.  If decrypting or verify‐
           ing, it strips off text headers: if the decrypted or verified mes‐
           sage is not of MIME type text/plain then an error occurs.

SMIME NOTES
     The MIME message must be sent without any blank lines between the headers
     and the output.  Some mail programs will automatically add a blank line.
     Piping the mail directly to an MTA is one way to achieve the correct for‐
     mat.

     The supplied message to be signed or encrypted must include the necessary
     MIME headers or many S/MIME clients won't display it properly (if at
     all).  You can use the -text option to automatically add plain text head‐
     ers.

     A "signed and encrypted" message is one where a signed message is then
     encrypted.  This can be produced by encrypting an already signed message:
     see the SMIME EXAMPLES section.

     This version of the program only allows one signer per message, but it
     will verify multiple signers on received messages.  Some S/MIME clients
     choke if a message contains multiple signers.  It is possible to sign
     messages "in parallel" by signing an already signed message.

     The options -encrypt and -decrypt reflect common usage in S/MIME clients.
     Strictly speaking these process PKCS#7 enveloped data: PKCS#7 encrypted
     data is used for other purposes.

     The -resign option uses an existing message digest when adding a new
     signer.  This means that attributes must be present in at least one ex‐
     isting signer using the same message digest or this operation will fail.

     The -stream and -indef options enable experimental streaming I/O support.
     As a result the encoding is BER using indefinite length constructed en‐
     coding and no longer DER.  Streaming is supported for the -encrypt and
     -sign operations if the content is not detached.

     Streaming is always used for the -sign operation with detached data but
     since the content is no longer part of the PKCS#7 structure the encoding
     remains DER.

SMIME EXIT CODES
     0     The operation was completely successful.

     1     An error occurred parsing the command options.

     2     One of the input files could not be read.

     3     An error occurred creating the PKCS#7 file or when reading the MIME
           message.

     4     An error occurred decrypting or verifying the message.

     5     The message was verified correctly, but an error occurred writing
           out the signer's certificates.

SMIME EXAMPLES
     Create a cleartext signed message:

           $ openssl smime -sign -in message.txt -text -out mail.msg \
                   -signer mycert.pem

     Create an opaque signed message:

           $ openssl smime -sign -in message.txt -text -out mail.msg \
                   -nodetach -signer mycert.pem

     Create a signed message, include some additional certificates and read
     the private key from another file:

           $ openssl smime -sign -in in.txt -text -out mail.msg \
                   -signer mycert.pem -inkey mykey.pem -certfile mycerts.pem

     Create a signed message with two signers:

           openssl smime -sign -in message.txt -text -out mail.msg \
                   -signer mycert.pem -signer othercert.pem

     Send a signed message under UNIX directly to sendmail(8), including head‐
     ers:

           $ openssl smime -sign -in in.txt -text -signer mycert.pem \
                   -from steve@openssl.org -to someone@somewhere \
                   -subject "Signed message" | sendmail someone@somewhere

     Verify a message and extract the signer's certificate if successful:

           $ openssl smime -verify -in mail.msg -signer user.pem \
                   -out signedtext.txt

     Send encrypted mail using triple DES:

           $ openssl smime -encrypt -in in.txt -from steve@openssl.org \
                   -to someone@somewhere -subject "Encrypted message" \
                   -des3 -out mail.msg user.pem

     Sign and encrypt mail:

           $ openssl smime -sign -in ml.txt -signer my.pem -text | \
                   openssl smime -encrypt -out mail.msg \
                   -from steve@openssl.org -to someone@somewhere \
                   -subject "Signed and Encrypted message" -des3 user.pem

     Note: The encryption command does not include the -text option because
     the message being encrypted already has MIME headers.

     Decrypt mail:

           $ openssl smime -decrypt -in mail.msg -recip mycert.pem \
                   -inkey key.pem"

     The output from Netscape form signing is a PKCS#7 structure with the de‐
     tached signature format.  You can use this program to verify the signa‐
     ture by line wrapping the base64-encoded structure and surrounding it
     with:

           -----BEGIN PKCS7-----
           -----END PKCS7-----

     and using the command:

           $ openssl smime -verify -inform PEM -in signature.pem \
                   -content content.txt

     Alternatively, you can base64 decode the signature and use:

           $ openssl smime -verify -inform DER -in signature.der \
                   -content content.txt

     Create an encrypted message using 128-bit AES:

           openssl smime -encrypt -in plain.txt -aes128 \
                   -out mail.msg cert.pem

     Add a signer to an existing message:

           openssl smime -resign -in mail.msg -signer newsign.pem \
                   -out mail2.msg

SMIME BUGS
     The MIME parser isn't very clever: it seems to handle most messages that
     I've thrown at it, but it may choke on others.

     The code currently will only write out the signer's certificate to a
     file: if the signer has a separate encryption certificate this must be
     manually extracted.  There should be some heuristic that determines the
     correct encryption certificate.

     Ideally, a database should be maintained of a certificate for each email
     address.

     The code doesn't currently take note of the permitted symmetric encryp‐
     tion algorithms as supplied in the SMIMECapabilities signed attribute.
     This means the user has to manually include the correct encryption algo‐
     rithm.  It should store the list of permitted ciphers in a database and
     only use those.

     No revocation checking is done on the signer's certificate.

     The current code can only handle S/MIME v2 messages; the more complex
     S/MIME v3 structures may cause parsing errors.

SMIME HISTORY
     The use of multiple -signer options and the -resign command were first
     added in OpenSSL 1.0.0.

SPEED
     openssl speed [aes] [aes-128-cbc] [aes-192-cbc] [aes-256-cbc]
     [aes-128-gcm] [aes-256-gcm] [blowfish] [bf-cbc] [cast] [cast-cbc]
     [chacha20-poly1305] [des] [des-cbc] [des-ede3] [dsa] [dsa512] [dsa1024]
     [dsa2048] [hmac] [md4] [md5] [rc2] [rc2-cbc] [rc4] [rmd160] [rsa]
     [rsa512] [rsa1024] [rsa2048] [rsa4096] [sha1] [-decrypt] [-elapsed]
     [-evp e] [-mr] [-multi number]

     The speed command is used to test the performance of cryptographic algo‐
     rithms.

     [zero or more test algorithms]
           If any options are given, speed tests those algorithms, otherwise
           all of the above are tested.

     -decrypt
           Time decryption instead of encryption (only EVP).

     -elapsed
           Measure time in real time instead of CPU user time.

     -evp e
           Use EVP e.

     -mr   Produce machine readable output.

     -multi number
           Run number benchmarks in parallel.

TS
     openssl ts -query [-md4 | -md5 | -ripemd160 | -sha1] [-cert]
     [-config configfile] [-data file_to_hash] [-digest digest_bytes]
     [-in request.tsq] [-no_nonce] [-out request.tsq] [-policy object_id]
     [-text]

     openssl ts -reply [-chain certs_file.pem] [-config configfile]
     [-in response.tsr] [-inkey private.pem] [-out response.tsr] [-passin arg]
     [-policy object_id] [-queryfile request.tsq] [-section tsa_section]
     [-signer tsa_cert.pem] [-text] [-token_in] [-token_out]

     openssl ts -verify [-CAfile trusted_certs.pem]
     [-CApath trusted_cert_path] [-data file_to_hash] [-digest digest_bytes]
     [-in response.tsr] [-queryfile request.tsq] [-token_in]
     [-untrusted cert_file.pem]

     The ts command is a basic Time Stamping Authority (TSA) client and server
     application as specified in RFC 3161 (Time-Stamp Protocol, TSP).  A TSA
     can be part of a PKI deployment and its role is to provide long term
     proof of the existence of a certain datum before a particular time.  Here
     is a brief description of the protocol:

     1.   The TSA client computes a one-way hash value for a data file and
          sends the hash to the TSA.

     2.   The TSA attaches the current date and time to the received hash
          value, signs them and sends the time stamp token back to the client.
          By creating this token the TSA certifies the existence of the origi‐
          nal data file at the time of response generation.

     3.   The TSA client receives the time stamp token and verifies the signa‐
          ture on it.  It also checks if the token contains the same hash
          value that it had sent to the TSA.

     There is one DER-encoded protocol data unit defined for transporting a
     time stamp request to the TSA and one for sending the time stamp response
     back to the client.  The ts command has three main functions: creating a
     time stamp request based on a data file; creating a time stamp response
     based on a request; and verifying if a response corresponds to a particu‐
     lar request or a data file.

     There is no support for sending the requests/responses automatically over
     HTTP or TCP yet as suggested in RFC 3161.  Users must send the requests
     either by FTP or email.

     The -query switch can be used for creating and printing a time stamp re‐
     quest with the following options:

     -cert   The TSA is expected to include its signing certificate in the re‐
             sponse.

     -config configfile
             The configuration file to use.  This option overrides the
             OPENSSL_CONF environment variable.  Only the OID section of the
             config file is used with the -query command.

     -data file_to_hash
             The data file for which the time stamp request needs to be cre‐
             ated.  stdin is the default if neither the -data nor the -digest
             option is specified.

     -digest digest_bytes
             It is possible to specify the message imprint explicitly without
             the data file.  The imprint must be specified in a hexadecimal
             format, two characters per byte, the bytes optionally separated
             by colons (e.g. 1A:F6:01:... or 1AF601...).  The number of bytes
             must match the message digest algorithm in use.

     -in request.tsq
             This option specifies a previously created time stamp request in
             DER format that will be printed into the output file.  Useful
             when you need to examine the content of a request in human-read‐
             able format.

     -md4|md5|ripemd160|sha|sha1
             The message digest to apply to the data file.  It supports all
             the message digest algorithms that are supported by the dgst com‐
             mand.  The default is SHA-1.

     -no_nonce
             No nonce is specified in the request if this option is given.
             Otherwise a 64-bit long pseudo-random none is included in the re‐
             quest.  It is recommended to use nonce to protect against replay-
             attacks.

     -out request.tsq
             Name of the output file to which the request will be written.
             The default is stdout.

     -policy object_id
             The policy that the client expects the TSA to use for creating
             the time stamp token.  Either the dotted OID notation or OID
             names defined in the config file can be used.  If no policy is
             requested the TSA will use its own default policy.

     -text   If this option is specified the output is in human-readable text
             format instead of DER.

     A time stamp response (TimeStampResp) consists of a response status and
     the time stamp token itself (ContentInfo), if the token generation was
     successful.  The -reply command is for creating a time stamp response or
     time stamp token based on a request and printing the response/token in
     human-readable format.  If -token_out is not specified the output is al‐
     ways a time stamp response (TimeStampResp), otherwise it is a time stamp
     token (ContentInfo).

     -chain certs_file.pem
             The collection of certificates, in PEM format, that will be in‐
             cluded in the response in addition to the signer certificate if
             the -cert option was used for the request.  This file is supposed
             to contain the certificate chain for the signer certificate from
             its issuer upwards.  The -reply command does not build a certifi‐
             cate chain automatically.

     -config configfile
             The configuration file to use.  This option overrides the
             OPENSSL_CONF environment variable.  See TS CONFIGURATION FILE
             OPTIONS for configurable variables.

     -in response.tsr
             Specifies a previously created time stamp response or time stamp
             token, if -token_in is also specified, in DER format that will be
             written to the output file.  This option does not require a re‐
             quest; it is useful, for example, when you need to examine the
             content of a response or token or you want to extract the time
             stamp token from a response.  If the input is a token and the
             output is a time stamp response a default “granted” status info
             is added to the token.

     -inkey private.pem
             The signer private key of the TSA in PEM format.  Overrides the
             signer_key config file option.

     -out response.tsr
             The response is written to this file.  The format and content of
             the file depends on other options (see -text and -token_out).
             The default is stdout.

     -passin arg
             The key password source.

     -policy object_id
             The default policy to use for the response unless the client ex‐
             plicitly requires a particular TSA policy.  The OID can be speci‐
             fied either in dotted notation or with its name.  Overrides the
             default_policy config file option.

     -queryfile request.tsq
             The name of the file containing a DER-encoded time stamp request.

     -section tsa_section
             The name of the config file section containing the settings for
             the response generation.  If not specified the default TSA sec‐
             tion is used; see TS CONFIGURATION FILE OPTIONS for details.

     -signer tsa_cert.pem
             The signer certificate of the TSA in PEM format.  The TSA signing
             certificate must have exactly one extended key usage assigned to
             it: timeStamping.  The extended key usage must also be critical,
             otherwise the certificate is going to be refused.  Overrides the
             signer_cert variable of the config file.

     -text   If this option is specified the output is human-readable text
             format instead of DER.

     -token_in
             This flag can be used together with the -in option and indicates
             that the input is a DER-encoded time stamp token (ContentInfo)
             instead of a time stamp response (TimeStampResp).

     -token_out
             The output is a time stamp token (ContentInfo) instead of time
             stamp response (TimeStampResp).

     The -verify command is for verifying if a time stamp response or time
     stamp token is valid and matches a particular time stamp request or data
     file.  The -verify command does not use the configuration file.

     -CAfile trusted_certs.pem
             The name of the file containing a set of trusted self-signed CA
             certificates in PEM format.  See the similar option of verify for
             additional details.  Either this option or -CApath must be speci‐
             fied.

     -CApath trusted_cert_path
             The name of the directory containing the trused CA certificates
             of the client.  See the similar option of verify for additional
             details.  Either this option or -CAfile must be specified.

     -data file_to_hash
             The response or token must be verified against file_to_hash.  The
             file is hashed with the message digest algorithm specified in the
             token.  The -digest and -queryfile options must not be specified
             with this one.

     -digest digest_bytes
             The response or token must be verified against the message digest
             specified with this option.  The number of bytes must match the
             message digest algorithm specified in the token.  The -data and
             -queryfile options must not be specified with this one.

     -in response.tsr
             The time stamp response that needs to be verified, in DER format.
             This option in mandatory.

     -queryfile request.tsq
             The original time stamp request, in DER format.  The -data and
             -digest options must not be specified with this one.

     -token_in
             This flag can be used together with the -in option and indicates
             that the input is a DER-encoded time stamp token (ContentInfo)
             instead of a time stamp response (TimeStampResp).

     -untrusted cert_file.pem
             Set of additional untrusted certificates in PEM format which may
             be needed when building the certificate chain for the TSA's sign‐
             ing certificate.  This file must contain the TSA signing certifi‐
             cate and all intermediate CA certificates unless the response in‐
             cludes them.

TS CONFIGURATION FILE OPTIONS
     The -query and -reply options make use of a configuration file defined by
     the OPENSSL_CONF environment variable.  The -query option uses only the
     symbolic OID names section and it can work without it.  However, the
     -reply option needs the config file for its operation.

     When there is a command line switch equivalent of a variable the switch
     always overrides the settings in the config file.

     tsa section, default_tsa
             This is the main section and it specifies the name of another
             section that contains all the options for the -reply option.
             This default section can be overridden with the -section command
             line switch.

     oid_file
             See ca for a description.

     oid_section
             See ca for a description.

     serial  The name of the file containing the hexadecimal serial number of
             the last time stamp response created.  This number is incremented
             by 1 for each response.  If the file does not exist at the time
             of response generation a new file is created with serial number
             1.  This parameter is mandatory.

     signer_cert
             TSA signing certificate, in PEM format.  The same as the -signer
             command line option.

     certs   A file containing a set of PEM-encoded certificates that need to
             be included in the response.  The same as the -chain command line
             option.

     signer_key
             The private key of the TSA, in PEM format.  The same as the
             -inkey command line option.

     default_policy
             The default policy to use when the request does not mandate any
             policy.  The same as the -policy command line option.

     other_policies
             Comma separated list of policies that are also acceptable by the
             TSA and used only if the request explicitly specifies one of
             them.

     digests
             The list of message digest algorithms that the TSA accepts.  At
             least one algorithm must be specified.  This parameter is manda‐
             tory.

     accuracy
             The accuracy of the time source of the TSA in seconds, millisec‐
             onds and microseconds.  For example, secs:1, millisecs:500, mi‐
             crosecs:100.  If any of the components is missing, zero is as‐
             sumed for that field.

     clock_precision_digits
             Specifies the maximum number of digits, which represent the frac‐
             tion of seconds, that need to be included in the time field.  The
             trailing zeroes must be removed from the time, so there might ac‐
             tually be fewer digits, or no fraction of seconds at all.  The
             maximum value is 6; the default is 0.

     ordering
             If this option is yes, the responses generated by this TSA can
             always be ordered, even if the time difference between two re‐
             sponses is less than the sum of their accuracies.  The default is
             no.

     tsa_name
             Set this option to yes if the subject name of the TSA must be in‐
             cluded in the TSA name field of the response.  The default is no.

     ess_cert_id_chain
             The SignedData objects created by the TSA always contain the cer‐
             tificate identifier of the signing certificate in a signed attri‐
             bute (see RFC 2634, Enhanced Security Services).  If this option
             is set to yes and either the certs variable or the -chain option
             is specified then the certificate identifiers of the chain will
             also be included in the SigningCertificate signed attribute.  If
             this variable is set to no, only the signing certificate identi‐
             fier is included.  The default is no.

TS ENVIRONMENT VARIABLES
     OPENSSL_CONF contains the path of the configuration file and can be over‐
     ridden by the -config command line option.

TS EXAMPLES
     All the examples below presume that OPENSSL_CONF is set to a proper con‐
     figuration file, e.g. the example configuration file
     openssl/apps/openssl.cnf will do.

     To create a time stamp request for design1.txt with SHA-1 without nonce
     and policy and no certificate is required in the response:

           $ openssl ts -query -data design1.txt -no_nonce \
                   -out design1.tsq

     To create a similar time stamp request but specifying the message imprint
     explicitly:

           $ openssl ts -query \
                   -digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \
                   -no_nonce -out design1.tsq

     To print the content of the previous request in human readable format:

           $ openssl ts -query -in design1.tsq -text

     To create a time stamp request which includes the MD5 digest of de‐
     sign2.txt, requests the signer certificate and nonce, specifies a policy
     ID (assuming the tsa_policy1 name is defined in the OID section of the
     config file):

           $ openssl ts -query -data design2.txt -md5 \
                   -policy tsa_policy1 -cert -out design2.tsq

     Before generating a response, a signing certificate must be created for
     the TSA that contains the timeStamping critical extended key usage exten‐
     sion without any other key usage extensions.  You can add the
     “extendedKeyUsage = critical,timeStamping” line to the user certificate
     section of the config file to generate a proper certificate.  See the
     req, ca, and x509 commands for instructions.  The examples below assume
     that cacert.pem contains the certificate of the CA, tsacert.pem is the
     signing certificate issued by cacert.pem and tsakey.pem is the private
     key of the TSA.

     To create a time stamp response for a request:

           $ openssl ts -reply -queryfile design1.tsq -inkey tsakey.pem \
                   -signer tsacert.pem -out design1.tsr

     If you want to use the settings in the config file you could just write:

           $ openssl ts -reply -queryfile design1.tsq -out design1.tsr

     To print a time stamp reply to stdout in human readable format:

           $ openssl ts -reply -in design1.tsr -text

     To create a time stamp token instead of time stamp response:

           $ openssl ts -reply -queryfile design1.tsq \
                   -out design1_token.der -token_out

     To print a time stamp token to stdout in human readable format:

           $ openssl ts -reply -in design1_token.der -token_in \
                   -text -token_out

     To extract the time stamp token from a response:

           $ openssl ts -reply -in design1.tsr -out design1_token.der \
                   -token_out

     To add “granted” status info to a time stamp token thereby creating a
     valid response:

           $ openssl ts -reply -in design1_token.der \
                   -token_in -out design1.tsr

     To verify a time stamp reply against a request:

           $ openssl ts -verify -queryfile design1.tsq -in design1.tsr \
                   -CAfile cacert.pem -untrusted tsacert.pem

     To verify a time stamp reply that includes the certificate chain:

           $ openssl ts -verify -queryfile design2.tsq -in design2.tsr \
                   -CAfile cacert.pem

     To verify a time stamp token against the original data file:

           $ openssl ts -verify -data design2.txt -in design2.tsr \
                   -CAfile cacert.pem

     To verify a time stamp token against a message imprint:

           $ openssl ts -verify \
                   -digest b7e5d3f93198b38379852f2c04e78d73abdd0f4b \
                   -in design2.tsr -CAfile cacert.pem

TS BUGS
     No support for time stamps over SMTP, though it is quite easy to imple‐
     ment an automatic email-based TSA with procmail and perl(1).  Pure TCP/IP
     is not supported.

     The file containing the last serial number of the TSA is not locked when
     being read or written.  This is a problem if more than one instance of
     OpenSSL is trying to create a time stamp response at the same time.

     Look for the FIXME word in the source files.

     The source code should really be reviewed by somebody else, too.

     More testing is needed.

TS AUTHORS
     Zoltan Glozik <zglozik@opentsa.org>, OpenTSA project
     (http://www.opentsa.org).

SPKAC
     openssl spkac [-challenge string] [-in file] [-key keyfile] [-noout]
     [-out file] [-passin arg] [-pubkey] [-spkac spkacname] [-spksect section]
     [-verify]

     The spkac command processes Netscape signed public key and challenge
     (SPKAC) files.  It can print out their contents, verify the signature,
     and produce its own SPKACs from a supplied private key.

     The options are as follows:

     -challenge string
             Specifies the challenge string if an SPKAC is being created.

     -in file
             This specifies the input file to read from, or standard input if
             this option is not specified.  Ignored if the -key option is
             used.

     -key keyfile
             Create an SPKAC file using the private key in keyfile.  The -in,
             -noout, -spksect, and -verify options are ignored if present.

     -noout  Don't output the text version of the SPKAC (not used if an SPKAC
             is being created).

     -out file
             Specifies the output file to write to, or standard output by de‐
             fault.

     -passin arg
             The key password source.

     -pubkey
             Output the public key of an SPKAC (not used if an SPKAC is being
             created).

     -spkac spkacname
             Allows an alternative name for the variable containing the SPKAC.
             The default is "SPKAC".  This option affects both generated and
             input SPKAC files.

     -spksect section
             Allows an alternative name for the section containing the SPKAC.
             The default is the default section.

     -verify
             Verifies the digital signature on the supplied SPKAC.

SPKAC EXAMPLES
     Print out the contents of an SPKAC:

           $ openssl spkac -in spkac.cnf

     Verify the signature of an SPKAC:

           $ openssl spkac -in spkac.cnf -noout -verify

     Create an SPKAC using the challenge string "hello":

           $ openssl spkac -key key.pem -challenge hello -out spkac.cnf

     Example of an SPKAC, (long lines split up for clarity):

           SPKAC=MIG5MGUwXDANBgkqhkiG9w0BAQEFAANLADBIAkEA1cCoq2Wa3Ixs47uI7F\
           PVwHVIPDx5yso105Y6zpozam135a8R0CpoRvkkigIyXfcCjiVi5oWk+6FfPaD03u\
           PFoQIDAQABFgVoZWxsbzANBgkqhkiG9w0BAQQFAANBAFpQtY/FojdwkJh1bEIYuc\
           2EeM2KHTWPEepWYeawvHD0gQ3DngSC75YCWnnDdq+NQ3F+X4deMx9AaEglZtULwV\
           4=

SPKAC NOTES
     A created SPKAC with suitable DN components appended can be fed into the
     ca utility.

     SPKACs are typically generated by Netscape when a form is submitted con‐
     taining the KEYGEN tag as part of the certificate enrollment process.

     The challenge string permits a primitive form of proof of possession of
     private key.  By checking the SPKAC signature and a random challenge
     string, some guarantee is given that the user knows the private key cor‐
     responding to the public key being certified.  This is important in some
     applications.  Without this it is possible for a previous SPKAC to be
     used in a "replay attack".

VERIFY
     openssl verify [-CAfile file] [-CApath directory] [-check_ss_sig]
     [-crl_check] [-crl_check_all] [-explicit_policy] [-extended_crl] [-help]
     [-ignore_critical] [-inhibit_any] [-inhibit_map] [-issuer_checks]
     [-policy_check] [-purpose purpose] [-untrusted file] [-verbose]
     [-x509_strict] [-] [certificates]

     The verify command verifies certificate chains.

     The options are as follows:

     -check_ss_sig
             Verify the signature on the self-signed root CA.  This is dis‐
             abled by default because it doesn't add any security.

     -CAfile file
             A file of trusted certificates.  The file should contain multiple
             certificates in PEM format, concatenated together.

     -CApath directory
             A directory of trusted certificates.  The certificates should
             have names of the form hash.0, or have symbolic links to them of
             this form ("hash" is the hashed certificate subject name: see the
             -hash option of the x509 utility).  The c_rehash script distrib‐
             uted with OpenSSL will automatically create symbolic links to a
             directory of certificates.

     -crl_check
             Checks end entity certificate validity by attempting to look up a
             valid CRL.  If a valid CRL cannot be found an error occurs.

     -crl_check_all
             Checks the validity of all certificates in the chain by attempt‐
             ing to look up valid CRLs.

     -explicit_policy
             Set policy variable require-explicit-policy (see RFC 3280 et al).

     -extended_crl
             Enable extended CRL features such as indirect CRLs and alternate
             CRL signing keys.

     -help   Prints out a usage message.

     -ignore_critical
             Normally if an unhandled critical extension is present which is
             not supported by OpenSSL, the certificate is rejected (as re‐
             quired by RFC 3280 et al).  If this option is set, critical ex‐
             tensions are ignored.

     -inhibit_any
             Set policy variable inhibit-any-policy (see RFC 3280 et al).

     -inhibit_map
             Set policy variable inhibit-policy-mapping (see RFC 3280 et al).

     -issuer_checks
             Print out diagnostics relating to searches for the issuer cer‐
             tificate of the current certificate.  This shows why each candi‐
             date issuer certificate was rejected.  However the presence of
             rejection messages does not itself imply that anything is wrong:
             during the normal verify process several rejections may take
             place.

     -policy_check
             Enables certificate policy processing.

     -purpose purpose
             The intended use for the certificate.  Without this option no
             chain verification will be done.  Currently accepted uses are
             sslclient, sslserver, nssslserver, smimesign, smimeencrypt,
             crlsign, any, and ocsphelper.  See the VERIFY OPERATION section
             for more information.

     -untrusted file
             A file of untrusted certificates.  The file should contain multi‐
             ple certificates.

     -verbose
             Print extra information about the operations being performed.

     -x509_strict
             Disable workarounds for broken certificates which have to be dis‐
             abled for strict X.509 compliance.

     -       Marks the last option.  All arguments following this are assumed
             to be certificate files.  This is useful if the first certificate
             filename begins with a ‘-’.

     certificates
             One or more certificates to verify.  If no certificate files are
             included, an attempt is made to read a certificate from standard
             input.  They should all be in PEM format.

VERIFY OPERATION
     The verify program uses the same functions as the internal SSL and S/MIME
     verification, therefore this description applies to these verify opera‐
     tions too.

     There is one crucial difference between the verify operations performed
     by the verify program: wherever possible an attempt is made to continue
     after an error, whereas normally the verify operation would halt on the
     first error.  This allows all the problems with a certificate chain to be
     determined.

     The verify operation consists of a number of separate steps:

     Firstly a certificate chain is built up starting from the supplied cer‐
     tificate and ending in the root CA.  It is an error if the whole chain
     cannot be built up.  The chain is built up by looking up the issuer's
     certificate of the current certificate.  If a certificate is found which
     is its own issuer, it is assumed to be the root CA.

     The process of "looking up the issuer's certificate" itself involves a
     number of steps.  In versions of OpenSSL before 0.9.5a the first certifi‐
     cate whose subject name matched the issuer of the current certificate was
     assumed to be the issuer's certificate.  In OpenSSL 0.9.6 and later all
     certificates whose subject name matches the issuer name of the current
     certificate are subject to further tests.  The relevant authority key
     identifier components of the current certificate (if present) must match
     the subject key identifier (if present) and issuer and serial number of
     the candidate issuer; in addition the keyUsage extension of the candidate
     issuer (if present) must permit certificate signing.

     The lookup first looks in the list of untrusted certificates and if no
     match is found the remaining lookups are from the trusted certificates.
     The root CA is always looked up in the trusted certificate list: if the
     certificate to verify is a root certificate, then an exact match must be
     found in the trusted list.

     The second operation is to check every untrusted certificate's extensions
     for consistency with the supplied purpose.  If the -purpose option is not
     included, then no checks are done.  The supplied or "leaf" certificate
     must have extensions compatible with the supplied purpose and all other
     certificates must also be valid CA certificates.  The precise extensions
     required are described in more detail in the X.509 CERTIFICATE EXTENSIONS
     section below.

     The third operation is to check the trust settings on the root CA.  The
     root CA should be trusted for the supplied purpose.  For compatibility
     with previous versions of SSLeay and OpenSSL, a certificate with no trust
     settings is considered to be valid for all purposes.

     The final operation is to check the validity of the certificate chain.
     The validity period is checked against the current system time and the
     notBefore and notAfter dates in the certificate.  The certificate signa‐
     tures are also checked at this point.

     If all operations complete successfully, the certificate is considered
     valid.  If any operation fails then the certificate is not valid.

VERIFY DIAGNOSTICS
     When a verify operation fails, the output messages can be somewhat cryp‐
     tic.  The general form of the error message is:

      server.pem: /C=AU/ST=Queensland/O=CryptSoft Pty Ltd/CN=Test CA (1024-bit)
      error 24 at 1 depth lookup:invalid CA certificate

     The first line contains the name of the certificate being verified, fol‐
     lowed by the subject name of the certificate.  The second line contains
     the error number and the depth.  The depth is the number of the certifi‐
     cate being verified when a problem was detected starting with zero for
     the certificate being verified itself, then 1 for the CA that signed the
     certificate and so on.  Finally a text version of the error number is
     presented.

     An exhaustive list of the error codes and messages is shown below; this
     also includes the name of the error code as defined in the header file
     <openssl/x509_vfy.h>.  Some of the error codes are defined but never re‐
     turned: these are described as "unused".

     0 X509_V_OK: ok
           The operation was successful.

     2 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT: unable to get issuer certificate
           The issuer certificate could not be found: this occurs if the is‐
           suer certificate of an untrusted certificate cannot be found.

     3 X509_V_ERR_UNABLE_TO_GET_CRL: unable to get certificate CRL
           The CRL of a certificate could not be found.

     4 X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE: unable to decrypt
           certificate's signature
           The certificate signature could not be decrypted.  This means that
           the actual signature value could not be determined rather than it
           not matching the expected value.  This is only meaningful for RSA
           keys.

     5 X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE: unable to decrypt CRL's
           signature
           The CRL signature could not be decrypted: this means that the ac‐
           tual signature value could not be determined rather than it not
           matching the expected value.  Unused.

     6 X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY: unable to decode issuer
           public key
           The public key in the certificate SubjectPublicKeyInfo could not be
           read.

     7 X509_V_ERR_CERT_SIGNATURE_FAILURE: certificate signature failure
           The signature of the certificate is invalid.

     8 X509_V_ERR_CRL_SIGNATURE_FAILURE: CRL signature failure
           The signature of the certificate is invalid.

     9 X509_V_ERR_CERT_NOT_YET_VALID: certificate is not yet valid
           The certificate is not yet valid: the notBefore date is after the
           current time.

     10 X509_V_ERR_CERT_HAS_EXPIRED: certificate has expired
           The certificate has expired; that is, the notAfter date is before
           the current time.

     11 X509_V_ERR_CRL_NOT_YET_VALID: CRL is not yet valid
           The CRL is not yet valid.

     12 X509_V_ERR_CRL_HAS_EXPIRED: CRL has expired
           The CRL has expired.

     13 X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD: format error in
           certificate's notBefore field
           The certificate notBefore field contains an invalid time.

     14 X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD: format error in
           certificate's notAfter field
           The certificate notAfter field contains an invalid time.

     15 X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD: format error in CRL's
           lastUpdate field
           The CRL lastUpdate field contains an invalid time.

     16 X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD: format error in CRL's
           nextUpdate field
           The CRL nextUpdate field contains an invalid time.

     17 X509_V_ERR_OUT_OF_MEM: out of memory
           An error occurred trying to allocate memory.  This should never
           happen.

     18 X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT: self signed certificate
           The passed certificate is self-signed and the same certificate can‐
           not be found in the list of trusted certificates.

     19 X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN: self signed certificate in
           certificate chain
           The certificate chain could be built up using the untrusted cer‐
           tificates but the root could not be found locally.

     20 X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY: unable to get local
           issuer certificate
           The issuer certificate of a locally looked up certificate could not
           be found.  This normally means the list of trusted certificates is
           not complete.

     21 X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE: unable to verify the first
           certificate
           No signatures could be verified because the chain contains only one
           certificate and it is not self-signed.

     22 X509_V_ERR_CERT_CHAIN_TOO_LONG: certificate chain too long
           The certificate chain length is greater than the supplied maximum
           depth.  Unused.

     23 X509_V_ERR_CERT_REVOKED: certificate revoked
           The certificate has been revoked.

     24 X509_V_ERR_INVALID_CA: invalid CA certificate
           A CA certificate is invalid.  Either it is not a CA or its exten‐
           sions are not consistent with the supplied purpose.

     25 X509_V_ERR_PATH_LENGTH_EXCEEDED: path length constraint exceeded
           The basicConstraints pathlength parameter has been exceeded.

     26 X509_V_ERR_INVALID_PURPOSE: unsupported certificate purpose
           The supplied certificate cannot be used for the specified purpose.

     27 X509_V_ERR_CERT_UNTRUSTED: certificate not trusted
           The root CA is not marked as trusted for the specified purpose.

     28 X509_V_ERR_CERT_REJECTED: certificate rejected
           The root CA is marked to reject the specified purpose.

     29 X509_V_ERR_SUBJECT_ISSUER_MISMATCH: subject issuer mismatch
           The current candidate issuer certificate was rejected because its
           subject name did not match the issuer name of the current certifi‐
           cate.  Only displayed when the -issuer_checks option is set.

     30 X509_V_ERR_AKID_SKID_MISMATCH: authority and subject key identifier
           mismatch
           The current candidate issuer certificate was rejected because its
           subject key identifier was present and did not match the authority
           key identifier current certificate.  Only displayed when the
           -issuer_checks option is set.

     31 X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH: authority and issuer serial
           number mismatch
           The current candidate issuer certificate was rejected because its
           issuer name and serial number were present and did not match the
           authority key identifier of the current certificate.  Only dis‐
           played when the -issuer_checks option is set.

     32 X509_V_ERR_KEYUSAGE_NO_CERTSIGN:key usage does not include certificate
           signing
           The current candidate issuer certificate was rejected because its
           keyUsage extension does not permit certificate signing.

     50 X509_V_ERR_APPLICATION_VERIFICATION: application verification failure
           An application specific error.  Unused.

VERIFY BUGS
     Although the issuer checks are a considerable improvement over the old
     technique, they still suffer from limitations in the underlying
     X509_LOOKUP API.  One consequence of this is that trusted certificates
     with matching subject name must either appear in a file (as specified by
     the -CAfile option) or a directory (as specified by -CApath).  If they
     occur in both, only the certificates in the file will be recognised.

     Previous versions of OpenSSL assumed certificates with matching subject
     name were identical and mishandled them.

VERSION
     openssl version [-abdfopv]

     The version command is used to print out version information about
     OpenSSL.

     The options are as follows:

     -a      All information: this is the same as setting all the other flags.

     -b      The date the current version of OpenSSL was built.

     -d      OPENSSLDIR setting.

     -f      Compilation flags.

     -o      Option information: various options set when the library was
             built.

     -p      Platform setting.

     -v      The current OpenSSL version.

VERSION NOTES
     The output of openssl version -a would typically be used when sending in
     a bug report.

VERSION HISTORY
     The -d option was added in OpenSSL 0.9.7.

X509
     openssl x509 [-C] [-addreject arg] [-addtrust arg] [-alias] [-CA file]
     [-CAcreateserial] [-CAform DER | PEM] [-CAkey file]
     [-CAkeyform DER | PEM] [-CAserial file] [-certopt option] [-checkend arg]
     [-clrext] [-clrreject] [-clrtrust] [-dates] [-days arg] [-email]
     [-enddate] [-extensions section] [-extfile file] [-fingerprint] [-hash]
     [-in file] [-inform DER | NET | PEM] [-issuer] [-issuer_hash]
     [-issuer_hash_old] [-keyform DER | PEM] [-md5 | -sha1] [-modulus]
     [-nameopt option] [-noout] [-ocsp_uri] [-ocspid] [-out file]
     [-outform DER | NET | PEM] [-passin arg] [-pubkey] [-purpose] [-req]
     [-serial] [-set_serial n] [-setalias arg] [-signkey file] [-startdate]
     [-subject] [-subject_hash] [-subject_hash_old] [-text] [-trustout]
     [-x509toreq]

     The x509 command is a multi-purpose certificate utility.  It can be used
     to display certificate information, convert certificates to various
     forms, sign certificate requests like a "mini CA", or edit certificate
     trust settings.

     Since there are a large number of options, they are split up into various
     sections.

X509 INPUT, OUTPUT, AND GENERAL PURPOSE OPTIONS
     -in file
           This specifies the input file to read a certificate from, or stan‐
           dard input if this option is not specified.

     -inform DER | NET | PEM
           This specifies the input format.  Normally, the command will expect
           an X.509 certificate, but this can change if other options such as
           -req are present.  The DER format is the DER encoding of the cer‐
           tificate and PEM is the base64 encoding of the DER encoding with
           header and footer lines added.  The NET option is an obscure Net‐
           scape server format that is now obsolete.

     -md5 | -sha1
           The digest to use.  This affects any signing or display option that
           uses a message digest, such as the -fingerprint, -signkey, and -CA
           options.  If not specified, MD5 is used.  If the key being used to
           sign with is a DSA key, this option has no effect: SHA1 is always
           used with DSA keys.

     -out file
           This specifies the output file to write to, or standard output by
           default.

     -outform DER | NET | PEM
           This specifies the output format; the options have the same meaning
           as the -inform option.

     -passin arg
           The key password source.

X509 DISPLAY OPTIONS
     Note: The -alias and -purpose options are also display options but are
     described in the X509 TRUST SETTINGS section.

     -C    This outputs the certificate in the form of a C source file.

     -certopt option
           Customise the output format used with -text.  The option argument
           can be a single option or multiple options separated by commas.
           The -certopt switch may also be used more than once to set multiple
           options.  See the X509 TEXT OPTIONS section for more information.

     -dates
           Prints out the start and expiry dates of a certificate.

     -email
           Outputs the email address(es), if any.

     -enddate
           Prints out the expiry date of the certificate; that is, the
           notAfter date.

     -fingerprint
           Prints out the digest of the DER-encoded version of the whole cer‐
           tificate (see DIGEST OPTIONS).

     -hash
           A synonym for -subject_hash, for backwards compatibility.

     -issuer
           Outputs the issuer name.

     -issuer_hash
           Outputs the "hash" of the certificate issuer name.

     -issuer_hash_old
           Outputs the "hash" of the certificate issuer name using the older
           algorithm as used by OpenSSL versions before 1.0.0.

     -modulus
           This option prints out the value of the modulus of the public key
           contained in the certificate.

     -nameopt option
           Option which determines how the subject or issuer names are dis‐
           played.  The option argument can be a single option or multiple op‐
           tions separated by commas.  Alternatively, the -nameopt switch may
           be used more than once to set multiple options.  See the X509 NAME
           OPTIONS section for more information.

     -noout
           This option prevents output of the encoded version of the request.

     -ocsp_uri
           Outputs the OCSP responder addresses, if any.

     -ocspid
           Print OCSP hash values for the subject name and public key.

     -pubkey
           Output the public key.

     -serial
           Outputs the certificate serial number.

     -startdate
           Prints out the start date of the certificate; that is, the
           notBefore date.

     -subject
           Outputs the subject name.

     -subject_hash
           Outputs the "hash" of the certificate subject name.  This is used
           in OpenSSL to form an index to allow certificates in a directory to
           be looked up by subject name.

     -subject_hash_old
           Outputs the "hash" of the certificate subject name using the older
           algorithm as used by OpenSSL versions before 1.0.0.

     -text
           Prints out the certificate in text form.  Full details are output
           including the public key, signature algorithms, issuer and subject
           names, serial number, any extensions present, and any trust set‐
           tings.

X509 TRUST SETTINGS
     Please note these options are currently experimental and may well change.

     A trusted certificate is an ordinary certificate which has several addi‐
     tional pieces of information attached to it such as the permitted and
     prohibited uses of the certificate and an "alias".

     Normally, when a certificate is being verified at least one certificate
     must be "trusted".  By default, a trusted certificate must be stored lo‐
     cally and must be a root CA: any certificate chain ending in this CA is
     then usable for any purpose.

     Trust settings currently are only used with a root CA.  They allow a
     finer control over the purposes the root CA can be used for.  For exam‐
     ple, a CA may be trusted for an SSL client but not for SSL server use.

     See the description of the verify utility for more information on the
     meaning of trust settings.

     Future versions of OpenSSL will recognize trust settings on any certifi‐
     cate: not just root CAs.

     -addreject arg
           Adds a prohibited use.  It accepts the same values as the -addtrust
           option.

     -addtrust arg
           Adds a trusted certificate use.  Any object name can be used here,
           but currently only clientAuth (SSL client use), serverAuth (SSL
           server use), and emailProtection (S/MIME email) are used.  Other
           OpenSSL applications may define additional uses.

     -alias
           Outputs the certificate alias, if any.

     -clrreject
           Clears all the prohibited or rejected uses of the certificate.

     -clrtrust
           Clears all the permitted or trusted uses of the certificate.

     -purpose
           This option performs tests on the certificate extensions and out‐
           puts the results.  For a more complete description, see the X.509
           CERTIFICATE EXTENSIONS section.

     -setalias arg
           Sets the alias of the certificate.  This will allow the certificate
           to be referred to using a nickname, for example "Steve's
           Certificate".

     -trustout
           This causes x509 to output a trusted certificate.  An ordinary or
           trusted certificate can be input, but by default an ordinary cer‐
           tificate is output and any trust settings are discarded.  With the
           -trustout option a trusted certificate is output.  A trusted cer‐
           tificate is automatically output if any trust settings are modi‐
           fied.

X509 SIGNING OPTIONS
     The x509 utility can be used to sign certificates and requests: it can
     thus behave like a "mini CA".

     -CA file
           Specifies the CA certificate to be used for signing.  When this op‐
           tion is present, x509 behaves like a "mini CA".  The input file is
           signed by the CA using this option; that is, its issuer name is set
           to the subject name of the CA and it is digitally signed using the
           CA's private key.

           This option is normally combined with the -req option.  Without the
           -req option, the input is a certificate which must be self-signed.

     -CAcreateserial
           With this option the CA serial number file is created if it does
           not exist: it will contain the serial number ‘02’ and the certifi‐
           cate being signed will have ‘1’ as its serial number.  Normally, if
           the -CA option is specified and the serial number file does not ex‐
           ist, it is an error.

     -CAform DER | PEM
           The format of the CA certificate file.  The default is PEM.

     -CAkey file
           Sets the CA private key to sign a certificate with.  If this option
           is not specified, it is assumed that the CA private key is present
           in the CA certificate file.

     -CAkeyform DER | PEM
           The format of the CA private key.  The default is PEM.

     -CAserial file
           Sets the CA serial number file to use.

           When the -CA option is used to sign a certificate, it uses a serial
           number specified in a file.  This file consists of one line con‐
           taining an even number of hex digits with the serial number to use.
           After each use the serial number is incremented and written out to
           the file again.

           The default filename consists of the CA certificate file base name
           with .srl appended.  For example, if the CA certificate file is
           called mycacert.pem, it expects to find a serial number file called
           mycacert.srl.

     -checkend arg
           Check whether the certificate expires in the next arg seconds.  If
           so, exit with return value 1; otherwise exit with return value 0.

     -clrext
           Delete any extensions from a certificate.  This option is used when
           a certificate is being created from another certificate (for exam‐
           ple with the -signkey or the -CA options).  Normally, all exten‐
           sions are retained.

     -days arg
           Specifies the number of days to make a certificate valid for.  The
           default is 30 days.

     -extensions section
           The section to add certificate extensions from.  If this option is
           not specified, the extensions should either be contained in the un‐
           named (default) section or the default section should contain a
           variable called "extensions" which contains the section to use.

     -extfile file
           File containing certificate extensions to use.  If not specified,
           no extensions are added to the certificate.

     -keyform DER | PEM
           Specifies the format (DER or PEM) of the private key file used in
           the -signkey option.

     -req  By default, a certificate is expected on input.  With this option a
           certificate request is expected instead.

     -set_serial n
           Specifies the serial number to use.  This option can be used with
           either the -signkey or -CA options.  If used in conjunction with
           the -CA option, the serial number file (as specified by the
           -CAserial or -CAcreateserial options) is not used.

           The serial number can be decimal or hex (if preceded by ‘0x’).
           Negative serial numbers can also be specified but their use is not
           recommended.

     -signkey file
           This option causes the input file to be self-signed using the sup‐
           plied private key.

           If the input file is a certificate, it sets the issuer name to the
           subject name (i.e. makes it self-signed), changes the public key to
           the supplied value, and changes the start and end dates.  The start
           date is set to the current time and the end date is set to a value
           determined by the -days option.  Any certificate extensions are re‐
           tained unless the -clrext option is supplied.

           If the input is a certificate request, a self-signed certificate is
           created using the supplied private key using the subject name in
           the request.

     -x509toreq
           Converts a certificate into a certificate request.  The -signkey
           option is used to pass the required private key.

X509 NAME OPTIONS
     The -nameopt command line switch determines how the subject and issuer
     names are displayed.  If no -nameopt switch is present, the default
     "oneline" format is used which is compatible with previous versions of
     OpenSSL.  Each option is described in detail below; all options can be
     preceded by a ‘-’ to turn the option off.  Only compat, RFC2253, oneline,
     and multiline will normally be used.

     align
           Align field values for a more readable output.  Only usable with
           sep_multiline.

     compat
           Use the old format.  This is equivalent to specifying no name op‐
           tions at all.

     dn_rev
           Reverse the fields of the DN.  This is required by RFC 2253.  As a
           side effect, this also reverses the order of multiple AVAs but this
           is permissible.

     dump_all
           Dump all fields.  This option, when used with dump_der, allows the
           DER encoding of the structure to be unambiguously determined.

     dump_der
           When this option is set, any fields that need to be hexdumped will
           be dumped using the DER encoding of the field.  Otherwise just the
           content octets will be displayed.  Both options use the RFC 2253
           #XXXX... format.

     dump_nostr
           Dump non-character string types (for example OCTET STRING); if this
           option is not set, non-character string types will be displayed as
           though each content octet represents a single character.

     dump_unknown
           Dump any field whose OID is not recognised by OpenSSL.

     esc_2253
           Escape the "special" characters required by RFC 2253 in a field
           that is “ ,+"<>;”.  Additionally, ‘#’ is escaped at the beginning
           of a string and a space character at the beginning or end of a
           string.

     esc_ctrl
           Escape control characters.  That is, those with ASCII values less
           than 0x20 (space) and the delete (0x7f) character.  They are es‐
           caped using the RFC 2253 \XX notation (where XX are two hex digits
           representing the character value).

     esc_msb
           Escape characters with the MSB set; that is, with ASCII values
           larger than 127.

     multiline
           A multiline format.  It is equivalent to esc_ctrl, esc_msb,
           sep_multiline, space_eq, lname, and align.

     no_type
           This option does not attempt to interpret multibyte characters in
           any way.  That is, their content octets are merely dumped as though
           one octet represents each character.  This is useful for diagnostic
           purposes but will result in rather odd looking output.

     nofname, sname, lname, oid
           These options alter how the field name is displayed.  nofname does
           not display the field at all.  sname uses the "short name" form (CN
           for commonName, for example).  lname uses the long form.  oid rep‐
           resents the OID in numerical form and is useful for diagnostic pur‐
           pose.

     oneline
           A oneline format which is more readable than RFC2253.  It is equiv‐
           alent to specifying the esc_2253, esc_ctrl, esc_msb, utf8,
           dump_nostr, dump_der, use_quote, sep_comma_plus_spc, space_eq, and
           sname options.

     RFC2253
           Displays names compatible with RFC 2253; equivalent to esc_2253,
           esc_ctrl, esc_msb, utf8, dump_nostr, dump_unknown, dump_der,
           sep_comma_plus, dn_rev, and sname.

     sep_comma_plus, sep_comma_plus_space, sep_semi_plus_space, sep_multiline
           These options determine the field separators.  The first character
           is between RDNs and the second between multiple AVAs (multiple AVAs
           are very rare and their use is discouraged).  The options ending in
           "space" additionally place a space after the separator to make it
           more readable.  The sep_multiline uses a linefeed character for the
           RDN separator and a spaced ‘+’ for the AVA separator.  It also in‐
           dents the fields by four characters.

     show_type
           Show the type of the ASN1 character string.  The type precedes the
           field contents.  For example "BMPSTRING: Hello World".

     space_eq
           Places spaces round the ‘=’ character which follows the field name.

     use_quote
           Escapes some characters by surrounding the whole string with ‘"’
           characters.  Without the option, all escaping is done with the ‘\’
           character.

     utf8  Convert all strings to UTF8 format first.  This is required by RFC
           2253.  If you are lucky enough to have a UTF8 compatible terminal,
           the use of this option (and not setting esc_msb) may result in the
           correct display of multibyte (international) characters.  If this
           option is not present, multibyte characters larger than 0xff will
           be represented using the format \UXXXX for 16 bits and \WXXXXXXXX
           for 32 bits.  Also, if this option is off, any UTF8Strings will be
           converted to their character form first.

X509 TEXT OPTIONS
     As well as customising the name output format, it is also possible to
     customise the actual fields printed using the -certopt options when the
     -text option is present.  The default behaviour is to print all fields.

     ca_default
           The value used by the ca utility; equivalent to no_issuer,
           no_pubkey, no_header, no_version, no_sigdump, and no_signame.

     compatible
           Use the old format.  This is equivalent to specifying no output op‐
           tions at all.

     ext_default
           Retain default extension behaviour: attempt to print out unsup‐
           ported certificate extensions.

     ext_dump
           Hex dump unsupported extensions.

     ext_error
           Print an error message for unsupported certificate extensions.

     ext_parse
           ASN1 parse unsupported extensions.

     no_aux
           Don't print out certificate trust information.

     no_extensions
           Don't print out any X509V3 extensions.

     no_header
           Don't print header information: that is, the lines saying
           "Certificate" and "Data".

     no_issuer
           Don't print out the issuer name.

     no_pubkey
           Don't print out the public key.

     no_serial
           Don't print out the serial number.

     no_sigdump
           Don't give a hexadecimal dump of the certificate signature.

     no_signame
           Don't print out the signature algorithm used.

     no_subject
           Don't print out the subject name.

     no_validity
           Don't print the validity; that is, the notBefore and notAfter
           fields.

     no_version
           Don't print out the version number.

X509 EXAMPLES
     Display the contents of a certificate:

           $ openssl x509 -in cert.pem -noout -text

     Display the certificate serial number:

           $ openssl x509 -in cert.pem -noout -serial

     Display the certificate subject name:

           $ openssl x509 -in cert.pem -noout -subject

     Display the certificate subject name in RFC 2253 form:

           $ openssl x509 -in cert.pem -noout -subject -nameopt RFC2253

     Display the certificate subject name in oneline form on a terminal sup‐
     porting UTF8:

           $ openssl x509 -in cert.pem -noout -subject \
                   -nameopt oneline,-esc_msb

     Display the certificate MD5 fingerprint:

           $ openssl x509 -in cert.pem -noout -fingerprint

     Display the certificate SHA1 fingerprint:

           $ openssl x509 -sha1 -in cert.pem -noout -fingerprint

     Convert a certificate from PEM to DER format:

           $ openssl x509 -in cert.pem -inform PEM -out cert.der -outform DER

     Convert a certificate to a certificate request:

           $ openssl x509 -x509toreq -in cert.pem -out req.pem \
                   -signkey key.pem

     Convert a certificate request into a self-signed certificate using exten‐
     sions for a CA:

           $ openssl x509 -req -in careq.pem -extfile openssl.cnf -extensions \
                   v3_ca -signkey key.pem -out cacert.pem

     Sign a certificate request using the CA certificate above and add user
     certificate extensions:

           $ openssl x509 -req -in req.pem -extfile openssl.cnf -extensions \
                   v3_usr -CA cacert.pem -CAkey key.pem -CAcreateserial

     Set a certificate to be trusted for SSL client use and set its alias to
     "Steve's Class 1 CA":

           $ openssl x509 -in cert.pem -addtrust clientAuth \
                   -setalias "Steve's Class 1 CA" -out trust.pem

X509 NOTES
     The PEM format uses the header and footer lines:

           -----BEGIN CERTIFICATE-----
           -----END CERTIFICATE-----

     It will also handle files containing:

           -----BEGIN X509 CERTIFICATE-----
           -----END X509 CERTIFICATE-----

     Trusted certificates have the lines:

           -----BEGIN TRUSTED CERTIFICATE-----
           -----END TRUSTED CERTIFICATE-----

     The conversion to UTF8 format used with the name options assumes that
     T61Strings use the ISO 8859-1 character set.  This is wrong, but Netscape
     and MSIE do this, as do many certificates.  So although this is incorrect
     it is more likely to display the majority of certificates correctly.

     The -fingerprint option takes the digest of the DER-encoded certificate.
     This is commonly called a "fingerprint".  Because of the nature of mes‐
     sage digests, the fingerprint of a certificate is unique to that certifi‐
     cate and two certificates with the same fingerprint can be considered to
     be the same.

     The Netscape fingerprint uses MD5, whereas MSIE uses SHA1.

     The -email option searches the subject name and the subject alternative
     name extension.  Only unique email addresses will be printed out: it will
     not print the same address more than once.

X.509 CERTIFICATE EXTENSIONS
     The -purpose option checks the certificate extensions and determines what
     the certificate can be used for.  The actual checks done are rather com‐
     plex and include various hacks and workarounds to handle broken certifi‐
     cates and software.

     The same code is used when verifying untrusted certificates in chains, so
     this section is useful if a chain is rejected by the verify code.

     The basicConstraints extension CA flag is used to determine whether the
     certificate can be used as a CA.  If the CA flag is true, it is a CA; if
     the CA flag is false, it is not a CA.  All CAs should have the CA flag
     set to true.

     If the basicConstraints extension is absent, then the certificate is con‐
     sidered to be a "possible CA"; other extensions are checked according to
     the intended use of the certificate.  A warning is given in this case be‐
     cause the certificate should really not be regarded as a CA: however, it
     is allowed to be a CA to work around some broken software.

     If the certificate is a V1 certificate (and thus has no extensions) and
     it is self-signed, it is also assumed to be a CA but a warning is again
     given: this is to work around the problem of Verisign roots which are V1
     self-signed certificates.

     If the keyUsage extension is present, then additional restraints are made
     on the uses of the certificate.  A CA certificate must have the
     keyCertSign bit set if the keyUsage extension is present.

     The extended key usage extension places additional restrictions on the
     certificate uses.  If this extension is present (whether critical or
     not), the key can only be used for the purposes specified.

     A complete description of each test is given below.  The comments about
     basicConstraints and keyUsage and V1 certificates above apply to all CA
     certificates.

     SSL Client
           The extended key usage extension must be absent or include the "web
           client authentication" OID.  keyUsage must be absent or it must
           have the digitalSignature bit set.  Netscape certificate type must
           be absent or it must have the SSL client bit set.

     SSL Client CA
           The extended key usage extension must be absent or include the "web
           client authentication" OID.  Netscape certificate type must be ab‐
           sent or it must have the SSL CA bit set: this is used as a work
           around if the basicConstraints extension is absent.

     SSL Server
           The extended key usage extension must be absent or include the "web
           server authentication" and/or one of the SGC OIDs.  keyUsage must
           be absent or it must have the digitalSignature set, the
           keyEncipherment set, or both bits set.  Netscape certificate type
           must be absent or have the SSL server bit set.

     SSL Server CA
           The extended key usage extension must be absent or include the "web
           server authentication" and/or one of the SGC OIDs.  Netscape cer‐
           tificate type must be absent or the SSL CA bit must be set: this is
           used as a work around if the basicConstraints extension is absent.

     Netscape SSL Server
           For Netscape SSL clients to connect to an SSL server; it must have
           the keyEncipherment bit set if the keyUsage extension is present.
           This isn't always valid because some cipher suites use the key for
           digital signing.  Otherwise it is the same as a normal SSL server.

     Common S/MIME Client Tests
           The extended key usage extension must be absent or include the
           "email protection" OID.  Netscape certificate type must be absent
           or should have the S/MIME bit set.  If the S/MIME bit is not set in
           Netscape certificate type, then the SSL client bit is tolerated as
           an alternative but a warning is shown: this is because some
           Verisign certificates don't set the S/MIME bit.

     S/MIME Signing
           In addition to the common S/MIME client tests, the digitalSignature
           bit must be set if the keyUsage extension is present.

     S/MIME Encryption
           In addition to the common S/MIME tests, the keyEncipherment bit
           must be set if the keyUsage extension is present.

     S/MIME CA
           The extended key usage extension must be absent or include the
           "email protection" OID.  Netscape certificate type must be absent
           or must have the S/MIME CA bit set: this is used as a work around
           if the basicConstraints extension is absent.

     CRL Signing
           The keyUsage extension must be absent or it must have the CRL sign‐
           ing bit set.

     CRL Signing CA
           The normal CA tests apply.  Except in this case the
           basicConstraints extension must be present.

X509 BUGS
     Extensions in certificates are not transferred to certificate requests
     and vice versa.

     It is possible to produce invalid certificates or requests by specifying
     the wrong private key or using inconsistent options in some cases: these
     should be checked.

     There should be options to explicitly set such things as start and end
     dates, rather than an offset from the current time.

     The code to implement the verify behaviour described in the X509 TRUST
     SETTINGS is currently being developed.  It thus describes the intended
     behaviour rather than the current behaviour.  It is hoped that it will
     represent reality in OpenSSL 0.9.5 and later.

X509 HISTORY
     Before OpenSSL 0.9.8, the default digest for RSA keys was MD5.

     The hash algorithm used in the -subject_hash and -issuer_hash options be‐
     fore OpenSSL 1.0.0 was based on the deprecated MD5 algorithm and the en‐
     coding of the distinguished name.  In OpenSSL 1.0.0 and later it is based
     on a canonical version of the DN using SHA1.  This means that any direc‐
     tories using the old form must have their links rebuilt using c_rehash or
     similar.

COMMON NOTATION
     Several commands share a common syntax, as detailed below.

     Password arguments, typically specified using -passin and -passout for
     input and output passwords, allow passwords to be obtained from a variety
     of sources.  Both of these options take a single argument, described be‐
     low.  If no password argument is given and a password is required, then
     the user is prompted to enter one: this will typically be read from the
     current terminal with echoing turned off.

           pass:password  The actual password is password.  Since the password
                          is visible to utilities, this form should only be
                          used where security is not important.

           env:var        Obtain the password from the environment variable
                          var.  Since the environment of other processes is
                          visible, this option should be used with caution.

           file:path      The first line of path is the password.  If the same
                          path argument is supplied to -passin and -passout,
                          then the first line will be used for the input pass‐
                          word and the next line for the output password.
                          path need not refer to a regular file: it could, for
                          example, refer to a device or named pipe.

           fd:number      Read the password from the file descriptor number.
                          This can be used to send the data via a pipe, for
                          example.

           stdin          Read the password from standard input.

     File formats, typically specified using -inform and -outform, indicate
     the type of file being read from or the file format to write.  The argu‐
     ment is case insensitive.

           der     Distinguished Encoding Rules (DER) is a binary format.
           pem     Privacy Enhanced Mail (PEM) is base64-encoded.
           txt     Plain ASCII text.

ENVIRONMENT
     The following environment variables affect the execution of openssl:

     OPENSSL_CONF          The location of the master configuration file.

FILES
     /etc/ssl/             Default config directory for openssl.
     /etc/ssl/lib/         Unused.
     /etc/ssl/private/     Default private key directory.
     /etc/ssl/openssl.cnf  Default configuration file for openssl.
     /etc/ssl/x509v3.cnf   Default configuration file for x509 certificates.

SEE ALSO
     nc(1), ssl(8), starttls(8)

STANDARDS
     The SSL Protocol, Netscape Communications Corp., February 1995.

     The SSL 3.0 Protocol, Netscape Communications Corp., November 1996.

     T. Dierks and C. Allen, The TLS Protocol Version 1.0, RFC 2246, January
     1999.

     M. Wahl, S. Killie, and T. Howes, Lightweight Directory Access Protocol
     (v3): UTF-8 String Representation of Distinguished Names, RFC 2253,
     December 1997.

     B. Kaliski, PKCS #7: Cryptographic Message Syntax Version 1.5, RFC 2315,
     March 1998.

     R. Housley, W. Ford, W. Polk, and D. Solo, Internet X.509 Public Key
     Infrastructure Certificate and CRL Profile, RFC 2459, January 1999.

     M. Myers, R. Ankney, A. Malpani, S. Galperin, and C. Adams, X.509
     Internet Public Key Infrastructure Online Certificate Status Protocol –
     OCSP, RFC 2560, June 1999.

     R. Housley, Cryptographic Message Syntax, RFC 2630, June 1999.

     P. Chown, Advanced Encryption Standard (AES) Ciphersuites for Transport
     Layer Security (TLS), RFC 3268, June 2002.

HISTORY
     The openssl(1) document appeared in OpenSSL 0.9.2.  The list-XXX-commands
     pseudo-commands were added in OpenSSL 0.9.3; the no-XXX pseudo-commands
     were added in OpenSSL 0.9.5a; the list-XXX-algorithms pseudo-commands
     were added in OpenSSL 1.0.0.

BSD                              July 21, 2016                             BSD
