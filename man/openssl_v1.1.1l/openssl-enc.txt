ENC(1)                              OpenSSL                             ENC(1)



NNAAMMEE
       openssl-enc, enc - symmetric cipher routines

SSYYNNOOPPSSIISS
       ooppeennssssll eenncc --_cc_ii_pp_hh_ee_rr [--hheellpp] [--lliisstt] [--cciipphheerrss] [--iinn ffiilleennaammee] [--oouutt
       ffiilleennaammee] [--ppaassss aarrgg] [--ee] [--dd] [--aa] [--bbaassee6644] [--AA] [--kk ppaasssswwoorrdd]
       [--kkffiillee ffiilleennaammee] [--KK kkeeyy] [--iivv IIVV] [--SS ssaalltt] [--ssaalltt] [--nnoossaalltt] [--zz]
       [--mmdd ddiiggeesstt] [--iitteerr ccoouunntt] [--ppbbkkddff22] [--pp] [--PP] [--bbuuffssiizzee nnuummbbeerr]
       [--nnooppaadd] [--ddeebbuugg] [--nnoonnee] [--rraanndd ffiillee......]  [--wwrriitteerraanndd ffiillee] [--eennggiinnee
       iidd]

       ooppeennssssll _[_c_i_p_h_e_r_] [......]

DDEESSCCRRIIPPTTIIOONN
       The symmetric cipher commands allow data to be encrypted or decrypted
       using various block and stream ciphers using keys based on passwords or
       explicitly provided. Base64 encoding or decoding can also be performed
       either by itself or in addition to the encryption or decryption.

OOPPTTIIOONNSS
       --hheellpp
           Print out a usage message.

       --lliisstt
           List all supported ciphers.

       --cciipphheerrss
           Alias of -list to display all supported ciphers.

       --iinn ffiilleennaammee
           The input filename, standard input by default.

       --oouutt ffiilleennaammee
           The output filename, standard output by default.

       --ppaassss aarrgg
           The password source. For more information about the format of aarrgg
           see "Pass Phrase Options" in ooppeennssssll(1).

       --ee  Encrypt the input data: this is the default.

       --dd  Decrypt the input data.

       --aa  Base64 process the data. This means that if encryption is taking
           place the data is base64 encoded after encryption. If decryption is
           set then the input data is base64 decoded before being decrypted.

       --bbaassee6644
           Same as --aa

       --AA  If the --aa option is set then base64 process the data on one line.

       --kk ppaasssswwoorrdd
           The password to derive the key from. This is for compatibility with
           previous versions of OpenSSL. Superseded by the --ppaassss argument.

       --kkffiillee ffiilleennaammee
           Read the password to derive the key from the first line of
           ffiilleennaammee.  This is for compatibility with previous versions of
           OpenSSL. Superseded by the --ppaassss argument.

       --mmdd ddiiggeesstt
           Use the specified digest to create the key from the passphrase.
           The default algorithm is sha-256.

       --iitteerr ccoouunntt
           Use a given number of iterations on the password in deriving the
           encryption key.  High values increase the time required to brute-
           force the resulting file.  This option enables the use of PBKDF2
           algorithm to derive the key.

       --ppbbkkddff22
           Use PBKDF2 algorithm with default iteration count unless otherwise
           specified.

       --nnoossaalltt
           Don't use a salt in the key derivation routines. This option SSHHOOUULLDD
           NNOOTT be used except for test purposes or compatibility with ancient
           versions of OpenSSL.

       --ssaalltt
           Use salt (randomly generated or provide with --SS option) when
           encrypting, this is the default.

       --SS ssaalltt
           The actual salt to use: this must be represented as a string of hex
           digits.

       --KK kkeeyy
           The actual key to use: this must be represented as a string
           comprised only of hex digits. If only the key is specified, the IV
           must additionally specified using the --iivv option. When both a key
           and a password are specified, the key given with the --KK option will
           be used and the IV generated from the password will be taken. It
           does not make much sense to specify both key and password.

       --iivv IIVV
           The actual IV to use: this must be represented as a string
           comprised only of hex digits. When only the key is specified using
           the --KK option, the IV must explicitly be defined. When a password
           is being specified using one of the other options, the IV is
           generated from this password.

       --pp  Print out the key and IV used.

       --PP  Print out the key and IV used then immediately exit: don't do any
           encryption or decryption.

       --bbuuffssiizzee nnuummbbeerr
           Set the buffer size for I/O.

       --nnooppaadd
           Disable standard block padding.

       --ddeebbuugg
           Debug the BIOs used for I/O.

       --zz  Compress or decompress encrypted data using zlib after encryption
           or before decryption. This option exists only if OpenSSL was
           compiled with the zlib or zlib-dynamic option.

       --nnoonnee
           Use NULL cipher (no encryption or decryption of input).

       --rraanndd ffiillee......
           A file or files containing random data used to seed the random
           number generator.  Multiple files can be specified separated by an
           OS-dependent character.  The separator is ;; for MS-Windows, ,, for
           OpenVMS, and :: for all others.

       [--wwrriitteerraanndd ffiillee]
           Writes random data to the specified _f_i_l_e upon exit.  This can be
           used with a subsequent --rraanndd flag.

NNOOTTEESS
       The program can be called either as ooppeennssssll cciipphheerr or ooppeennssssll eenncc
       --cciipphheerr. The first form doesn't work with engine-provided ciphers,
       because this form is processed before the configuration file is read
       and any ENGINEs loaded.  Use the lliisstt command to get a list of
       supported ciphers.

       Engines which provide entirely new encryption algorithms (such as the
       ccgost engine which provides gost89 algorithm) should be configured in
       the configuration file. Engines specified on the command line using
       -engine options can only be used for hardware-assisted implementations
       of ciphers which are supported by the OpenSSL core or another engine
       specified in the configuration file.

       When the enc command lists supported ciphers, ciphers provided by
       engines, specified in the configuration files are listed too.

       A password will be prompted for to derive the key and IV if necessary.

       The --ssaalltt option should AALLWWAAYYSS be used if the key is being derived from
       a password unless you want compatibility with previous versions of
       OpenSSL.

       Without the --ssaalltt option it is possible to perform efficient dictionary
       attacks on the password and to attack stream cipher encrypted data. The
       reason for this is that without the salt the same password always
       generates the same encryption key. When the salt is being used the
       first eight bytes of the encrypted data are reserved for the salt: it
       is generated at random when encrypting a file and read from the
       encrypted file when it is decrypted.

       Some of the ciphers do not have large keys and others have security
       implications if not used correctly. A beginner is advised to just use a
       strong block cipher, such as AES, in CBC mode.

       All the block ciphers normally use PKCS#5 padding, also known as
       standard block padding. This allows a rudimentary integrity or password
       check to be performed. However, since the chance of random data passing
       the test is better than 1 in 256 it isn't a very good test.

       If padding is disabled then the input data must be a multiple of the
       cipher block length.

       All RC2 ciphers have the same key and effective key length.

       Blowfish and RC5 algorithms use a 128 bit key.

SSUUPPPPOORRTTEEDD CCIIPPHHEERRSS
       Note that some of these ciphers can be disabled at compile time and
       some are available only if an appropriate engine is configured in the
       configuration file. The output of the eenncc command run with the --cciipphheerrss
       option (that is ooppeennssssll eenncc --cciipphheerrss) produces a list of ciphers,
       supported by your version of OpenSSL, including ones provided by
       configured engines.

       The eenncc program does not support authenticated encryption modes like
       CCM and GCM, and will not support such modes in the future.  The eenncc
       interface by necessity must begin streaming output (e.g., to standard
       output when --oouutt is not used) before the authentication tag could be
       validated, leading to the usage of eenncc in pipelines that begin
       processing untrusted data and are not capable of rolling back upon
       authentication failure.  The AEAD modes currently in common use also
       suffer from catastrophic failure of confidentiality and/or integrity
       upon reuse of key/iv/nonce, and since eenncc places the entire burden of
       key/iv/nonce management upon the user, the risk of exposing AEAD modes
       is too great to allow.  These key/iv/nonce management issues also
       affect other modes currently exposed in eenncc, but the failure modes are
       less extreme in these cases, and the functionality cannot be removed
       with a stable release branch.  For bulk encryption of data, whether
       using authenticated encryption modes or other modes, ccmmss(1) is
       recommended, as it provides a standard data format and performs the
       needed key/iv/nonce management.

        base64             Base 64

        bf-cbc             Blowfish in CBC mode
        bf                 Alias for bf-cbc
        blowfish           Alias for bf-cbc
        bf-cfb             Blowfish in CFB mode
        bf-ecb             Blowfish in ECB mode
        bf-ofb             Blowfish in OFB mode

        cast-cbc           CAST in CBC mode
        cast               Alias for cast-cbc
        cast5-cbc          CAST5 in CBC mode
        cast5-cfb          CAST5 in CFB mode
        cast5-ecb          CAST5 in ECB mode
        cast5-ofb          CAST5 in OFB mode

        chacha20           ChaCha20 algorithm

        des-cbc            DES in CBC mode
        des                Alias for des-cbc
        des-cfb            DES in CFB mode
        des-ofb            DES in OFB mode
        des-ecb            DES in ECB mode

        des-ede-cbc        Two key triple DES EDE in CBC mode
        des-ede            Two key triple DES EDE in ECB mode
        des-ede-cfb        Two key triple DES EDE in CFB mode
        des-ede-ofb        Two key triple DES EDE in OFB mode

        des-ede3-cbc       Three key triple DES EDE in CBC mode
        des-ede3           Three key triple DES EDE in ECB mode
        des3               Alias for des-ede3-cbc
        des-ede3-cfb       Three key triple DES EDE CFB mode
        des-ede3-ofb       Three key triple DES EDE in OFB mode

        desx               DESX algorithm.

        gost89             GOST 28147-89 in CFB mode (provided by ccgost engine)
        gost89-cnt        `GOST 28147-89 in CNT mode (provided by ccgost engine)

        idea-cbc           IDEA algorithm in CBC mode
        idea               same as idea-cbc
        idea-cfb           IDEA in CFB mode
        idea-ecb           IDEA in ECB mode
        idea-ofb           IDEA in OFB mode

        rc2-cbc            128 bit RC2 in CBC mode
        rc2                Alias for rc2-cbc
        rc2-cfb            128 bit RC2 in CFB mode
        rc2-ecb            128 bit RC2 in ECB mode
        rc2-ofb            128 bit RC2 in OFB mode
        rc2-64-cbc         64 bit RC2 in CBC mode
        rc2-40-cbc         40 bit RC2 in CBC mode

        rc4                128 bit RC4
        rc4-64             64 bit RC4
        rc4-40             40 bit RC4

        rc5-cbc            RC5 cipher in CBC mode
        rc5                Alias for rc5-cbc
        rc5-cfb            RC5 cipher in CFB mode
        rc5-ecb            RC5 cipher in ECB mode
        rc5-ofb            RC5 cipher in OFB mode

        seed-cbc           SEED cipher in CBC mode
        seed               Alias for seed-cbc
        seed-cfb           SEED cipher in CFB mode
        seed-ecb           SEED cipher in ECB mode
        seed-ofb           SEED cipher in OFB mode

        sm4-cbc            SM4 cipher in CBC mode
        sm4                Alias for sm4-cbc
        sm4-cfb            SM4 cipher in CFB mode
        sm4-ctr            SM4 cipher in CTR mode
        sm4-ecb            SM4 cipher in ECB mode
        sm4-ofb            SM4 cipher in OFB mode

        aes-[128|192|256]-cbc  128/192/256 bit AES in CBC mode
        aes[128|192|256]       Alias for aes-[128|192|256]-cbc
        aes-[128|192|256]-cfb  128/192/256 bit AES in 128 bit CFB mode
        aes-[128|192|256]-cfb1 128/192/256 bit AES in 1 bit CFB mode
        aes-[128|192|256]-cfb8 128/192/256 bit AES in 8 bit CFB mode
        aes-[128|192|256]-ctr  128/192/256 bit AES in CTR mode
        aes-[128|192|256]-ecb  128/192/256 bit AES in ECB mode
        aes-[128|192|256]-ofb  128/192/256 bit AES in OFB mode

        aria-[128|192|256]-cbc  128/192/256 bit ARIA in CBC mode
        aria[128|192|256]       Alias for aria-[128|192|256]-cbc
        aria-[128|192|256]-cfb  128/192/256 bit ARIA in 128 bit CFB mode
        aria-[128|192|256]-cfb1 128/192/256 bit ARIA in 1 bit CFB mode
        aria-[128|192|256]-cfb8 128/192/256 bit ARIA in 8 bit CFB mode
        aria-[128|192|256]-ctr  128/192/256 bit ARIA in CTR mode
        aria-[128|192|256]-ecb  128/192/256 bit ARIA in ECB mode
        aria-[128|192|256]-ofb  128/192/256 bit ARIA in OFB mode

        camellia-[128|192|256]-cbc  128/192/256 bit Camellia in CBC mode
        camellia[128|192|256]       Alias for camellia-[128|192|256]-cbc
        camellia-[128|192|256]-cfb  128/192/256 bit Camellia in 128 bit CFB mode
        camellia-[128|192|256]-cfb1 128/192/256 bit Camellia in 1 bit CFB mode
        camellia-[128|192|256]-cfb8 128/192/256 bit Camellia in 8 bit CFB mode
        camellia-[128|192|256]-ctr  128/192/256 bit Camellia in CTR mode
        camellia-[128|192|256]-ecb  128/192/256 bit Camellia in ECB mode
        camellia-[128|192|256]-ofb  128/192/256 bit Camellia in OFB mode

EEXXAAMMPPLLEESS
       Just base64 encode a binary file:

        openssl base64 -in file.bin -out file.b64

       Decode the same file

        openssl base64 -d -in file.b64 -out file.bin

       Encrypt a file using AES-128 using a prompted password and PBKDF2 key
       derivation:

        openssl enc -aes128 -pbkdf2 -in file.txt -out file.aes128

       Decrypt a file using a supplied password:

        openssl enc -aes128 -pbkdf2 -d -in file.aes128 -out file.txt \
           -pass pass:<password>

       Encrypt a file then base64 encode it (so it can be sent via mail for
       example) using AES-256 in CTR mode and PBKDF2 key derivation:

        openssl enc -aes-256-ctr -pbkdf2 -a -in file.txt -out file.aes256

       Base64 decode a file then decrypt it using a password supplied in a
       file:

        openssl enc -aes-256-ctr -pbkdf2 -d -a -in file.aes256 -out file.txt \
           -pass file:<passfile>

BBUUGGSS
       The --AA option when used with large files doesn't work properly.

       The eenncc program only supports a fixed number of algorithms with certain
       parameters. So if, for example, you want to use RC2 with a 76 bit key
       or RC4 with an 84 bit key you can't use this program.

HHIISSTTOORRYY
       The default digest was changed from MD5 to SHA256 in OpenSSL 1.1.0.

       The --lliisstt option was added in OpenSSL 1.1.1e.

CCOOPPYYRRIIGGHHTT
       Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



1.1.1l                            2021-08-24                            ENC(1)
