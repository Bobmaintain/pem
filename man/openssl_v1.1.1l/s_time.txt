S_TIME(1)                           OpenSSL                          S_TIME(1)



NNAAMMEE
       openssl-s_time, s_time - SSL/TLS performance timing program

SSYYNNOOPPSSIISS
       ooppeennssssll ss__ttiimmee [--hheellpp] [--ccoonnnneecctt hhoosstt::ppoorrtt] [--wwwwww ppaaggee] [--cceerrtt
       ffiilleennaammee] [--kkeeyy ffiilleennaammee] [--CCAAppaatthh ddiirreeccttoorryy] [--CCAAffiillee ffiilleennaammee]
       [--nnoo--CCAAffiillee] [--nnoo--CCAAppaatthh] [--rreeuussee] [--nneeww] [--vveerriiffyy ddeepptthh] [--nnaammeeoopptt
       ooppttiioonn] [--ttiimmee sseeccoonnddss] [--ssssll33] [--bbuuggss] [--cciipphheerr cciipphheerrlliisstt]
       [--cciipphheerrssuuiitteess vvaall]

DDEESSCCRRIIPPTTIIOONN
       The ss__ttiimmee command implements a generic SSL/TLS client which connects
       to a remote host using SSL/TLS. It can request a page from the server
       and includes the time to transfer the payload data in its timing
       measurements. It measures the number of connections within a given
       timeframe, the amount of data transferred (if any), and calculates the
       average time spent for one connection.

OOPPTTIIOONNSS
       --hheellpp
           Print out a usage message.

       --ccoonnnneecctt hhoosstt::ppoorrtt
           This specifies the host and optional port to connect to.

       --wwwwww ppaaggee
           This specifies the page to GET from the server. A value of '/' gets
           the index.htm[l] page. If this parameter is not specified, then
           ss__ttiimmee will only perform the handshake to establish SSL connections
           but not transfer any payload data.

       --cceerrtt cceerrttnnaammee
           The certificate to use, if one is requested by the server. The
           default is not to use a certificate. The file is in PEM format.

       --kkeeyy kkeeyyffiillee
           The private key to use. If not specified then the certificate file
           will be used. The file is in PEM format.

       --vveerriiffyy ddeepptthh
           The verify depth to use. This specifies the maximum length of the
           server certificate chain and turns on server certificate
           verification.  Currently the verify operation continues after
           errors so all the problems with a certificate chain can be seen. As
           a side effect the connection will never fail due to a server
           certificate verify failure.

       --nnaammeeoopptt ooppttiioonn
           Option which determines how the subject or issuer names are
           displayed. The ooppttiioonn argument can be a single option or multiple
           options separated by commas.  Alternatively the --nnaammeeoopptt switch may
           be used more than once to set multiple options. See the xx550099(1)
           manual page for details.

       --CCAAppaatthh ddiirreeccttoorryy
           The directory to use for server certificate verification. This
           directory must be in "hash format", see vveerriiffyy for more
           information. These are also used when building the client
           certificate chain.

       --CCAAffiillee ffiillee
           A file containing trusted certificates to use during server
           authentication and to use when attempting to build the client
           certificate chain.

       --nnoo--CCAAffiillee
           Do not load the trusted CA certificates from the default file
           location

       --nnoo--CCAAppaatthh
           Do not load the trusted CA certificates from the default directory
           location

       --nneeww
           Performs the timing test using a new session ID for each
           connection.  If neither --nneeww nor --rreeuussee are specified, they are
           both on by default and executed in sequence.

       --rreeuussee
           Performs the timing test using the same session ID; this can be
           used as a test that session caching is working. If neither --nneeww nor
           --rreeuussee are specified, they are both on by default and executed in
           sequence.

       --ssssll33
           This option disables the use of SSL version 3. By default the
           initial handshake uses a method which should be compatible with all
           servers and permit them to use SSL v3 or TLS as appropriate.

           The timing program is not as rich in options to turn protocols on
           and off as the ss__cclliieenntt(1) program and may not connect to all
           servers.  Unfortunately there are a lot of ancient and broken
           servers in use which cannot handle this technique and will fail to
           connect. Some servers only work if TLS is turned off with the --ssssll33
           option.

           Note that this option may not be available, depending on how
           OpenSSL was built.

       --bbuuggss
           There are several known bugs in SSL and TLS implementations. Adding
           this option enables various workarounds.

       --cciipphheerr cciipphheerrlliisstt
           This allows the TLSv1.2 and below cipher list sent by the client to
           be modified.  This list will be combined with any TLSv1.3
           ciphersuites that have been configured. Although the server
           determines which cipher suite is used it should take the first
           supported cipher in the list sent by the client. See cciipphheerrss(1) for
           more information.

       --cciipphheerrssuuiitteess vvaall
           This allows the TLSv1.3 ciphersuites sent by the client to be
           modified. This list will be combined with any TLSv1.2 and below
           ciphersuites that have been configured. Although the server
           determines which cipher suite is used it should take the first
           supported cipher in the list sent by the client. See cciipphheerrss(1) for
           more information. The format for this list is a simple colon (":")
           separated list of TLSv1.3 ciphersuite names.

       --ttiimmee lleennggtthh
           Specifies how long (in seconds) ss__ttiimmee should establish connections
           and optionally transfer payload data from a server. Server and
           client performance and the link speed determine how many
           connections ss__ttiimmee can establish.

NNOOTTEESS
       ss__ttiimmee can be used to measure the performance of an SSL connection.  To
       connect to an SSL HTTP server and get the default page the command

        openssl s_time -connect servername:443 -www / -CApath yourdir -CAfile yourfile.pem -cipher commoncipher [-ssl3]

       would typically be used (https uses port 443). 'commoncipher' is a
       cipher to which both client and server can agree, see the cciipphheerrss(1)
       command for details.

       If the handshake fails then there are several possible causes, if it is
       nothing obvious like no client certificate then the --bbuuggss and --ssssll33
       options can be tried in case it is a buggy server. In particular you
       should play with these options bbeeffoorree submitting a bug report to an
       OpenSSL mailing list.

       A frequent problem when attempting to get client certificates working
       is that a web client complains it has no certificates or gives an empty
       list to choose from. This is normally because the server is not sending
       the clients certificate authority in its "acceptable CA list" when it
       requests a certificate. By using ss__cclliieenntt(1) the CA list can be viewed
       and checked. However, some servers only request client authentication
       after a specific URL is requested. To obtain the list in this case it
       is necessary to use the --pprreexxiitt option of ss__cclliieenntt(1) and send an HTTP
       request for an appropriate page.

       If a certificate is specified on the command line using the --cceerrtt
       option it will not be used unless the server specifically requests a
       client certificate. Therefore, merely including a client certificate on
       the command line is no guarantee that the certificate works.

BBUUGGSS
       Because this program does not have all the options of the ss__cclliieenntt(1)
       program to turn protocols on and off, you may not be able to measure
       the performance of all protocols with all servers.

       The --vveerriiffyy option should really exit if the server verification fails.

SSEEEE AALLSSOO
       ss__cclliieenntt(1), ss__sseerrvveerr(1), cciipphheerrss(1)

CCOOPPYYRRIIGGHHTT
       Copyright 2004-2020 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



1.1.1l                            2021-08-24                         S_TIME(1)
