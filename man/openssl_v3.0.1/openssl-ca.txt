OPENSSL-CA(1ossl)                   OpenSSL                  OPENSSL-CA(1ossl)



NNAAMMEE
       openssl-ca - sample minimal CA application

SSYYNNOOPPSSIISS
       ooppeennssssll ccaa [--hheellpp] [--vveerrbboossee] [--ccoonnffiigg _f_i_l_e_n_a_m_e] [--nnaammee _s_e_c_t_i_o_n]
       [--sseeccttiioonn _s_e_c_t_i_o_n] [--ggeennccrrll] [--rreevvookkee _f_i_l_e] [--vvaalliidd _f_i_l_e] [--ssttaattuuss
       _s_e_r_i_a_l] [--uuppddaatteeddbb] [--ccrrll__rreeaassoonn _r_e_a_s_o_n] [--ccrrll__hhoolldd _i_n_s_t_r_u_c_t_i_o_n]
       [--ccrrll__ccoommpprroommiissee _t_i_m_e] [--ccrrll__CCAA__ccoommpprroommiissee _t_i_m_e] [--ccrrll__llaassttuuppddaattee _d_a_t_e]
       [--ccrrll__nneexxttuuppddaattee _d_a_t_e] [--ccrrllddaayyss _d_a_y_s] [--ccrrllhhoouurrss _h_o_u_r_s] [--ccrrllsseecc
       _s_e_c_o_n_d_s] [--ccrrlleexxttss _s_e_c_t_i_o_n] [--ssttaarrttddaattee _d_a_t_e] [--eennddddaattee _d_a_t_e] [--ddaayyss
       _a_r_g] [--mmdd _a_r_g] [--ppoolliiccyy _a_r_g] [--kkeeyyffiillee _f_i_l_e_n_a_m_e|_u_r_i] [--kkeeyyffoorrmm
       DDEERR|PPEEMM|PP1122|EENNGGIINNEE] [--kkeeyy _a_r_g] [--ppaassssiinn _a_r_g] [--cceerrtt _f_i_l_e] [--cceerrttffoorrmm
       DDEERR|PPEEMM|PP1122] [--sseellffssiiggnn] [--iinn _f_i_l_e] [--iinnffoorrmm DDEERR|<PEM>] [--oouutt _f_i_l_e]
       [--nnootteexxtt] [--ddaatteeoopptt] [--oouuttddiirr _d_i_r] [--iinnffiilleess] [--ssppkkaacc _f_i_l_e] [--ssss__cceerrtt
       _f_i_l_e] [--pprreesseerrvveeDDNN] [--nnooeemmaaiillDDNN] [--bbaattcchh] [--mmssiiee__hhaacckk] [--eexxtteennssiioonnss
       _s_e_c_t_i_o_n] [--eexxttffiillee _s_e_c_t_i_o_n] [--ssuubbjj _a_r_g] [--uuttff88] [--ssiiggoopptt _n_m:_v] [--vvffyyoopptt
       _n_m:_v] [--ccrreeaattee__sseerriiaall] [--rraanndd__sseerriiaall] [--mmuullttiivvaalluuee--rrddnn] [--rraanndd _f_i_l_e_s]
       [--wwrriitteerraanndd _f_i_l_e] [--eennggiinnee _i_d] [--pprroovviiddeerr _n_a_m_e] [--pprroovviiddeerr--ppaatthh _p_a_t_h]
       [--pprrooppqquueerryy _p_r_o_p_q] [_c_e_r_t_r_e_q...]

DDEESSCCRRIIPPTTIIOONN
       This command emulates a CA application.  See the WWAARRNNIINNGGSS especially
       when considering to use it productively.  It can be used to sign
       certificate requests (CSRs) in a variety of forms and generate
       certificate revocation lists (CRLs).  It also maintains a text database
       of issued certificates and their status.  When signing certificates, a
       single request can be specified with the --iinn option, or multiple
       requests can be processed by specifying a set of cceerrttrreeqq files after
       all options.

       Note that there are also very lean ways of generating certificates: the
       rreeqq and xx550099 commands can be used for directly creating certificates.
       See ooppeennssssll--rreeqq(1) and ooppeennssssll--xx550099(1) for details.

       The descriptions of the ccaa command options are divided into each
       purpose.

OOPPTTIIOONNSS
       --hheellpp
           Print out a usage message.

       --vveerrbboossee
           This prints extra details about the operations being performed.

       --ccoonnffiigg _f_i_l_e_n_a_m_e
           Specifies the configuration file to use.  Optional; for a
           description of the default value, see "COMMAND SUMMARY" in
           ooppeennssssll(1).

       --nnaammee _s_e_c_t_i_o_n, --sseeccttiioonn _s_e_c_t_i_o_n
           Specifies the configuration file section to use (overrides
           ddeeffaauulltt__ccaa in the ccaa section).

       --iinn _f_i_l_e_n_a_m_e
           An input filename containing a single certificate request (CSR) to
           be signed by the CA.

       --iinnffoorrmm DDEERR|PPEEMM
           The format of the data in certificate request input files;
           unspecified by default.  See ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --ssss__cceerrtt _f_i_l_e_n_a_m_e
           A single self-signed certificate to be signed by the CA.

       --ssppkkaacc _f_i_l_e_n_a_m_e
           A file containing a single Netscape signed public key and challenge
           and additional field values to be signed by the CA. See the SSPPKKAACC
           FFOORRMMAATT section for information on the required input and output
           format.

       --iinnffiilleess
           If present this should be the last option, all subsequent arguments
           are taken as the names of files containing certificate requests.

       --oouutt _f_i_l_e_n_a_m_e
           The output file to output certificates to. The default is standard
           output. The certificate details will also be printed out to this
           file in PEM format (except that --ssppkkaacc outputs DER format).

       --oouuttddiirr _d_i_r_e_c_t_o_r_y
           The directory to output certificates to. The certificate will be
           written to a filename consisting of the serial number in hex with
           _._p_e_m appended.

       --cceerrtt _f_i_l_e_n_a_m_e
           The CA certificate, which must match with --kkeeyyffiillee.

       --cceerrttffoorrmm DDEERR|PPEEMM|PP1122
           The format of the data in certificate input files; unspecified by
           default.  See ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --kkeeyyffiillee _f_i_l_e_n_a_m_e|_u_r_i
           The CA private key to sign certificate requests with.  This must
           match with --cceerrtt.

       --kkeeyyffoorrmm DDEERR|PPEEMM|PP1122|EENNGGIINNEE
           The format of the private key input file; unspecified by default.
           See ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --ssiiggoopptt _n_m:_v
           Pass options to the signature algorithm during sign operations.
           Names and values of these options are algorithm-specific.

       --vvffyyoopptt _n_m:_v
           Pass options to the signature algorithm during verify operations.
           Names and values of these options are algorithm-specific.

           This often needs to be given while signing too, because the self-
           signature of a certificate signing request (CSR) is verified
           against the included public key, and that verification may need its
           own set of options.

       --kkeeyy _p_a_s_s_w_o_r_d
           The password used to encrypt the private key. Since on some systems
           the command line arguments are visible (e.g., when using ppss(1) on
           Unix), this option should be used with caution.  Better use
           --ppaassssiinn.

       --ppaassssiinn _a_r_g
           The key password source for key files and certificate PKCS#12
           files.  For more information about the format of aarrgg see
           ooppeennssssll--ppaasssspphhrraassee--ooppttiioonnss(1).

       --sseellffssiiggnn
           Indicates the issued certificates are to be signed with the key the
           certificate requests were signed with (given with --kkeeyyffiillee).
           Certificate requests signed with a different key are ignored.  If
           --ssppkkaacc, --ssss__cceerrtt or --ggeennccrrll are given, --sseellffssiiggnn is ignored.

           A consequence of using --sseellffssiiggnn is that the self-signed
           certificate appears among the entries in the certificate database
           (see the configuration option ddaattaabbaassee), and uses the same serial
           number counter as all other certificates sign with the self-signed
           certificate.

       --nnootteexxtt
           Don't output the text form of a certificate to the output file.

       --ddaatteeoopptt
           Specify the date output format. Values are: rfc_822 and iso_8601.
           Defaults to rfc_822.

       --ssttaarrttddaattee _d_a_t_e
           This allows the start date to be explicitly set. The format of the
           date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure), or
           YYYYMMDDHHMMSSZ (the same as an ASN1 GeneralizedTime structure). In
           both formats, seconds SS and timezone Z must be present.

       --eennddddaattee _d_a_t_e
           This allows the expiry date to be explicitly set. The format of the
           date is YYMMDDHHMMSSZ (the same as an ASN1 UTCTime structure), or
           YYYYMMDDHHMMSSZ (the same as an ASN1 GeneralizedTime structure). In
           both formats, seconds SS and timezone Z must be present.

       --ddaayyss _a_r_g
           The number of days to certify the certificate for.

       --mmdd _a_l_g
           The message digest to use.  Any digest supported by the
           ooppeennssssll--ddggsstt(1) command can be used. For signing algorithms that do
           not support a digest (i.e. Ed25519 and Ed448) any message digest
           that is set is ignored. This option also applies to CRLs.

       --ppoolliiccyy _a_r_g
           This option defines the CA "policy" to use. This is a section in
           the configuration file which decides which fields should be
           mandatory or match the CA certificate. Check out the PPOOLLIICCYY FFOORRMMAATT
           section for more information.

       --mmssiiee__hhaacckk
           This is a deprecated option to make this command work with very old
           versions of the IE certificate enrollment control "certenr3". It
           used UniversalStrings for almost everything. Since the old control
           has various security bugs its use is strongly discouraged.

       --pprreesseerrvveeDDNN
           Normally the DN order of a certificate is the same as the order of
           the fields in the relevant policy section. When this option is set
           the order is the same as the request. This is largely for
           compatibility with the older IE enrollment control which would only
           accept certificates if their DNs match the order of the request.
           This is not needed for Xenroll.

       --nnooeemmaaiillDDNN
           The DN of a certificate can contain the EMAIL field if present in
           the request DN, however, it is good policy just having the e-mail
           set into the altName extension of the certificate. When this option
           is set the EMAIL field is removed from the certificate' subject and
           set only in the, eventually present, extensions. The eemmaaiill__iinn__ddnn
           keyword can be used in the configuration file to enable this
           behaviour.

       --bbaattcchh
           This sets the batch mode. In this mode no questions will be asked
           and all certificates will be certified automatically.

       --eexxtteennssiioonnss _s_e_c_t_i_o_n
           The section of the configuration file containing certificate
           extensions to be added when a certificate is issued (defaults to
           xx550099__eexxtteennssiioonnss unless the --eexxttffiillee option is used).  If no X.509
           extensions are specified then a V1 certificate is created, else a
           V3 certificate is created.  See the xx550099vv33__ccoonnffiigg(5) manual page
           for details of the extension section format.

       --eexxttffiillee _f_i_l_e
           An additional configuration file to read certificate extensions
           from (using the default section unless the --eexxtteennssiioonnss option is
           also used).

       --ssuubbjj _a_r_g
           Supersedes subject name given in the request.

           The arg must be formatted as
           "/type0=value0/type1=value1/type2=...".  Special characters may be
           escaped by "\" (backslash), whitespace is retained.  Empty values
           are permitted, but the corresponding type will not be included in
           the resulting certificate.  Giving a single "/" will lead to an
           empty sequence of RDNs (a NULL-DN).  Multi-valued RDNs can be
           formed by placing a "+" character instead of a "/" between the
           AttributeValueAssertions (AVAs) that specify the members of the
           set.  Example:

           "/DC=org/DC=OpenSSL/DC=users/UID=123456+CN=John Doe"

       --uuttff88
           This option causes field values to be interpreted as UTF8 strings,
           by default they are interpreted as ASCII. This means that the field
           values, whether prompted from a terminal or obtained from a
           configuration file, must be valid UTF8 strings.

       --ccrreeaattee__sseerriiaall
           If reading serial from the text file as specified in the
           configuration fails, specifying this option creates a new random
           serial to be used as next serial number.  To get random serial
           numbers, use the --rraanndd__sseerriiaall flag instead; this should only be
           used for simple error-recovery.

       --rraanndd__sseerriiaall
           Generate a large random number to use as the serial number.  This
           overrides any option or configuration to use a serial number file.

       --mmuullttiivvaalluuee--rrddnn
           This option has been deprecated and has no effect.

       --rraanndd _f_i_l_e_s, --wwrriitteerraanndd _f_i_l_e
           See "Random State Options" in ooppeennssssll(1) for details.

       --eennggiinnee _i_d
           See "Engine Options" in ooppeennssssll(1).  This option is deprecated.

       --pprroovviiddeerr _n_a_m_e
       --pprroovviiddeerr--ppaatthh _p_a_t_h
       --pprrooppqquueerryy _p_r_o_p_q
           See "Provider Options" in ooppeennssssll(1), pprroovviiddeerr(7), and pprrooppeerrttyy(7).

CCRRLL OOPPTTIIOONNSS
       --ggeennccrrll
           This option generates a CRL based on information in the index file.

       --ccrrll__llaassttuuppddaattee _t_i_m_e
           Allows the value of the CRL's lastUpdate field to be explicitly
           set; if this option is not present, the current time is used.
           Accepts times in YYMMDDHHMMSSZ format (the same as an ASN1 UTCTime
           structure) or YYYYMMDDHHMMSSZ format (the same as an ASN1
           GeneralizedTime structure).

       --ccrrll__nneexxttuuppddaattee _t_i_m_e
           Allows the value of the CRL's nextUpdate field to be explicitly
           set; if this option is present, any values given for --ccrrllddaayyss,
           --ccrrllhhoouurrss and --ccrrllsseecc are ignored. Accepts times in the same
           formats as --ccrrll__llaassttuuppddaattee.

       --ccrrllddaayyss _n_u_m
           The number of days before the next CRL is due. That is the days
           from now to place in the CRL nextUpdate field.

       --ccrrllhhoouurrss _n_u_m
           The number of hours before the next CRL is due.

       --ccrrllsseecc _n_u_m
           The number of seconds before the next CRL is due.

       --rreevvookkee _f_i_l_e_n_a_m_e
           A filename containing a certificate to revoke.

       --vvaalliidd _f_i_l_e_n_a_m_e
           A filename containing a certificate to add a Valid certificate
           entry.

       --ssttaattuuss _s_e_r_i_a_l
           Displays the revocation status of the certificate with the
           specified serial number and exits.

       --uuppddaatteeddbb
           Updates the database index to purge expired certificates.

       --ccrrll__rreeaassoonn _r_e_a_s_o_n
           Revocation reason, where _r_e_a_s_o_n is one of: uunnssppeecciiffiieedd,
           kkeeyyCCoommpprroommiissee, CCAACCoommpprroommiissee, aaffffiilliiaattiioonnCChhaannggeedd, ssuuppeerrsseeddeedd,
           cceessssaattiioonnOOffOOppeerraattiioonn, cceerrttiiffiiccaatteeHHoolldd or rreemmoovveeFFrroommCCRRLL. The
           matching of _r_e_a_s_o_n is case insensitive. Setting any revocation
           reason will make the CRL v2.

           In practice rreemmoovveeFFrroommCCRRLL is not particularly useful because it is
           only used in delta CRLs which are not currently implemented.

       --ccrrll__hhoolldd _i_n_s_t_r_u_c_t_i_o_n
           This sets the CRL revocation reason code to cceerrttiiffiiccaatteeHHoolldd and the
           hold instruction to _i_n_s_t_r_u_c_t_i_o_n which must be an OID. Although any
           OID can be used only hhoollddIInnssttrruuccttiioonnNNoonnee (the use of which is
           discouraged by RFC2459) hhoollddIInnssttrruuccttiioonnCCaallllIIssssuueerr or
           hhoollddIInnssttrruuccttiioonnRReejjeecctt will normally be used.

       --ccrrll__ccoommpprroommiissee _t_i_m_e
           This sets the revocation reason to kkeeyyCCoommpprroommiissee and the compromise
           time to _t_i_m_e. _t_i_m_e should be in GeneralizedTime format that is
           _Y_Y_Y_Y_M_M_D_D_H_H_M_M_S_S_Z.

       --ccrrll__CCAA__ccoommpprroommiissee _t_i_m_e
           This is the same as ccrrll__ccoommpprroommiissee except the revocation reason is
           set to CCAACCoommpprroommiissee.

       --ccrrlleexxttss _s_e_c_t_i_o_n
           The section of the configuration file containing CRL extensions to
           include. If no CRL extension section is present then a V1 CRL is
           created, if the CRL extension section is present (even if it is
           empty) then a V2 CRL is created. The CRL extensions specified are
           CRL extensions and nnoott CRL entry extensions.  It should be noted
           that some software (for example Netscape) can't handle V2 CRLs. See
           xx550099vv33__ccoonnffiigg(5) manual page for details of the extension section
           format.

CCOONNFFIIGGUURRAATTIIOONN FFIILLEE OOPPTTIIOONNSS
       The section of the configuration file containing options for this
       command is found as follows: If the --nnaammee command line option is used,
       then it names the section to be used. Otherwise the section to be used
       must be named in the ddeeffaauulltt__ccaa option of the ccaa section of the
       configuration file (or in the default section of the configuration
       file). Besides ddeeffaauulltt__ccaa, the following options are read directly from
       the ccaa section:
        RANDFILE
        preserve
        msie_hack With the exception of RRAANNDDFFIILLEE, this is probably a bug and
       may change in future releases.

       Many of the configuration file options are identical to command line
       options. Where the option is present in the configuration file and the
       command line the command line value is used. Where an option is
       described as mandatory then it must be present in the configuration
       file or the command line equivalent (if any) used.

       ooiidd__ffiillee
           This specifies a file containing additional OOBBJJEECCTT IIDDEENNTTIIFFIIEERRSS.
           Each line of the file should consist of the numerical form of the
           object identifier followed by whitespace then the short name
           followed by whitespace and finally the long name.

       ooiidd__sseeccttiioonn
           This specifies a section in the configuration file containing extra
           object identifiers. Each line should consist of the short name of
           the object identifier followed by == and the numerical form. The
           short and long names are the same when this option is used.

       nneeww__cceerrttss__ddiirr
           The same as the --oouuttddiirr command line option. It specifies the
           directory where new certificates will be placed. Mandatory.

       cceerrttiiffiiccaattee
           The same as --cceerrtt. It gives the file containing the CA certificate.
           Mandatory.

       pprriivvaattee__kkeeyy
           Same as the --kkeeyyffiillee option. The file containing the CA private
           key. Mandatory.

       RRAANNDDFFIILLEE
           At startup the specified file is loaded into the random number
           generator, and at exit 256 bytes will be written to it. (Note:
           Using a RANDFILE is not necessary anymore, see the "HISTORY"
           section.

       ddeeffaauulltt__ddaayyss
           The same as the --ddaayyss option. The number of days to certify a
           certificate for.

       ddeeffaauulltt__ssttaarrttddaattee
           The same as the --ssttaarrttddaattee option. The start date to certify a
           certificate for. If not set the current time is used.

       ddeeffaauulltt__eennddddaattee
           The same as the --eennddddaattee option. Either this option or ddeeffaauulltt__ddaayyss
           (or the command line equivalents) must be present.

       ddeeffaauulltt__ccrrll__hhoouurrss ddeeffaauulltt__ccrrll__ddaayyss
           The same as the --ccrrllhhoouurrss and the --ccrrllddaayyss options. These will only
           be used if neither command line option is present. At least one of
           these must be present to generate a CRL.

       ddeeffaauulltt__mmdd
           The same as the --mmdd option. Mandatory except where the signing
           algorithm does not require a digest (i.e. Ed25519 and Ed448).

       ddaattaabbaassee
           The text database file to use. Mandatory. This file must be present
           though initially it will be empty.

       uunniiqquuee__ssuubbjjeecctt
           If the value yyeess is given, the valid certificate entries in the
           database must have unique subjects.  if the value nnoo is given,
           several valid certificate entries may have the exact same subject.
           The default value is yyeess, to be compatible with older (pre 0.9.8)
           versions of OpenSSL.  However, to make CA certificate roll-over
           easier, it's recommended to use the value nnoo, especially if
           combined with the --sseellffssiiggnn command line option.

           Note that it is valid in some circumstances for certificates to be
           created without any subject. In the case where there are multiple
           certificates without subjects this does not count as a duplicate.

       sseerriiaall
           A text file containing the next serial number to use in hex.
           Mandatory.  This file must be present and contain a valid serial
           number.

       ccrrllnnuummbbeerr
           A text file containing the next CRL number to use in hex. The crl
           number will be inserted in the CRLs only if this file exists. If
           this file is present, it must contain a valid CRL number.

       xx550099__eexxtteennssiioonnss
           A fallback to the --eexxtteennssiioonnss option.

       ccrrll__eexxtteennssiioonnss
           A fallback to the --ccrrlleexxttss option.

       pprreesseerrvvee
           The same as --pprreesseerrvveeDDNN

       eemmaaiill__iinn__ddnn
           The same as --nnooeemmaaiillDDNN. If you want the EMAIL field to be removed
           from the DN of the certificate simply set this to 'no'. If not
           present the default is to allow for the EMAIL filed in the
           certificate's DN.

       mmssiiee__hhaacckk
           The same as --mmssiiee__hhaacckk

       ppoolliiccyy
           The same as --ppoolliiccyy. Mandatory. See the PPOOLLIICCYY FFOORRMMAATT section for
           more information.

       nnaammee__oopptt, cceerrtt__oopptt
           These options allow the format used to display the certificate
           details when asking the user to confirm signing. All the options
           supported by the xx550099 utilities --nnaammeeoopptt and --cceerrttoopptt switches can
           be used here, except the nnoo__ssiiggnnaammee and nnoo__ssiiggdduummpp are permanently
           set and cannot be disabled (this is because the certificate
           signature cannot be displayed because the certificate has not been
           signed at this point).

           For convenience the values ccaa__ddeeffaauulltt are accepted by both to
           produce a reasonable output.

           If neither option is present the format used in earlier versions of
           OpenSSL is used. Use of the old format is ssttrroonnggllyy discouraged
           because it only displays fields mentioned in the ppoolliiccyy section,
           mishandles multicharacter string types and does not display
           extensions.

       ccooppyy__eexxtteennssiioonnss
           Determines how extensions in certificate requests should be
           handled.  If set to nnoonnee or this option is not present then
           extensions are ignored and not copied to the certificate. If set to
           ccooppyy then any extensions present in the request that are not
           already present are copied to the certificate. If set to ccooppyyaallll
           then all extensions in the request are copied to the certificate:
           if the extension is already present in the certificate it is
           deleted first. See the WWAARRNNIINNGGSS section before using this option.

           The main use of this option is to allow a certificate request to
           supply values for certain extensions such as subjectAltName.

PPOOLLIICCYY FFOORRMMAATT
       The policy section consists of a set of variables corresponding to
       certificate DN fields. If the value is "match" then the field value
       must match the same field in the CA certificate. If the value is
       "supplied" then it must be present. If the value is "optional" then it
       may be present. Any fields not mentioned in the policy section are
       silently deleted, unless the --pprreesseerrvveeDDNN option is set but this can be
       regarded more of a quirk than intended behaviour.

SSPPKKAACC FFOORRMMAATT
       The input to the --ssppkkaacc command line option is a Netscape signed public
       key and challenge. This will usually come from the KKEEYYGGEENN tag in an
       HTML form to create a new private key.  It is however possible to
       create SPKACs using ooppeennssssll--ssppkkaacc(1).

       The file should contain the variable SPKAC set to the value of the
       SPKAC and also the required DN components as name value pairs.  If you
       need to include the same component twice then it can be preceded by a
       number and a '.'.

       When processing SPKAC format, the output is DER if the --oouutt flag is
       used, but PEM format if sending to stdout or the --oouuttddiirr flag is used.

EEXXAAMMPPLLEESS
       Note: these examples assume that the directory structure this command
       assumes is already set up and the relevant files already exist. This
       usually involves creating a CA certificate and private key with
       ooppeennssssll--rreeqq(1), a serial number file and an empty index file and
       placing them in the relevant directories.

       To use the sample configuration file below the directories _d_e_m_o_C_A,
       _d_e_m_o_C_A_/_p_r_i_v_a_t_e and _d_e_m_o_C_A_/_n_e_w_c_e_r_t_s would be created. The CA certificate
       would be copied to _d_e_m_o_C_A_/_c_a_c_e_r_t_._p_e_m and its private key to
       _d_e_m_o_C_A_/_p_r_i_v_a_t_e_/_c_a_k_e_y_._p_e_m. A file _d_e_m_o_C_A_/_s_e_r_i_a_l would be created
       containing for example "01" and the empty index file _d_e_m_o_C_A_/_i_n_d_e_x_._t_x_t.

       Sign a certificate request:

        openssl ca -in req.pem -out newcert.pem

       Sign an SM2 certificate request:

        openssl ca -in sm2.csr -out sm2.crt -md sm3 \
                -sigopt "distid:1234567812345678" \
                -vfyopt "distid:1234567812345678"

       Sign a certificate request, using CA extensions:

        openssl ca -in req.pem -extensions v3_ca -out newcert.pem

       Generate a CRL

        openssl ca -gencrl -out crl.pem

       Sign several requests:

        openssl ca -infiles req1.pem req2.pem req3.pem

       Certify a Netscape SPKAC:

        openssl ca -spkac spkac.txt

       A sample SPKAC file (the SPKAC line has been truncated for clarity):

        SPKAC=MIG0MGAwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn7PDhCeV/xIxUg8V70YRxK2A5
        CN=Steve Test
        emailAddress=steve@openssl.org
        0.OU=OpenSSL Group
        1.OU=Another Group

       A sample configuration file with the relevant sections for this
       command:

        [ ca ]
        default_ca      = CA_default            # The default ca section

        [ CA_default ]

        dir            = ./demoCA              # top dir
        database       = $dir/index.txt        # index file.
        new_certs_dir  = $dir/newcerts         # new certs dir

        certificate    = $dir/cacert.pem       # The CA cert
        serial         = $dir/serial           # serial no file
        #rand_serial    = yes                  # for random serial#'s
        private_key    = $dir/private/cakey.pem# CA private key

        default_days   = 365                   # how long to certify for
        default_crl_days= 30                   # how long before next CRL
        default_md     = md5                   # md to use

        policy         = policy_any            # default policy
        email_in_dn    = no                    # Don't add the email into cert DN

        name_opt       = ca_default            # Subject name display option
        cert_opt       = ca_default            # Certificate display option
        copy_extensions = none                 # Don't copy extensions from request

        [ policy_any ]
        countryName            = supplied
        stateOrProvinceName    = optional
        organizationName       = optional
        organizationalUnitName = optional
        commonName             = supplied
        emailAddress           = optional

FFIILLEESS
       Note: the location of all files can change either by compile time
       options, configuration file entries, environment variables or command
       line options.  The values below reflect the default values.

        /usr/local/ssl/lib/openssl.cnf - master configuration file
        ./demoCA                       - main CA directory
        ./demoCA/cacert.pem            - CA certificate
        ./demoCA/private/cakey.pem     - CA private key
        ./demoCA/serial                - CA serial number file
        ./demoCA/serial.old            - CA serial number backup file
        ./demoCA/index.txt             - CA text database file
        ./demoCA/index.txt.old         - CA text database backup file
        ./demoCA/certs                 - certificate output file

RREESSTTRRIICCTTIIOONNSS
       The text database index file is a critical part of the process and if
       corrupted it can be difficult to fix. It is theoretically possible to
       rebuild the index file from all the issued certificates and a current
       CRL: however there is no option to do this.

       V2 CRL features like delta CRLs are not currently supported.

       Although several requests can be input and handled at once it is only
       possible to include one SPKAC or self-signed certificate.

BBUUGGSS
       This command is quirky and at times downright unfriendly.

       The use of an in-memory text database can cause problems when large
       numbers of certificates are present because, as the name implies the
       database has to be kept in memory.

       This command really needs rewriting or the required functionality
       exposed at either a command or interface level so that a more user-
       friendly replacement could handle things properly. The script CCAA..ppll
       helps a little but not very much.

       Any fields in a request that are not present in a policy are silently
       deleted. This does not happen if the --pprreesseerrvveeDDNN option is used. To
       enforce the absence of the EMAIL field within the DN, as suggested by
       RFCs, regardless the contents of the request' subject the --nnooeemmaaiillDDNN
       option can be used. The behaviour should be more friendly and
       configurable.

       Canceling some commands by refusing to certify a certificate can create
       an empty file.

WWAARRNNIINNGGSS
       This command was originally meant as an example of how to do things in
       a CA.  Its code does not have production quality.  It was not supposed
       to be used as a full blown CA itself, nevertheless some people are
       using it for this purpose at least internally.  When doing so, specific
       care should be taken to properly secure the private key(s) used for
       signing certificates.  It is advisable to keep them in a secure HW
       storage such as a smart card or HSM and access them via a suitable
       engine or crypto provider.

       This command command is effectively a single user command: no locking
       is done on the various files and attempts to run more than one ooppeennssssll
       ccaa command on the same database can have unpredictable results.

       The ccooppyy__eexxtteennssiioonnss option should be used with caution. If care is not
       taken then it can be a security risk. For example if a certificate
       request contains a basicConstraints extension with CA:TRUE and the
       ccooppyy__eexxtteennssiioonnss value is set to ccooppyyaallll and the user does not spot this
       when the certificate is displayed then this will hand the requester a
       valid CA certificate.  This situation can be avoided by setting
       ccooppyy__eexxtteennssiioonnss to ccooppyy and including basicConstraints with CA:FALSE in
       the configuration file.  Then if the request contains a
       basicConstraints extension it will be ignored.

       It is advisable to also include values for other extensions such as
       kkeeyyUUssaaggee to prevent a request supplying its own values.

       Additional restrictions can be placed on the CA certificate itself.
       For example if the CA certificate has:

        basicConstraints = CA:TRUE, pathlen:0

       then even if a certificate is issued with CA:TRUE it will not be valid.

HHIISSTTOORRYY
       Since OpenSSL 1.1.1, the program follows RFC5280. Specifically,
       certificate validity period (specified by any of --ssttaarrttddaattee, --eennddddaattee
       and --ddaayyss) and CRL last/next update time (specified by any of
       --ccrrll__llaassttuuppddaattee, --ccrrll__nneexxttuuppddaattee, --ccrrllddaayyss, --ccrrllhhoouurrss and --ccrrllsseecc) will
       be encoded as UTCTime if the dates are earlier than year 2049
       (included), and as GeneralizedTime if the dates are in year 2050 or
       later.

       OpenSSL 1.1.1 introduced a new random generator (CSPRNG) with an
       improved seeding mechanism. The new seeding mechanism makes it
       unnecessary to define a RANDFILE for saving and restoring randomness.
       This option is retained mainly for compatibility reasons.

       The --sseeccttiioonn option was added in OpenSSL 3.0.0.

       The --mmuullttiivvaalluuee--rrddnn option has become obsolete in OpenSSL 3.0.0 and has
       no effect.

       The --eennggiinnee option was deprecated in OpenSSL 3.0.

SSEEEE AALLSSOO
       ooppeennssssll(1), ooppeennssssll--rreeqq(1), ooppeennssssll--ssppkkaacc(1), ooppeennssssll--xx550099(1),
       CCAA..ppll(1), ccoonnffiigg(5), xx550099vv33__ccoonnffiigg(5)

CCOOPPYYRRIIGGHHTT
       Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.1                             2022-01-31                 OPENSSL-CA(1ossl)
