OPENSSL-RSAUTL(1ossl)               OpenSSL              OPENSSL-RSAUTL(1ossl)



NNAAMMEE
       openssl-rsautl - RSA command

SSYYNNOOPPSSIISS
       ooppeennssssll rrssaauuttll [--hheellpp] [--iinn _f_i_l_e] [--ppaassssiinn _a_r_g] [--rreevv] [--oouutt _f_i_l_e]
       [--iinnkkeeyy _f_i_l_e_n_a_m_e|_u_r_i] [--kkeeyyffoorrmm DDEERR|PPEEMM|PP1122|EENNGGIINNEE] [--ppuubbiinn] [--cceerrttiinn]
       [--ssiiggnn] [--vveerriiffyy] [--eennccrryypptt] [--ddeeccrryypptt] [--ppkkccss] [--xx993311] [--ooaaeepp] [--rraaww]
       [--hheexxdduummpp] [--aassnn11ppaarrssee] [--eennggiinnee _i_d] [--rraanndd _f_i_l_e_s] [--wwrriitteerraanndd _f_i_l_e]
       [--pprroovviiddeerr _n_a_m_e] [--pprroovviiddeerr--ppaatthh _p_a_t_h] [--pprrooppqquueerryy _p_r_o_p_q]

DDEESSCCRRIIPPTTIIOONN
       This command has been deprecated.  The ooppeennssssll--ppkkeeyyuuttll(1) command
       should be used instead.

       This command can be used to sign, verify, encrypt and decrypt data
       using the RSA algorithm.

OOPPTTIIOONNSS
       --hheellpp
           Print out a usage message.

       --iinn _f_i_l_e_n_a_m_e
           This specifies the input filename to read data from or standard
           input if this option is not specified.

       --ppaassssiinn _a_r_g
           The passphrase used in the output file.  See see
           ooppeennssssll--ppaasssspphhrraassee--ooppttiioonnss(1).

       --rreevv
           Reverse the order of the input.

       --oouutt _f_i_l_e_n_a_m_e
           Specifies the output filename to write to or standard output by
           default.

       --iinnkkeeyy _f_i_l_e_n_a_m_e|_u_r_i
           The input key, by default it should be an RSA private key.

       --kkeeyyffoorrmm DDEERR|PPEEMM|PP1122|EENNGGIINNEE
           The key format; unspecified by default.  See
           ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --ppuubbiinn
           The input file is an RSA public key.

       --cceerrttiinn
           The input is a certificate containing an RSA public key.

       --ssiiggnn
           Sign the input data and output the signed result. This requires an
           RSA private key.

       --vveerriiffyy
           Verify the input data and output the recovered data.

       --eennccrryypptt
           Encrypt the input data using an RSA public key.

       --ddeeccrryypptt
           Decrypt the input data using an RSA private key.

       --ppkkccss, --ooaaeepp, --xx993311 --rraaww
           The padding to use: PKCS#1 v1.5 (the default), PKCS#1 OAEP, ANSI
           X9.31, or no padding, respectively.  For signatures, only --ppkkccss and
           --rraaww can be used.

       --hheexxdduummpp
           Hex dump the output data.

       --aassnn11ppaarrssee
           Parse the ASN.1 output data, this is useful when combined with the
           --vveerriiffyy option.

       --eennggiinnee _i_d
           See "Engine Options" in ooppeennssssll(1).  This option is deprecated.

       --rraanndd _f_i_l_e_s, --wwrriitteerraanndd _f_i_l_e
           See "Random State Options" in ooppeennssssll(1) for details.

       --pprroovviiddeerr _n_a_m_e
       --pprroovviiddeerr--ppaatthh _p_a_t_h
       --pprrooppqquueerryy _p_r_o_p_q
           See "Provider Options" in ooppeennssssll(1), pprroovviiddeerr(7), and pprrooppeerrttyy(7).

NNOOTTEESS
       Since this command uses the RSA algorithm directly, it can only be used
       to sign or verify small pieces of data.

EEXXAAMMPPLLEESS
       Examples equivalent to these can be found in the documentation for the
       non-deprecated ooppeennssssll--ppkkeeyyuuttll(1) command.

       Sign some data using a private key:

        openssl rsautl -sign -in file -inkey key.pem -out sig

       Recover the signed data

        openssl rsautl -verify -in sig -inkey key.pem

       Examine the raw signed data:

        openssl rsautl -verify -in sig -inkey key.pem -raw -hexdump

        0000 - 00 01 ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
        0010 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
        0020 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
        0030 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
        0040 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
        0050 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
        0060 - ff ff ff ff ff ff ff ff-ff ff ff ff ff ff ff ff   ................
        0070 - ff ff ff ff 00 68 65 6c-6c 6f 20 77 6f 72 6c 64   .....hello world

       The PKCS#1 block formatting is evident from this. If this was done
       using encrypt and decrypt the block would have been of type 2 (the
       second byte) and random padding data visible instead of the 0xff bytes.

       It is possible to analyse the signature of certificates using this
       command in conjunction with ooppeennssssll--aassnn11ppaarrssee(1). Consider the self
       signed example in _c_e_r_t_s_/_p_c_a_-_c_e_r_t_._p_e_m. Running ooppeennssssll--aassnn11ppaarrssee(1) as
       follows yields:

        openssl asn1parse -in pca-cert.pem

           0:d=0  hl=4 l= 742 cons: SEQUENCE
           4:d=1  hl=4 l= 591 cons:  SEQUENCE
           8:d=2  hl=2 l=   3 cons:   cont [ 0 ]
          10:d=3  hl=2 l=   1 prim:    INTEGER           :02
          13:d=2  hl=2 l=   1 prim:   INTEGER           :00
          16:d=2  hl=2 l=  13 cons:   SEQUENCE
          18:d=3  hl=2 l=   9 prim:    OBJECT            :md5WithRSAEncryption
          29:d=3  hl=2 l=   0 prim:    NULL
          31:d=2  hl=2 l=  92 cons:   SEQUENCE
          33:d=3  hl=2 l=  11 cons:    SET
          35:d=4  hl=2 l=   9 cons:     SEQUENCE
          37:d=5  hl=2 l=   3 prim:      OBJECT            :countryName
          42:d=5  hl=2 l=   2 prim:      PRINTABLESTRING   :AU
         ....
         599:d=1  hl=2 l=  13 cons:  SEQUENCE
         601:d=2  hl=2 l=   9 prim:   OBJECT            :md5WithRSAEncryption
         612:d=2  hl=2 l=   0 prim:   NULL
         614:d=1  hl=3 l= 129 prim:  BIT STRING

       The final BIT STRING contains the actual signature. It can be extracted
       with:

        openssl asn1parse -in pca-cert.pem -out sig -noout -strparse 614

       The certificate public key can be extracted with:

        openssl x509 -in test/testx509.pem -pubkey -noout >pubkey.pem

       The signature can be analysed with:

        openssl rsautl -in sig -verify -asn1parse -inkey pubkey.pem -pubin

           0:d=0  hl=2 l=  32 cons: SEQUENCE
           2:d=1  hl=2 l=  12 cons:  SEQUENCE
           4:d=2  hl=2 l=   8 prim:   OBJECT            :md5
          14:d=2  hl=2 l=   0 prim:   NULL
          16:d=1  hl=2 l=  16 prim:  OCTET STRING
             0000 - f3 46 9e aa 1a 4a 73 c9-37 ea 93 00 48 25 08 b5   .F...Js.7...H%..

       This is the parsed version of an ASN1 DigestInfo structure. It can be
       seen that the digest used was md5. The actual part of the certificate
       that was signed can be extracted with:

        openssl asn1parse -in pca-cert.pem -out tbs -noout -strparse 4

       and its digest computed with:

        openssl md5 -c tbs
        MD5(tbs)= f3:46:9e:aa:1a:4a:73:c9:37:ea:93:00:48:25:08:b5

       which it can be seen agrees with the recovered value above.

SSEEEE AALLSSOO
       ooppeennssssll(1), ooppeennssssll--ppkkeeyyuuttll(1), ooppeennssssll--ddggsstt(1), ooppeennssssll--rrssaa(1),
       ooppeennssssll--ggeennrrssaa(1)

HHIISSTTOORRYY
       This command was deprecated in OpenSSL 3.0.

       The --eennggiinnee option was deprecated in OpenSSL 3.0.

CCOOPPYYRRIIGGHHTT
       Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.1                             2022-01-31             OPENSSL-RSAUTL(1ossl)
