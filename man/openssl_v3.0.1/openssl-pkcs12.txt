OPENSSL-PKCS12(1ossl)               OpenSSL              OPENSSL-PKCS12(1ossl)



NNAAMMEE
       openssl-pkcs12 - PKCS#12 file command

SSYYNNOOPPSSIISS
       ooppeennssssll ppkkccss1122 [--hheellpp] [--ppaassssiinn _a_r_g] [--ppaassssoouutt _a_r_g] [--ppaasssswwoorrdd _a_r_g]
       [--ttwwooppaassss] [--iinn _f_i_l_e_n_a_m_e|_u_r_i] [--oouutt _f_i_l_e_n_a_m_e] [--nnookkeeyyss] [--nnoocceerrttss]
       [--nnoooouutt] [--lleeggaaccyy] [--eennggiinnee _i_d] [--pprroovviiddeerr _n_a_m_e] [--pprroovviiddeerr--ppaatthh _p_a_t_h]
       [--pprrooppqquueerryy _p_r_o_p_q] [--rraanndd _f_i_l_e_s] [--wwrriitteerraanndd _f_i_l_e]

       PKCS#12 input (parsing) options: [--iinnffoo] [--nnoommaaccvveerr] [--ccllcceerrttss]
       [--ccaacceerrttss]

       [--aaeess112288] [--aaeess119922] [--aaeess225566] [--aarriiaa112288] [--aarriiaa119922] [--aarriiaa225566]
       [--ccaammeelllliiaa112288] [--ccaammeelllliiaa119922] [--ccaammeelllliiaa225566] [--ddeess] [--ddeess33] [--iiddeeaa]
       [--nnooeenncc] [--nnooddeess]

       PKCS#12 output (export) options:

       [--eexxppoorrtt] [--iinnkkeeyy _f_i_l_e_n_a_m_e|_u_r_i] [--cceerrttffiillee _f_i_l_e_n_a_m_e] [--ppaasssscceerrttss _a_r_g]
       [--cchhaaiinn] [--uunnttrruusstteedd _f_i_l_e_n_a_m_e] [--CCAAffiillee _f_i_l_e] [--nnoo--CCAAffiillee] [--CCAAppaatthh
       _d_i_r] [--nnoo--CCAAppaatthh] [--CCAAssttoorree _u_r_i] [--nnoo--CCAAssttoorree] [--nnaammee _n_a_m_e] [--ccaannaammee
       _n_a_m_e] [--CCSSPP _n_a_m_e] [--LLMMKK] [--kkeeyyeexx] [--kkeeyyssiigg] [--kkeeyyppbbee _c_i_p_h_e_r] [--cceerrttppbbee
       _c_i_p_h_e_r] [--ddeesscceerrtt] [--mmaaccaallgg _d_i_g_e_s_t] [--iitteerr _c_o_u_n_t] [--nnooiitteerr]
       [--nnoommaacciitteerr] [--mmaacciitteerr] [--nnoommaacc]

DDEESSCCRRIIPPTTIIOONN
       This command allows PKCS#12 files (sometimes referred to as PFX files)
       to be created and parsed. PKCS#12 files are used by several programs
       including Netscape, MSIE and MS Outlook.

OOPPTTIIOONNSS
       There are a lot of options the meaning of some depends of whether a
       PKCS#12 file is being created or parsed. By default a PKCS#12 file is
       parsed.  A PKCS#12 file can be created by using the --eexxppoorrtt option (see
       below).  The PKCS#12 export encryption and MAC options such as --cceerrttppbbee
       and --iitteerr and many further options such as --cchhaaiinn are relevant only
       with --eexxppoorrtt.  Conversely, the options regarding encryption of private
       keys when outputting PKCS#12 input are relevant only when the --eexxppoorrtt
       option is not given.

       The default encryption algorithm is AES-256-CBC with PBKDF2 for key
       derivation.

       When encountering problems loading legacy PKCS#12 files that involve,
       for example, RC2-40-CBC, try using the --lleeggaaccyy option and, if needed,
       the --pprroovviiddeerr--ppaatthh option.

       --hheellpp
           Print out a usage message.

       --ppaassssiinn _a_r_g
           The password source for the input, and for encrypting any private
           keys that are output.  For more information about the format of aarrgg
           see ooppeennssssll--ppaasssspphhrraassee--ooppttiioonnss(1).

       --ppaassssoouutt _a_r_g
           The password source for output files.

       --ppaasssswwoorrdd _a_r_g
           With --eexxppoorrtt, --ppaasssswwoorrdd is equivalent to --ppaassssoouutt, otherwise it is
           equivalent to --ppaassssiinn.

       --ttwwooppaassss
           Prompt for separate integrity and encryption passwords: most
           software always assumes these are the same so this option will
           render such PKCS#12 files unreadable. Cannot be used in combination
           with the options --ppaasssswwoorrdd, --ppaassssiinn if importing from PKCS#12, or
           --ppaassssoouutt if exporting.

       --nnookkeeyyss
           No private keys will be output.

       --nnoocceerrttss
           No certificates will be output.

       --nnoooouutt
           This option inhibits all credentials output, and so the input is
           just verified.

       --lleeggaaccyy
           Use legacy mode of operation and automatically load the legacy
           provider.  If OpenSSL is not installed system-wide, it is necessary
           to also use, for example, "-provider-path ./providers" or to set
           the environment variable OOPPEENNSSSSLL__MMOODDUULLEESS to point to the directory
           where the providers can be found.

           In the legacy mode, the default algorithm for certificate
           encryption is RC2_CBC or 3DES_CBC depending on whether the RC2
           cipher is enabled in the build. The default algorithm for private
           key encryption is 3DES_CBC.  If the legacy option is not specified,
           then the legacy provider is not loaded and the default encryption
           algorithm for both certificates and private keys is AES_256_CBC
           with PBKDF2 for key derivation.

       --eennggiinnee _i_d
           See "Engine Options" in ooppeennssssll(1).  This option is deprecated.

       --pprroovviiddeerr _n_a_m_e
       --pprroovviiddeerr--ppaatthh _p_a_t_h
       --pprrooppqquueerryy _p_r_o_p_q
           See "Provider Options" in ooppeennssssll(1), pprroovviiddeerr(7), and pprrooppeerrttyy(7).

       --rraanndd _f_i_l_e_s, --wwrriitteerraanndd _f_i_l_e
           See "Random State Options" in ooppeennssssll(1) for details.

   PPKKCCSS##1122 iinnppuutt ((ppaarrssiinngg)) ooppttiioonnss
       --iinn _f_i_l_e_n_a_m_e|_u_r_i
           This specifies the input filename or URI.  Standard input is used
           by default.  Without the --eexxppoorrtt option this must be PKCS#12 file
           to be parsed.  For use with the --eexxppoorrtt option see the "PKCS#12
           output (export) options" section.

       --oouutt _f_i_l_e_n_a_m_e
           The filename to write certificates and private keys to, standard
           output by default.  They are all written in PEM format.

       --iinnffoo
           Output additional information about the PKCS#12 file structure,
           algorithms used and iteration counts.

       --nnoommaaccvveerr
           Don't attempt to verify the integrity MAC.

       --ccllcceerrttss
           Only output client certificates (not CA certificates).

       --ccaacceerrttss
           Only output CA certificates (not client certificates).

       --aaeess112288, --aaeess119922, --aaeess225566
           Use AES to encrypt private keys before outputting.

       --aarriiaa112288, --aarriiaa119922, --aarriiaa225566
           Use ARIA to encrypt private keys before outputting.

       --ccaammeelllliiaa112288, --ccaammeelllliiaa119922, --ccaammeelllliiaa225566
           Use Camellia to encrypt private keys before outputting.

       --ddeess
           Use DES to encrypt private keys before outputting.

       --ddeess33
           Use triple DES to encrypt private keys before outputting.

       --iiddeeaa
           Use IDEA to encrypt private keys before outputting.

       --nnooeenncc
           Don't encrypt private keys at all.

       --nnooddeess
           This option is deprecated since OpenSSL 3.0; use --nnooeenncc instead.

   PPKKCCSS##1122 oouuttppuutt ((eexxppoorrtt)) ooppttiioonnss
       --eexxppoorrtt
           This option specifies that a PKCS#12 file will be created rather
           than parsed.

       --oouutt _f_i_l_e_n_a_m_e
           This specifies filename to write the PKCS#12 file to. Standard
           output is used by default.

       --iinn _f_i_l_e_n_a_m_e|_u_r_i
           This specifies the input filename or URI.  Standard input is used
           by default.  With the --eexxppoorrtt option this is a file with
           certificates and a key, or a URI that refers to a key accessed via
           an engine.  The order of credentials in a file doesn't matter but
           one private key and its corresponding certificate should be
           present. If additional certificates are present they will also be
           included in the PKCS#12 output file.

       --iinnkkeeyy _f_i_l_e_n_a_m_e|_u_r_i
           The private key input for PKCS12 output.  If this option is not
           specified then the input file (--iinn argument) must contain a private
           key.  If no engine is used, the argument is taken as a file.  If
           the --eennggiinnee option is used or the URI has prefix
           "org.openssl.engine:" then the rest of the URI is taken as key
           identifier for the given engine.

       --cceerrttffiillee _f_i_l_e_n_a_m_e
           An input file with extra certificates to be added to the PKCS#12
           output if the --eexxppoorrtt option is given.

       --ppaasssscceerrttss _a_r_g
           The password source for certificate input such as --cceerrttffiillee and
           --uunnttrruusstteedd.  For more information about the format of aarrgg see
           ooppeennssssll--ppaasssspphhrraassee--ooppttiioonnss(1).

       --cchhaaiinn
           If this option is present then the certificate chain of the end
           entity certificate is built and included in the PKCS#12 output
           file.  The end entity certificate is the first one read from the
           --iinn file if no key is given, else the first certificate matching
           the given key.  The standard CA trust store is used for chain
           building, as well as any untrusted CA certificates given with the
           --uunnttrruusstteedd option.

       --uunnttrruusstteedd _f_i_l_e_n_a_m_e
           An input file of untrusted certificates that may be used for chain
           building, which is relevant only when a PKCS#12 file is created
           with the --eexxppoorrtt option and the --cchhaaiinn option is given as well.
           Any certificates that are actually part of the chain are added to
           the output.

       --CCAAffiillee _f_i_l_e, --nnoo--CCAAffiillee, --CCAAppaatthh _d_i_r, --nnoo--CCAAppaatthh, --CCAAssttoorree _u_r_i,
       --nnoo--CCAAssttoorree
           See "Trusted Certificate Options" in
           ooppeennssssll--vveerriiffiiccaattiioonn--ooppttiioonnss(1) for details.

       --nnaammee _f_r_i_e_n_d_l_y_n_a_m_e
           This specifies the "friendly name" for the certificates and private
           key. This name is typically displayed in list boxes by software
           importing the file.

       --ccaannaammee _f_r_i_e_n_d_l_y_n_a_m_e
           This specifies the "friendly name" for other certificates. This
           option may be used multiple times to specify names for all
           certificates in the order they appear. Netscape ignores friendly
           names on other certificates whereas MSIE displays them.

       --CCSSPP _n_a_m_e
           Write _n_a_m_e as a Microsoft CSP name.  The password source for the
           input, and for encrypting any private keys that are output.  For
           more information about the format of aarrgg see
           ooppeennssssll--ppaasssspphhrraassee--ooppttiioonnss(1).

       --LLMMKK
           Add the "Local Key Set" identifier to the attributes.

       --kkeeyyeexx|--kkeeyyssiigg
           Specifies that the private key is to be used for key exchange or
           just signing.  This option is only interpreted by MSIE and similar
           MS software. Normally "export grade" software will only allow 512
           bit RSA keys to be used for encryption purposes but arbitrary
           length keys for signing. The --kkeeyyssiigg option marks the key for
           signing only. Signing only keys can be used for S/MIME signing,
           authenticode (ActiveX control signing)  and SSL client
           authentication, however, due to a bug only MSIE 5.0 and later
           support the use of signing only keys for SSL client authentication.

       --kkeeyyppbbee _a_l_g, --cceerrttppbbee _a_l_g
           These options allow the algorithm used to encrypt the private key
           and certificates to be selected. Any PKCS#5 v1.5 or PKCS#12 PBE
           algorithm name can be used (see "NOTES" section for more
           information). If a cipher name (as output by "openssl list
           -cipher-algorithms") is specified then it is used with PKCS#5 v2.0.
           For interoperability reasons it is advisable to only use PKCS#12
           algorithms.

           Special value "NONE" disables encryption of the private key and
           certificates.

       --ddeesscceerrtt
           Encrypt the certificates using triple DES. By default the private
           key and the certificates are encrypted using AES-256-CBC unless the
           '-legacy' option is used. If '-descert' is used with the '-legacy'
           then both, the private key and the certificates are encrypted using
           triple DES.

       --mmaaccaallgg _d_i_g_e_s_t
           Specify the MAC digest algorithm. If not included SHA1 will be
           used.

       --iitteerr _c_o_u_n_t
           This option specifies the iteration count for the encryption key
           and MAC. The default value is 2048.

           To discourage attacks by using large dictionaries of common
           passwords the algorithm that derives keys from passwords can have
           an iteration count applied to it: this causes a certain part of the
           algorithm to be repeated and slows it down. The MAC is used to
           check the file integrity but since it will normally have the same
           password as the keys and certificates it could also be attacked.

       --nnooiitteerr, --nnoommaacciitteerr
           By default both encryption and MAC iteration counts are set to
           2048, using these options the MAC and encryption iteration counts
           can be set to 1, since this reduces the file security you should
           not use these options unless you really have to. Most software
           supports both MAC and encryption iteration counts.  MSIE 4.0
           doesn't support MAC iteration counts so it needs the --nnoommaacciitteerr
           option.

       --mmaacciitteerr
           This option is included for compatibility with previous versions,
           it used to be needed to use MAC iterations counts but they are now
           used by default.

       --nnoommaacc
           Do not attempt to provide the MAC integrity. This can be useful
           with the FIPS provider as the PKCS12 MAC requires PKCS12KDF which
           is not an approved FIPS algorithm and cannot be supported by the
           FIPS provider.

NNOOTTEESS
       Although there are a large number of options most of them are very
       rarely used. For PKCS#12 file parsing only --iinn and --oouutt need to be used
       for PKCS#12 file creation --eexxppoorrtt and --nnaammee are also used.

       If none of the --ccllcceerrttss, --ccaacceerrttss or --nnoocceerrttss options are present then
       all certificates will be output in the order they appear in the input
       PKCS#12 files. There is no guarantee that the first certificate present
       is the one corresponding to the private key.  Certain software which
       tries to get a private key and the corresponding certificate might
       assume that the first certificate in the file is the one corresponding
       to the private key, but that may not always be the case.  Using the
       --ccllcceerrttss option will solve this problem by only outputting the
       certificate corresponding to the private key. If the CA certificates
       are required then they can be output to a separate file using the
       --nnookkeeyyss --ccaacceerrttss options to just output CA certificates.

       The --kkeeyyppbbee and --cceerrttppbbee algorithms allow the precise encryption
       algorithms for private keys and certificates to be specified. Normally
       the defaults are fine but occasionally software can't handle triple DES
       encrypted private keys, then the option --kkeeyyppbbee _P_B_E_-_S_H_A_1_-_R_C_2_-_4_0 can be
       used to reduce the private key encryption to 40 bit RC2. A complete
       description of all algorithms is contained in ooppeennssssll--ppkkccss88(1).

       Prior 1.1 release passwords containing non-ASCII characters were
       encoded in non-compliant manner, which limited interoperability, in
       first hand with Windows. But switching to standard-compliant password
       encoding poses problem accessing old data protected with broken
       encoding. For this reason even legacy encodings is attempted when
       reading the data. If you use PKCS#12 files in production application
       you are advised to convert the data, because implemented heuristic
       approach is not MT-safe, its sole goal is to facilitate the data
       upgrade with this command.

EEXXAAMMPPLLEESS
       Parse a PKCS#12 file and output it to a PEM file:

        openssl pkcs12 -in file.p12 -out file.pem

       Output only client certificates to a file:

        openssl pkcs12 -in file.p12 -clcerts -out file.pem

       Don't encrypt the private key:

        openssl pkcs12 -in file.p12 -out file.pem -noenc

       Print some info about a PKCS#12 file:

        openssl pkcs12 -in file.p12 -info -noout

       Print some info about a PKCS#12 file in legacy mode:

        openssl pkcs12 -in file.p12 -info -noout -legacy

       Create a PKCS#12 file from a PEM file that may contain a key and
       certificates:

        openssl pkcs12 -export -in file.pem -out file.p12 -name "My PSE"

       Include some extra certificates:

        openssl pkcs12 -export -in file.pem -out file.p12 -name "My PSE" \
         -certfile othercerts.pem

       Export a PKCS#12 file with data from a certificate PEM file and from a
       further PEM file containing a key, with default algorithms as in the
       legacy provider:

        openssl pkcs12 -export -in cert.pem -inkey key.pem -out file.p12 -legacy

SSEEEE AALLSSOO
       ooppeennssssll(1), ooppeennssssll--ppkkccss88(1), oossssll__ssttoorree--ffiillee(7)

HHIISSTTOORRYY
       The --eennggiinnee option was deprecated in OpenSSL 3.0.  The --nnooddeess option
       was deprecated in OpenSSL 3.0, too; use --nnooeenncc instead.

CCOOPPYYRRIIGGHHTT
       Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.1                             2022-01-31             OPENSSL-PKCS12(1ossl)
