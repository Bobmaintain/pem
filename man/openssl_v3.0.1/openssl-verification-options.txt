OPENSSL-VERIFICATION-OPTIONS(1ossl) OpenSSLOPENSSL-VERIFICATION-OPTIONS(1ossl)



NNAAMMEE
       openssl-verification-options - generic X.509 certificate verification
       options

SSYYNNOOPPSSIISS
       ooppeennssssll _c_o_m_m_a_n_d [ _o_p_t_i_o_n_s ... ] [ _p_a_r_a_m_e_t_e_r_s ... ]

DDEESSCCRRIIPPTTIIOONN
       There are many situations where X.509 certificates are verified within
       the OpenSSL libraries and in various OpenSSL commands.

       Certificate verification is implemented by XX550099__vveerriiffyy__cceerrtt(3).  It is
       a complicated process consisting of a number of steps and depending on
       numerous options.  The most important of them are detailed in the
       following sections.

       In a nutshell, a valid chain of certificates needs to be built up and
       verified starting from the _t_a_r_g_e_t _c_e_r_t_i_f_i_c_a_t_e that is to be verified
       and ending in a certificate that due to some policy is trusted.
       Verification is done relative to the given _p_u_r_p_o_s_e, which is the
       intended use of the target certificate, such as SSL server, or by
       default for any purpose.

       The details of how each OpenSSL command handles errors are documented
       on the specific command page.

       DANE support is documented in ooppeennssssll--ss__cclliieenntt(1),
       SSSSLL__CCTTXX__ddaannee__eennaabbllee(3), SSSSLL__sseett11__hhoosstt(3),
       XX550099__VVEERRIIFFYY__PPAARRAAMM__sseett__ffllaaggss(3), and XX550099__cchheecckk__hhoosstt(3).

   TTrruusstt AAnncchhoorrss
       In general, according to RFC 4158 and RFC 5280, a _t_r_u_s_t _a_n_c_h_o_r is any
       public key and related subject distinguished name (DN) that for some
       reason is considered trusted and thus is acceptable as the root of a
       chain of certificates.

       In practice, trust anchors are given in the form of certificates, where
       their essential fields are the public key and the subject DN.  In
       addition to the requirements in RFC 5280, OpenSSL checks the validity
       period of such certificates and makes use of some further fields.  In
       particular, the subject key identifier extension, if present, is used
       for matching trust anchors during chain building.

       In the most simple and common case, trust anchors are by default all
       self-signed "root" CA certificates that are placed in the _t_r_u_s_t _s_t_o_r_e,
       which is a collection of certificates that are trusted for certain
       uses.  This is akin to what is used in the trust stores of Mozilla
       Firefox, or Apple's and Microsoft's certificate stores, ...

       From the OpenSSL perspective, a trust anchor is a certificate that
       should be augmented with an explicit designation for which uses of a
       target certificate the certificate may serve as a trust anchor.  In PEM
       encoding, this is indicated by the "TRUSTED CERTIFICATE" string.  Such
       a designation provides a set of positive trust attributes explicitly
       stating trust for the listed purposes and/or a set of negative trust
       attributes explicitly rejecting the use for the listed purposes.  The
       purposes are encoded using the values defined for the extended key
       usages (EKUs) that may be given in X.509 extensions of end-entity
       certificates.  See also the "Extended Key Usage" section below.

       The currently recognized uses are cclliieennttAAuutthh (SSL client use),
       sseerrvveerrAAuutthh (SSL server use), eemmaaiillPPrrootteeccttiioonn (S/MIME email use),
       ccooddeeSSiiggnniinngg (object signer use), OOCCSSPPSSiiggnniinngg (OCSP responder use), OOCCSSPP
       (OCSP request use), ttiimmeeSSttaammppiinngg (TSA server use), and
       aannyyEExxtteennddeeddKKeeyyUUssaaggee.  As of OpenSSL 1.1.0, the last of these blocks all
       uses when rejected or enables all uses when trusted.

       A certificate, which may be CA certificate or an end-entity
       certificate, is considered a trust anchor for the given use if and only
       if all the following conditions hold:

       •   It is an an element of the trust store.

       •   It does not have a negative trust attribute rejecting the given
           use.

       •   It has a positive trust attribute accepting the given use or (by
           default) one of the following compatibilty conditions apply: It is
           self-signed or the --ppaarrttiiaall__cchhaaiinn option is given (which
           corresponds to the XX550099__VV__FFLLAAGG__PPAARRTTIIAALL__CCHHAAIINN flag being set).

   CCeerrttiiffiiccaattiioonn PPaatthh BBuuiillddiinngg
       First, a certificate chain is built up starting from the target
       certificate and ending in a trust anchor.

       The chain is built up iteratively, looking up in turn a certificate
       with suitable key usage that matches as an issuer of the current
       "subject" certificate as described below.  If there is such a
       certificate, the first one found that is currently valid is taken,
       otherwise the one that expired most recently of all such certificates.
       For efficiency, no backtracking is performed, thus any further
       candidate issuer certificates that would match equally are ignored.

       When a self-signed certificate has been added, chain construction
       stops.  In this case it must fully match a trust anchor, otherwise
       chain building fails.

       A candidate issuer certificate matches a subject certificate if all of
       the following conditions hold:

       •   Its subject name matches the issuer name of the subject
           certificate.

       •   If the subject certificate has an authority key identifier
           extension, each of its sub-fields equals the corresponding subject
           key identifier, serial number, and issuer field of the candidate
           issuer certificate, as far as the respective fields are present in
           both certificates.

       •   The certificate signature algorithm used to sign the subject
           certificate is supported and equals the public key algorithm of the
           candidate issuer certificate.

       The lookup first searches for issuer certificates in the trust store.
       If it does not find a match there it consults the list of untrusted
       ("intermediate" CA) certificates, if provided.

   CCeerrttiiffiiccaattiioonn PPaatthh VVaalliiddaattiioonn
       When the certificate chain building process was successful the chain
       components and their links are checked thoroughly.

       The first step is to check that each certificate is well-formed.  Part
       of these checks are enabled only if the --xx550099__ssttrriicctt option is given.

       The second step is to check the extensions of every untrusted
       certificate for consistency with the supplied purpose.  If the --ppuurrppoossee
       option is not given then no such checks are done except for SSL/TLS
       connection setup, where by default "sslserver" or "sslclient", are
       checked.  The target or "leaf" certificate, as well as any other
       untrusted certificates, must have extensions compatible with the
       specified purpose.  All certificates except the target or "leaf" must
       also be valid CA certificates.  The precise extensions required are
       described in more detail in "CERTIFICATE EXTENSIONS" in
       ooppeennssssll--xx550099(1).

       The third step is to check the trust settings on the last certificate
       (which typically is a self-signed root CA certificate).  It must be
       trusted for the given use.  For compatibility with previous versions of
       OpenSSL, a self-signed certificate with no trust attributes is
       considered to be valid for all uses.

       The fourth, and final, step is to check the validity of the certificate
       chain.  For each element in the chain, including the root CA
       certificate, the validity period as specified by the "notBefore" and
       "notAfter" fields is checked against the current system time.  The
       --aattttiimmee flag may be used to use a reference time other than "now."  The
       certificate signature is checked as well (except for the signature of
       the typically self-signed root CA certificate, which is verified only
       if the --cchheecckk__ssss__ssiigg option is given).  When verifying a certificate
       signature the keyUsage extension (if present) of the candidate issuer
       certificate is checked to permit digitalSignature for signing proxy
       certificates or to permit keyCertSign for signing other certificates,
       respectively.  If all operations complete successfully then certificate
       is considered valid. If any operation fails then the certificate is not
       valid.

OOPPTTIIOONNSS
   TTrruusstteedd CCeerrttiiffiiccaattee OOppttiioonnss
       The following options specify how to supply the certificates that can
       be used as trust anchors for certain uses.  As mentioned, a collection
       of such certificates is called a _t_r_u_s_t _s_t_o_r_e.

       Note that OpenSSL does not provide a default set of trust anchors.
       Many Linux distributions include a system default and configure OpenSSL
       to point to that.  Mozilla maintains an influential trust store that
       can be found at
       <https://www.mozilla.org/en-US/about/governance/policies/security-group/certs/>.

       The certificates to add to the trust store can be specified using
       following options.

       --CCAAffiillee _f_i_l_e
           Load the specified file which contains a certificate or several of
           them in case the input is in PEM or PKCS#12 format.  PEM-encoded
           certificates may also have trust attributes set.

       --nnoo--CCAAffiillee
           Do not load the default file of trusted certificates.

       --CCAAppaatthh _d_i_r
           Use the specified directory as a collection of trusted
           certificates, i.e., a trust store.  Files should be named with the
           hash value of the X.509 SubjectName of each certificate. This is so
           that the library can extract the IssuerName, hash it, and directly
           lookup the file to get the issuer certificate.  See
           ooppeennssssll--rreehhaasshh(1) for information on creating this type of
           directory.

       --nnoo--CCAAppaatthh
           Do not use the default directory of trusted certificates.

       --CCAAssttoorree _u_r_i
           Use _u_r_i as a store of CA certificates.  The URI may indicate a
           single certificate, as well as a collection of them.  With URIs in
           the "file:" scheme, this acts as --CCAAffiillee or --CCAAppaatthh, depending on
           if the URI indicates a single file or directory.  See
           oossssll__ssttoorree--ffiillee(7) for more information on the "file:" scheme.

           These certificates are also used when building the server
           certificate chain (for example with ooppeennssssll--ss__sseerrvveerr(1)) or client
           certificate chain (for example with ooppeennssssll--ss__ttiimmee(1)).

       --nnoo--CCAAssttoorree
           Do not use the default store of trusted CA certificates.

   VVeerriiffiiccaattiioonn OOppttiioonnss
       The certificate verification can be fine-tuned with the following
       flags.

       --vveerrbboossee
           Print extra information about the operations being performed.

       --aattttiimmee _t_i_m_e_s_t_a_m_p
           Perform validation checks using time specified by _t_i_m_e_s_t_a_m_p and not
           current system time. _t_i_m_e_s_t_a_m_p is the number of seconds since
           January 1, 1970 (i.e., the Unix Epoch).

       --nnoo__cchheecckk__ttiimmee
           This option suppresses checking the validity period of certificates
           and CRLs against the current time. If option --aattttiimmee is used to
           specify a verification time, the check is not suppressed.

       --xx550099__ssttrriicctt
           This disables non-compliant workarounds for broken certificates.
           Thus errors are thrown on certificates not compliant with RFC 5280.

           When this option is set, among others, the following certificate
           well-formedness conditions are checked:

           •   The basicConstraints of CA certificates must be marked
               critical.

           •   CA certificates must explicitly include the keyUsage extension.

           •   If a pathlenConstraint is given the key usage keyCertSign must
               be allowed.

           •   The pathlenConstraint must not be given for non-CA
               certificates.

           •   The issuer name of any certificate must not be empty.

           •   The subject name of CA certs, certs with keyUsage crlSign, and
               certs without subjectAlternativeName must not be empty.

           •   If a subjectAlternativeName extension is given it must not be
               empty.

           •   The signatureAlgorithm field and the cert signature must be
               consistent.

           •   Any given authorityKeyIdentifier and any given
               subjectKeyIdentifier must not be marked critical.

           •   The authorityKeyIdentifier must be given for X.509v3 certs
               unless they are self-signed.

           •   The subjectKeyIdentifier must be given for all X.509v3 CA
               certs.

       --iiggnnoorree__ccrriittiiccaall
           Normally if an unhandled critical extension is present that is not
           supported by OpenSSL the certificate is rejected (as required by
           RFC5280).  If this option is set critical extensions are ignored.

       --iissssuueerr__cchheecckkss
           Ignored.

       --ccrrll__cchheecckk
           Checks end entity certificate validity by attempting to look up a
           valid CRL.  If a valid CRL cannot be found an error occurs.

       --ccrrll__cchheecckk__aallll
           Checks the validity of aallll certificates in the chain by attempting
           to look up valid CRLs.

       --uussee__ddeellttaass
           Enable support for delta CRLs.

       --eexxtteennddeedd__ccrrll
           Enable extended CRL features such as indirect CRLs and alternate
           CRL signing keys.

       --ssuuiitteeBB__112288__oonnllyy, --ssuuiitteeBB__112288, --ssuuiitteeBB__119922
           Enable the Suite B mode operation at 128 bit Level of Security, 128
           bit or 192 bit, or only 192 bit Level of Security respectively.
           See RFC6460 for details. In particular the supported signature
           algorithms are reduced to support only ECDSA and SHA256 or SHA384
           and only the elliptic curves P-256 and P-384.

       --aauutthh__lleevveell _l_e_v_e_l
           Set the certificate chain authentication security level to _l_e_v_e_l.
           The authentication security level determines the acceptable
           signature and public key strength when verifying certificate
           chains.  For a certificate chain to validate, the public keys of
           all the certificates must meet the specified security _l_e_v_e_l.  The
           signature algorithm security level is enforced for all the
           certificates in the chain except for the chain's _t_r_u_s_t _a_n_c_h_o_r,
           which is either directly trusted or validated by means other than
           its signature.  See SSSSLL__CCTTXX__sseett__sseeccuurriittyy__lleevveell(3) for the
           definitions of the available levels.  The default security level is
           -1, or "not set".  At security level 0 or lower all algorithms are
           acceptable.  Security level 1 requires at least 80-bit-equivalent
           security and is broadly interoperable, though it will, for example,
           reject MD5 signatures or RSA keys shorter than 1024 bits.

       --ppaarrttiiaall__cchhaaiinn
           Allow verification to succeed if an incomplete chain can be built.
           That is, a chain ending in a certificate that normally would not be
           trusted (because it has no matching positive trust attributes and
           is not self-signed) but is an element of the trust store.  This
           certificate may be self-issued or belong to an intermediate CA.

       --cchheecckk__ssss__ssiigg
           Verify the signature of the last certificate in a chain if the
           certificate is supposedly self-signed.  This is prohibited and will
           result in an error if it is a non-conforming CA certificate with
           key usage restrictions not including the keyCertSign bit.  This
           verification is disabled by default because it doesn't add any
           security.

       --aallllooww__pprrooxxyy__cceerrttss
           Allow the verification of proxy certificates.

       --ttrruusstteedd__ffiirrsstt
           As of OpenSSL 1.1.0 this option is on by default and cannot be
           disabled.

           When constructing the certificate chain, the trusted certificates
           specified via --CCAAffiillee, --CCAAppaatthh, --CCAAssttoorree or --ttrruusstteedd are always
           used before any certificates specified via --uunnttrruusstteedd.

       --nnoo__aalltt__cchhaaiinnss
           As of OpenSSL 1.1.0, since --ttrruusstteedd__ffiirrsstt always on, this option
           has no effect.

       --ttrruusstteedd _f_i_l_e
           Parse _f_i_l_e as a set of one or more certificates.  Each of them
           qualifies as trusted if has a suitable positive trust attribute or
           it is self-signed or the --ppaarrttiiaall__cchhaaiinn option is specified.  This
           option implies the --nnoo--CCAAffiillee, --nnoo--CCAAppaatthh, and --nnoo--CCAAssttoorree options
           and it cannot be used with the --CCAAffiillee, --CCAAppaatthh or --CCAAssttoorree
           options, so only certificates specified using the --ttrruusstteedd option
           are trust anchors.  This option may be used multiple times.

       --uunnttrruusstteedd _f_i_l_e
           Parse _f_i_l_e as a set of one or more certificates.  All certificates
           (typically of intermediate CAs) are considered untrusted and may be
           used to construct a certificate chain from the target certificate
           to a trust anchor.  This option may be used multiple times.

       --ppoolliiccyy _a_r_g
           Enable policy processing and add _a_r_g to the user-initial-policy-set
           (see RFC5280). The policy _a_r_g can be an object name an OID in
           numeric form.  This argument can appear more than once.

       --eexxpplliicciitt__ppoolliiccyy
           Set policy variable require-explicit-policy (see RFC5280).

       --ppoolliiccyy__cchheecckk
           Enables certificate policy processing.

       --ppoolliiccyy__pprriinntt
           Print out diagnostics related to policy processing.

       --iinnhhiibbiitt__aannyy
           Set policy variable inhibit-any-policy (see RFC5280).

       --iinnhhiibbiitt__mmaapp
           Set policy variable inhibit-policy-mapping (see RFC5280).

       --ppuurrppoossee _p_u_r_p_o_s_e
           The intended use for the certificate.  Currently defined purposes
           are "sslclient", "sslserver", "nssslserver", "smimesign",
           "smimeencrypt", "crlsign", "ocsphelper", "timestampsign", and
           "any".  If peer certificate verification is enabled, by default the
           TLS implementation as well as the commands ss__cclliieenntt and ss__sseerrvveerr
           check for consistency with TLS server or TLS client use,
           respectively.

           While IETF RFC 5280 says that iidd--kkpp--sseerrvveerrAAuutthh and iidd--kkpp--cclliieennttAAuutthh
           are only for WWW use, in practice they are used for all kinds of
           TLS clients and servers, and this is what OpenSSL assumes as well.

       --vveerriiffyy__ddeepptthh _n_u_m
           Limit the certificate chain to _n_u_m intermediate CA certificates.  A
           maximal depth chain can have up to _n_u_m+2 certificates, since
           neither the end-entity certificate nor the trust-anchor certificate
           count against the --vveerriiffyy__ddeepptthh limit.

       --vveerriiffyy__eemmaaiill _e_m_a_i_l
           Verify if _e_m_a_i_l matches the email address in Subject Alternative
           Name or the email in the subject Distinguished Name.

       --vveerriiffyy__hhoossttnnaammee _h_o_s_t_n_a_m_e
           Verify if _h_o_s_t_n_a_m_e matches DNS name in Subject Alternative Name or
           Common Name in the subject certificate.

       --vveerriiffyy__iipp _i_p
           Verify if _i_p matches the IP address in Subject Alternative Name of
           the subject certificate.

       --vveerriiffyy__nnaammee _n_a_m_e
           Use default verification policies like trust model and required
           certificate policies identified by _n_a_m_e.  The trust model
           determines which auxiliary trust or reject OIDs are applicable to
           verifying the given certificate chain.  They can be given using the
           --aaddddttrruusstt and --aaddddrreejjeecctt options for ooppeennssssll--xx550099(1).  Supported
           policy names include: ddeeffaauulltt, ppkkccss77, ssmmiimmee__ssiiggnn, ssssll__cclliieenntt,
           ssssll__sseerrvveerr.  These mimics the combinations of purpose and trust
           settings used in SSL, CMS and S/MIME.  As of OpenSSL 1.1.0, the
           trust model is inferred from the purpose when not specified, so the
           --vveerriiffyy__nnaammee options are functionally equivalent to the
           corresponding --ppuurrppoossee settings.

   EExxtteennddeedd VVeerriiffiiccaattiioonn OOppttiioonnss
       Sometimes there may be more than one certificate chain leading to an
       end-entity certificate.  This usually happens when a root or
       intermediate CA signs a certificate for another a CA in other
       organization.  Another reason is when a CA might have intermediates
       that use two different signature formats, such as a SHA-1 and a SHA-256
       digest.

       The following options can be used to provide data that will allow the
       OpenSSL command to generate an alternative chain.

       --xxkkeeyy _i_n_f_i_l_e, --xxcceerrtt _i_n_f_i_l_e, --xxcchhaaiinn
           Specify an extra certificate, private key and certificate chain.
           These behave in the same manner as the --cceerrtt, --kkeeyy and --cceerrtt__cchhaaiinn
           options.  When specified, the callback returning the first valid
           chain will be in use by the client.

       --xxcchhaaiinn__bbuuiilldd
           Specify whether the application should build the certificate chain
           to be provided to the server for the extra certificates via the
           --xxkkeeyy, --xxcceerrtt, and --xxcchhaaiinn options.

       --xxcceerrttffoorrmm DDEERR|PPEEMM|PP1122
           The input format for the extra certificate.  This option has no
           effect and is retained for backward compatibility only.

       --xxkkeeyyffoorrmm DDEERR|PPEEMM|PP1122
           The input format for the extra key.  This option has no effect and
           is retained for backward compatibility only.

   CCeerrttiiffiiccaattee EExxtteennssiioonnss
       Options like --ppuurrppoossee lead to checking the certificate extensions,
       which determine what the target certificate and intermediate CA
       certificates can be used for.

       _B_a_s_i_c _C_o_n_s_t_r_a_i_n_t_s

       The basicConstraints extension CA flag is used to determine whether the
       certificate can be used as a CA. If the CA flag is true then it is a
       CA, if the CA flag is false then it is not a CA. AAllll CAs should have
       the CA flag set to true.

       If the basicConstraints extension is absent, which includes the case
       that it is an X.509v1 certificate, then the certificate is considered
       to be a "possible CA" and other extensions are checked according to the
       intended use of the certificate.  The treatment of certificates without
       basicConstraints as a CA is presently supported, but this could change
       in the future.

       _K_e_y _U_s_a_g_e

       If the keyUsage extension is present then additional restraints are
       made on the uses of the certificate. A CA certificate mmuusstt have the
       keyCertSign bit set if the keyUsage extension is present.

       _E_x_t_e_n_d_e_d _K_e_y _U_s_a_g_e

       The extKeyUsage (EKU) extension places additional restrictions on the
       certificate uses. If this extension is present (whether critical or
       not) the key can only be used for the purposes specified.

       A complete description of each check is given below. The comments about
       basicConstraints and keyUsage and X.509v1 certificates above apply to
       aallll CA certificates.

       SSSSLL CClliieenntt
           The extended key usage extension must be absent or include the "web
           client authentication" OID.  The keyUsage extension must be absent
           or it must have the digitalSignature bit set.  The Netscape
           certificate type must be absent or it must have the SSL client bit
           set.

       SSSSLL CClliieenntt CCAA
           The extended key usage extension must be absent or include the "web
           client authentication" OID.  The Netscape certificate type must be
           absent or it must have the SSL CA bit set.  This is used as a work
           around if the basicConstraints extension is absent.

       SSSSLL SSeerrvveerr
           The extended key usage extension must be absent or include the "web
           server authentication" and/or one of the SGC OIDs.  The keyUsage
           extension must be absent or it must have the digitalSignature, the
           keyEncipherment set or both bits set.  The Netscape certificate
           type must be absent or have the SSL server bit set.

       SSSSLL SSeerrvveerr CCAA
           The extended key usage extension must be absent or include the "web
           server authentication" and/or one of the SGC OIDs.  The Netscape
           certificate type must be absent or the SSL CA bit must be set.
           This is used as a work around if the basicConstraints extension is
           absent.

       NNeettssccaappee SSSSLL SSeerrvveerr
           For Netscape SSL clients to connect to an SSL server it must have
           the keyEncipherment bit set if the keyUsage extension is present.
           This isn't always valid because some cipher suites use the key for
           digital signing.  Otherwise it is the same as a normal SSL server.

       CCoommmmoonn SS//MMIIMMEE CClliieenntt TTeessttss
           The extended key usage extension must be absent or include the
           "email protection" OID.  The Netscape certificate type must be
           absent or should have the S/MIME bit set. If the S/MIME bit is not
           set in the Netscape certificate type then the SSL client bit is
           tolerated as an alternative but a warning is shown.  This is
           because some Verisign certificates don't set the S/MIME bit.

       SS//MMIIMMEE SSiiggnniinngg
           In addition to the common S/MIME client tests the digitalSignature
           bit or the nonRepudiation bit must be set if the keyUsage extension
           is present.

       SS//MMIIMMEE EEnnccrryyppttiioonn
           In addition to the common S/MIME tests the keyEncipherment bit must
           be set if the keyUsage extension is present.

       SS//MMIIMMEE CCAA
           The extended key usage extension must be absent or include the
           "email protection" OID.  The Netscape certificate type must be
           absent or must have the S/MIME CA bit set.  This is used as a work
           around if the basicConstraints extension is absent.

       CCRRLL SSiiggnniinngg
           The keyUsage extension must be absent or it must have the CRL
           signing bit set.

       CCRRLL SSiiggnniinngg CCAA
           The normal CA tests apply. Except in this case the basicConstraints
           extension must be present.

BBUUGGSS
       The issuer checks still suffer from limitations in the underlying
       X509_LOOKUP API.  One consequence of this is that trusted certificates
       with matching subject name must appear in a file (as specified by the
       --CCAAffiillee option), a directory (as specified by --CCAAppaatthh), or a store (as
       specified by --CCAAssttoorree).  If there are multiple such matches, possibly
       in multiple locations, only the first one (in the mentioned order of
       locations) is recognised.

SSEEEE AALLSSOO
       XX550099__vveerriiffyy__cceerrtt(3), ooppeennssssll--vveerriiffyy(1), ooppeennssssll--ooccsspp(1), ooppeennssssll--ttss(1),
       ooppeennssssll--ss__cclliieenntt(1), ooppeennssssll--ss__sseerrvveerr(1), ooppeennssssll--ssmmiimmee(1),
       ooppeennssssll--ccmmpp(1), ooppeennssssll--ccmmss(1)

HHIISSTTOORRYY
       The checks enabled by --xx550099__ssttrriicctt have been extended in OpenSSL 3.0.

CCOOPPYYRRIIGGHHTT
       Copyright 2000-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.1                             2021-12-14OPENSSL-VERIFICATION-OPTIONS(1ossl)
