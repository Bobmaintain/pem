TSGET(1ossl)                        OpenSSL                       TSGET(1ossl)



NNAAMMEE
       tsget - Time Stamping HTTP/HTTPS client

SSYYNNOOPPSSIISS
       ttssggeett --hh _s_e_r_v_e_r___u_r_l [--ee _e_x_t_e_n_s_i_o_n] [--oo _o_u_t_p_u_t] [--vv] [--dd] [--kk
       _p_r_i_v_a_t_e___k_e_y_._p_e_m] [--pp _k_e_y___p_a_s_s_w_o_r_d] [--cc _c_l_i_e_n_t___c_e_r_t_._p_e_m] [--CC
       _C_A___c_e_r_t_s_._p_e_m] [--PP _C_A___p_a_t_h] [--rr _f_i_l_e_s] [--gg _E_G_D___s_o_c_k_e_t] [_r_e_q_u_e_s_t ...]

DDEESSCCRRIIPPTTIIOONN
       This command can be used for sending a timestamp request, as specified
       in RFC 3161, to a timestamp server over HTTP or HTTPS and storing the
       timestamp response in a file. It cannot be used for creating the
       requests and verifying responses, you have to use ooppeennssssll--ttss(1) to do
       that. This command can send several requests to the server without
       closing the TCP connection if more than one requests are specified on
       the command line.

       This command sends the following HTTP request for each timestamp
       request:

               POST url HTTP/1.1
               User-Agent: OpenTSA tsget.pl/<version>
               Host: <host>:<port>
               Pragma: no-cache
               Content-Type: application/timestamp-query
               Accept: application/timestamp-reply
               Content-Length: length of body

               ...binary request specified by the user...

       It expects a response of type application/timestamp-reply, which is
       written to a file without any interpretation.

OOPPTTIIOONNSS
       --hh _s_e_r_v_e_r___u_r_l
           The URL of the HTTP/HTTPS server listening for timestamp requests.

       --ee _e_x_t_e_n_s_i_o_n
           If the --oo option is not given this argument specifies the extension
           of the output files. The base name of the output file will be the
           same as those of the input files. Default extension is _._t_s_r.
           (Optional)

       --oo _o_u_t_p_u_t
           This option can be specified only when just one request is sent to
           the server. The timestamp response will be written to the given
           output file. '-' means standard output. In case of multiple
           timestamp requests or the absence of this argument the names of the
           output files will be derived from the names of the input files and
           the default or specified extension argument. (Optional)

       --vv  The name of the currently processed request is printed on standard
           error. (Optional)

       --dd  Switches on verbose mode for the underlying perl module
           WWW::Curl::Easy.  You can see detailed debug messages for the
           connection. (Optional)

       --kk _p_r_i_v_a_t_e___k_e_y_._p_e_m
           (HTTPS) In case of certificate-based client authentication over
           HTTPS _p_r_i_v_a_t_e___k_e_y_._p_e_m must contain the private key of the user. The
           private key file can optionally be protected by a passphrase. The
           --cc option must also be specified. (Optional)

       --pp _k_e_y___p_a_s_s_w_o_r_d
           (HTTPS) Specifies the passphrase for the private key specified by
           the --kk argument. If this option is omitted and the key is
           passphrase protected, it will be prompted for. (Optional)

       --cc _c_l_i_e_n_t___c_e_r_t_._p_e_m
           (HTTPS) In case of certificate-based client authentication over
           HTTPS _c_l_i_e_n_t___c_e_r_t_._p_e_m must contain the X.509 certificate of the
           user.  The --kk option must also be specified. If this option is not
           specified no certificate-based client authentication will take
           place. (Optional)

       --CC _C_A___c_e_r_t_s_._p_e_m
           (HTTPS) The trusted CA certificate store. The certificate chain of
           the peer's certificate must include one of the CA certificates
           specified in this file.  Either option --CC or option --PP must be
           given in case of HTTPS. (Optional)

       --PP _C_A___p_a_t_h
           (HTTPS) The path containing the trusted CA certificates to verify
           the peer's certificate. The directory must be prepared with
           ooppeennssssll--rreehhaasshh(1). Either option --CC or option --PP must be given in
           case of HTTPS. (Optional)

       --rr _f_i_l_e_s
           See "Random State Options" in ooppeennssssll(1) for more information.

       --gg _E_G_D___s_o_c_k_e_t
           The name of an EGD socket to get random data from. (Optional)

       _r_e_q_u_e_s_t ...
           List of files containing RFC 3161 DER-encoded timestamp requests.
           If no requests are specified only one request will be sent to the
           server and it will be read from the standard input.  (Optional)

EENNVVIIRROONNMMEENNTT VVAARRIIAABBLLEESS
       The TTSSGGEETT environment variable can optionally contain default
       arguments. The content of this variable is added to the list of command
       line arguments.

EEXXAAMMPPLLEESS
       The examples below presume that _f_i_l_e_1_._t_s_q and _f_i_l_e_2_._t_s_q contain valid
       timestamp requests, tsa.opentsa.org listens at port 8080 for HTTP
       requests and at port 8443 for HTTPS requests, the TSA service is
       available at the /tsa absolute path.

       Get a timestamp response for _f_i_l_e_1_._t_s_q over HTTP, output is written to
       _f_i_l_e_1_._t_s_r:

         tsget -h http://tsa.opentsa.org:8080/tsa file1.tsq

       Get a timestamp response for _f_i_l_e_1_._t_s_q and _f_i_l_e_2_._t_s_q over HTTP showing
       progress, output is written to _f_i_l_e_1_._r_e_p_l_y and _f_i_l_e_2_._r_e_p_l_y
       respectively:

         tsget -h http://tsa.opentsa.org:8080/tsa -v -e .reply \
               file1.tsq file2.tsq

       Create a timestamp request, write it to _f_i_l_e_3_._t_s_q, send it to the
       server and write the response to _f_i_l_e_3_._t_s_r:

         openssl ts -query -data file3.txt -cert | tee file3.tsq \
               | tsget -h http://tsa.opentsa.org:8080/tsa \
               -o file3.tsr

       Get a timestamp response for _f_i_l_e_1_._t_s_q over HTTPS without client
       authentication:

         tsget -h https://tsa.opentsa.org:8443/tsa \
               -C cacerts.pem file1.tsq

       Get a timestamp response for _f_i_l_e_1_._t_s_q over HTTPS with certificate-
       based client authentication (it will ask for the passphrase if
       _c_l_i_e_n_t___k_e_y_._p_e_m is protected):

         tsget -h https://tsa.opentsa.org:8443/tsa -C cacerts.pem \
               -k client_key.pem -c client_cert.pem file1.tsq

       You can shorten the previous command line if you make use of the TTSSGGEETT
       environment variable. The following commands do the same as the
       previous example:

         TSGET='-h https://tsa.opentsa.org:8443/tsa -C cacerts.pem \
               -k client_key.pem -c client_cert.pem'
         export TSGET
         tsget file1.tsq

SSEEEE AALLSSOO
       ooppeennssssll(1), ooppeennssssll--ttss(1), WWW::Curl::Easy,
       <https://www.rfc-editor.org/rfc/rfc3161.html>

CCOOPPYYRRIIGGHHTT
       Copyright 2006-2020 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.1                             2021-12-14                      TSGET(1ossl)
