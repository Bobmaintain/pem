OPENSSL-CMS(1ossl)                  OpenSSL                 OPENSSL-CMS(1ossl)



NNAAMMEE
       openssl-cms - CMS command

SSYYNNOOPPSSIISS
       ooppeennssssll ccmmss [--hheellpp]

       General options:

       [--iinn _f_i_l_e_n_a_m_e] [--oouutt _f_i_l_e_n_a_m_e] [--ccoonnffiigg _c_o_n_f_i_g_f_i_l_e]

       Operation options:

       [--eennccrryypptt] [--ddeeccrryypptt] [--ssiiggnn] [--vveerriiffyy] [--rreessiiggnn] [--ssiiggnn__rreecceeiipptt]
       [--vveerriiffyy__rreecceeiipptt _r_e_c_e_i_p_t] [--ddiiggeesstt__ccrreeaattee] [--ddiiggeesstt__vveerriiffyy] [--ccoommpprreessss]
       [--uunnccoommpprreessss] [--EEnnccrryypptteeddDDaattaa__eennccrryypptt] [--EEnnccrryypptteeddDDaattaa__ddeeccrryypptt]
       [--ddaattaa__ccrreeaattee] [--ddaattaa__oouutt] [--ccmmssoouutt]

       File format options:

       [--iinnffoorrmm DDEERR|PPEEMM|SSMMIIMMEE] [--oouuttffoorrmm DDEERR|PPEEMM|SSMMIIMMEE] [--rrccttffoorrmm
       DDEERR|PPEEMM|SSMMIIMMEE] [--ssttrreeaamm] [--iinnddeeff] [--nnooiinnddeeff] [--bbiinnaarryy] [--ccrrllffeeooll]
       [--aasscciiiiccrrllff]

       Keys and password options:

       [--ppwwrrii__ppaasssswwoorrdd _p_a_s_s_w_o_r_d] [--sseeccrreettkkeeyy _k_e_y] [--sseeccrreettkkeeyyiidd _i_d] [--iinnkkeeyy
       _f_i_l_e_n_a_m_e|_u_r_i] [--ppaassssiinn _a_r_g] [--kkeeyyoopptt _n_a_m_e:_p_a_r_a_m_e_t_e_r] [--kkeeyyffoorrmm
       DDEERR|PPEEMM|PP1122|EENNGGIINNEE] [--eennggiinnee _i_d] [--pprroovviiddeerr _n_a_m_e] [--pprroovviiddeerr--ppaatthh _p_a_t_h]
       [--pprrooppqquueerryy _p_r_o_p_q] [--rraanndd _f_i_l_e_s] [--wwrriitteerraanndd _f_i_l_e]

       Encryption options:

       [--oorriiggiinnaattoorr _f_i_l_e] [--rreecciipp _f_i_l_e] [_r_e_c_i_p_i_e_n_t_-_c_e_r_t ...]  [--_cc_ii_pp_hh_ee_rr] [--wwrraapp
       _c_i_p_h_e_r] [--aaeess112288--wwrraapp] [--aaeess119922--wwrraapp] [--aaeess225566--wwrraapp] [--ddeess33--wwrraapp]
       [--ddeebbuugg__ddeeccrryypptt]

       Signing options:

       [--mmdd _d_i_g_e_s_t] [--ssiiggnneerr _f_i_l_e] [--cceerrttffiillee _f_i_l_e] [--ccaaddeess] [--nnooddeettaacchh]
       [--nnoocceerrttss] [--nnooaattttrr] [--nnoossmmiimmeeccaapp] [--rreecceeiipptt__rreeqquueesstt__aallll]
       [--rreecceeiipptt__rreeqquueesstt__ffiirrsstt] [--rreecceeiipptt__rreeqquueesstt__ffrroomm _e_m_a_i_l_a_d_d_r_e_s_s]
       [--rreecceeiipptt__rreeqquueesstt__ttoo _e_m_a_i_l_a_d_d_r_e_s_s]

       Verification options:

       [--ssiiggnneerr _f_i_l_e] [--ccoonntteenntt _f_i_l_e_n_a_m_e] [--nnoo__ccoonntteenntt__vveerriiffyy]
       [--nnoo__aattttrr__vveerriiffyy] [--nnoossiiggss] [--nnoovveerriiffyy] [--nnooiinntteerrnn] [--ccaaddeess]
       [--vveerriiffyy__rreettccooddee] [--CCAAffiillee _f_i_l_e] [--nnoo--CCAAffiillee] [--CCAAppaatthh _d_i_r]
       [--nnoo--CCAAppaatthh] [--CCAAssttoorree _u_r_i] [--nnoo--CCAAssttoorree]

       Output options:

       [--kkeeyyiidd] [--eeccoonntteenntt__ttyyppee _t_y_p_e] [--tteexxtt] [--cceerrttssoouutt _f_i_l_e] [--ttoo _a_d_d_r]
       [--ffrroomm _a_d_d_r] [--ssuubbjjeecctt _s_u_b_j]

       Printing options:

       [--nnoooouutt] [--pprriinntt] [--nnaammeeoopptt _o_p_t_i_o_n] [--rreecceeiipptt__rreeqquueesstt__pprriinntt]

       Validation options:

       [--aallllooww__pprrooxxyy__cceerrttss] [--aattttiimmee _t_i_m_e_s_t_a_m_p] [--nnoo__cchheecckk__ttiimmee]
       [--cchheecckk__ssss__ssiigg] [--ccrrll__cchheecckk] [--ccrrll__cchheecckk__aallll] [--eexxpplliicciitt__ppoolliiccyy]
       [--eexxtteennddeedd__ccrrll] [--iiggnnoorree__ccrriittiiccaall] [--iinnhhiibbiitt__aannyy] [--iinnhhiibbiitt__mmaapp]
       [--ppaarrttiiaall__cchhaaiinn] [--ppoolliiccyy _a_r_g] [--ppoolliiccyy__cchheecckk] [--ppoolliiccyy__pprriinntt]
       [--ppuurrppoossee _p_u_r_p_o_s_e] [--ssuuiitteeBB__112288] [--ssuuiitteeBB__112288__oonnllyy] [--ssuuiitteeBB__119922]
       [--ttrruusstteedd__ffiirrsstt] [--nnoo__aalltt__cchhaaiinnss] [--uussee__ddeellttaass] [--aauutthh__lleevveell _n_u_m]
       [--vveerriiffyy__ddeepptthh _n_u_m] [--vveerriiffyy__eemmaaiill _e_m_a_i_l] [--vveerriiffyy__hhoossttnnaammee _h_o_s_t_n_a_m_e]
       [--vveerriiffyy__iipp _i_p] [--vveerriiffyy__nnaammee _n_a_m_e] [--xx550099__ssttrriicctt] [--iissssuueerr__cchheecckkss]

DDEESSCCRRIIPPTTIIOONN
       This command handles data in CMS format such as S/MIME v3.1 email
       messages.  It can encrypt, decrypt, sign, verify, compress, uncompress,
       and print messages.

OOPPTTIIOONNSS
       There are a number of operation options that set the type of operation
       to be performed: encrypt, decrypt, sign, verify, resign, sign_receipt,
       verify_receipt, digest_create, digest_verify, compress, uncompress,
       EncryptedData_encrypt, EncryptedData_decrypt, data_create, data_out, or
       cmsout.  The relevance of the other options depends on the operation
       type and their meaning may vary according to it.

       --hheellpp
           Print out a usage message.

   GGeenneerraall ooppttiioonnss
       --iinn _f_i_l_e_n_a_m_e
           The input message to be encrypted or signed or the message to be
           decrypted or verified.

       --oouutt _f_i_l_e_n_a_m_e
           The message text that has been decrypted or verified or the output
           MIME format message that has been signed or verified.

       --ccoonnffiigg _c_o_n_f_i_g_f_i_l_e
           See "Configuration Option" in ooppeennssssll(1).

   OOppeerraattiioonn ooppttiioonnss
       --eennccrryypptt
           Encrypt data for the given recipient certificates. Input file is
           the message to be encrypted. The output file is the encrypted data
           in MIME format. The actual CMS type is EEnnvveellooppeeddDDaattaa.

           Note that no revocation check is done for the recipient cert, so if
           that key has been compromised, others may be able to decrypt the
           text.

       --ddeeccrryypptt
           Decrypt data using the supplied certificate and private key.
           Expects encrypted datain MIME format for the input file. The
           decrypted data is written to the output file.

       --ssiiggnn
           Sign data using the supplied certificate and private key. Input
           file is the message to be signed. The signed data in MIME format is
           written to the output file.

       --vveerriiffyy
           Verify signed data. Expects a signed data on input and outputs the
           signed data. Both clear text and opaque signing is supported.

       --rreessiiggnn
           Resign a message: take an existing message and one or more new
           signers.

       --ssiiggnn__rreecceeiipptt
           Generate and output a signed receipt for the supplied message. The
           input message mmuusstt contain a signed receipt request. Functionality
           is otherwise similar to the --ssiiggnn operation.

       --vveerriiffyy__rreecceeiipptt _r_e_c_e_i_p_t
           Verify a signed receipt in filename rreecceeiipptt. The input message mmuusstt
           contain the original receipt request. Functionality is otherwise
           similar to the --vveerriiffyy operation.

       --ddiiggeesstt__ccrreeaattee
           Create a CMS DDiiggeesstteeddDDaattaa type.

       --ddiiggeesstt__vveerriiffyy
           Verify a CMS DDiiggeesstteeddDDaattaa type and output the content.

       --ccoommpprreessss
           Create a CMS CCoommpprreesssseeddDDaattaa type. OpenSSL must be compiled with
           zzlliibb support for this option to work, otherwise it will output an
           error.

       --uunnccoommpprreessss
           Uncompress a CMS CCoommpprreesssseeddDDaattaa type and output the content.
           OpenSSL must be compiled with zzlliibb support for this option to work,
           otherwise it will output an error.

       --EEnnccrryypptteeddDDaattaa__eennccrryypptt
           Encrypt content using supplied symmetric key and algorithm using a
           CMS EEnnccrryypptteeddDDaattaa type and output the content.

       --EEnnccrryypptteeddDDaattaa__ddeeccrryypptt
           Decrypt content using supplied symmetric key and algorithm using a
           CMS EEnnccrryypptteeddDDaattaa type and output the content.

       --ddaattaa__ccrreeaattee
           Create a CMS DDaattaa type.

       --ddaattaa__oouutt
           DDaattaa type and output the content.

       --ccmmssoouutt
           Takes an input message and writes out a PEM encoded CMS structure.

   FFiillee ffoorrmmaatt ooppttiioonnss
       --iinnffoorrmm DDEERR|PPEEMM|SSMMIIMMEE
           The input format of the CMS structure (if one is being read); the
           default is SSMMIIMMEE.  See ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --oouuttffoorrmm DDEERR|PPEEMM|SSMMIIMMEE
           The output format of the CMS structure (if one is being written);
           the default is SSMMIIMMEE.  See ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --rrccttffoorrmm DDEERR|PPEEMM|SSMMIIMMEE
           The signed receipt format for use with the --rreecceeiipptt__vveerriiffyy; the
           default is SSMMIIMMEE.  See ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --ssttrreeaamm, --iinnddeeff
           The --ssttrreeaamm and --iinnddeeff options are equivalent and enable streaming
           I/O for encoding operations. This permits single pass processing of
           data without the need to hold the entire contents in memory,
           potentially supporting very large files. Streaming is automatically
           set for S/MIME signing with detached data if the output format is
           SSMMIIMMEE it is currently off by default for all other operations.

       --nnooiinnddeeff
           Disable streaming I/O where it would produce and indefinite length
           constructed encoding. This option currently has no effect. In
           future streaming will be enabled by default on all relevant
           operations and this option will disable it.

       --bbiinnaarryy
           Normally the input message is converted to "canonical" format which
           is effectively using CR and LF as end of line: as required by the
           S/MIME specification. When this option is present no translation
           occurs. This is useful when handling binary data which may not be
           in MIME format.

       --ccrrllffeeooll
           Normally the output file uses a single LLFF as end of line. When this
           option is present CCRRLLFF is used instead.

       --aasscciiiiccrrllff
           When signing use ASCII CRLF format canonicalisation. This strips
           trailing whitespace from all lines, deletes trailing blank lines at
           EOF and sets the encapsulated content type. This option is normally
           used with detached content and an output signature format of DER.
           This option is not normally needed when verifying as it is enabled
           automatically if the encapsulated content format is detected.

   KKeeyyss aanndd ppaasssswwoorrdd ooppttiioonnss
       --ppwwrrii__ppaasssswwoorrdd _p_a_s_s_w_o_r_d
           Specify password for recipient.

       --sseeccrreettkkeeyy _k_e_y
           Specify symmetric key to use. The key must be supplied in hex
           format and be consistent with the algorithm used. Supported by the
           --EEnnccrryypptteeddDDaattaa__eennccrryypptt --EEnnccrryypptteeddDDaattaa__ddeeccrryypptt, --eennccrryypptt and
           --ddeeccrryypptt options. When used with --eennccrryypptt or --ddeeccrryypptt the supplied
           key is used to wrap or unwrap the content encryption key using an
           AES key in the KKEEKKRReecciippiieennttIInnffoo type.

       --sseeccrreettkkeeyyiidd _i_d
           The key identifier for the supplied symmetric key for
           KKEEKKRReecciippiieennttIInnffoo type.  This option mmuusstt be present if the
           --sseeccrreettkkeeyy option is used with --eennccrryypptt. With --ddeeccrryypptt operations
           the _i_d is used to locate the relevant key if it is not supplied
           then an attempt is used to decrypt any KKEEKKRReecciippiieennttIInnffoo structures.

       --iinnkkeeyy _f_i_l_e_n_a_m_e|_u_r_i
           The private key to use when signing or decrypting. This must match
           the corresponding certificate. If this option is not specified then
           the private key must be included in the certificate file specified
           with the --rreecciipp or --ssiiggnneerr file. When signing this option can be
           used multiple times to specify successive keys.

       --ppaassssiinn _a_r_g
           The private key password source. For more information about the
           format of aarrgg see ooppeennssssll--ppaasssspphhrraassee--ooppttiioonnss(1).

       --kkeeyyoopptt _n_a_m_e:_p_a_r_a_m_e_t_e_r
           For signing and encryption this option can be used multiple times
           to set customised parameters for the preceding key or certificate.
           It can currently be used to set RSA-PSS for signing, RSA-OAEP for
           encryption or to modify default parameters for ECDH.

       --kkeeyyffoorrmm DDEERR|PPEEMM|PP1122|EENNGGIINNEE
           The format of the private key file; unspecified by default.  See
           ooppeennssssll--ffoorrmmaatt--ooppttiioonnss(1) for details.

       --eennggiinnee _i_d
           See "Engine Options" in ooppeennssssll(1).  This option is deprecated.

       --pprroovviiddeerr _n_a_m_e
       --pprroovviiddeerr--ppaatthh _p_a_t_h
       --pprrooppqquueerryy _p_r_o_p_q
           See "Provider Options" in ooppeennssssll(1), pprroovviiddeerr(7), and pprrooppeerrttyy(7).

       --rraanndd _f_i_l_e_s, --wwrriitteerraanndd _f_i_l_e
           See "Random State Options" in ooppeennssssll(1) for details.

   EEnnccrryyppttiioonn aanndd ddeeccrryyppttiioonn ooppttiioonnss
       --oorriiggiinnaattoorr _f_i_l_e
           A certificate of the originator of the encrypted message. Necessary
           for decryption when Key Agreement is in use for a shared key.

       --rreecciipp _f_i_l_e
           When decrypting a message this specifies the certificate of the
           recipient.  The certificate must match one of the recipients of the
           message.

           When encrypting a message this option may be used multiple times to
           specify each recipient. This form mmuusstt be used if customised
           parameters are required (for example to specify RSA-OAEP).

           Only certificates carrying RSA, Diffie-Hellman or EC keys are
           supported by this option.

       _r_e_c_i_p_i_e_n_t_-_c_e_r_t ...
           This is an alternative to using the --rreecciipp option when encrypting a
           message.  One or more certificate filennames may be given.

       --_cc_ii_pp_hh_ee_rr
           The encryption algorithm to use. For example triple DES (168 bits)
           - --ddeess33 or 256 bit AES - --aaeess225566. Any standard algorithm name (as
           used by the EEVVPP__ggeett__cciipphheerrbbyynnaammee(()) function) can also be used
           preceded by a dash, for example --aaeess--112288--ccbbcc. See ooppeennssssll--eenncc(1)
           for a list of ciphers supported by your version of OpenSSL.

           Currently the AES variants with GCM mode are the only supported
           AEAD algorithms.

           If not specified triple DES is used. Only used with --eennccrryypptt and
           --EEnnccrryypptteeddDDaattaa__ccrreeaattee commands.

       --wwrraapp _c_i_p_h_e_r
           Cipher algorithm to use for key wrap when encrypting the message
           using Key Agreement for key transport. The algorithm specified
           should be suitable for key wrap.

       --aaeess112288--wwrraapp, --aaeess119922--wwrraapp, --aaeess225566--wwrraapp, --ddeess33--wwrraapp
           Use AES128, AES192, AES256, or 3DES-EDE, respectively, to wrap key.
           Depending on the OpenSSL build options used, --ddeess33--wwrraapp may not be
           supported.

       --ddeebbuugg__ddeeccrryypptt
           This option sets the CCMMSS__DDEEBBUUGG__DDEECCRRYYPPTT flag. This option should be
           used with caution: see the notes section below.

   SSiiggnniinngg ooppttiioonnss
       --mmdd _d_i_g_e_s_t
           Digest algorithm to use when signing or resigning. If not present
           then the default digest algorithm for the signing key will be used
           (usually SHA1).

       --ssiiggnneerr _f_i_l_e
           A signing certificate.  When signing or resigning a message, this
           option can be used multiple times if more than one signer is
           required.

       --cceerrttffiillee _f_i_l_e
           Allows additional certificates to be specified. When signing these
           will be included with the message. When verifying these will be
           searched for the signers certificates.  The input can be in PEM,
           DER, or PKCS#12 format.

       --ccaaddeess
           When used with --ssiiggnn, add an ESS signingCertificate or ESS
           signingCertificateV2 signed-attribute to the SignerInfo, in order
           to make the signature comply with the requirements for a CAdES
           Basic Electronic Signature (CAdES-BES).

       --nnooddeettaacchh
           When signing a message use opaque signing: this form is more
           resistant to translation by mail relays but it cannot be read by
           mail agents that do not support S/MIME.  Without this option
           cleartext signing with the MIME type multipart/signed is used.

       --nnoocceerrttss
           When signing a message the signer's certificate is normally
           included with this option it is excluded. This will reduce the size
           of the signed message but the verifier must have a copy of the
           signers certificate available locally (passed using the --cceerrttffiillee
           option for example).

       --nnooaattttrr
           Normally when a message is signed a set of attributes are included
           which include the signing time and supported symmetric algorithms.
           With this option they are not included.

       --nnoossmmiimmeeccaapp
           Exclude the list of supported algorithms from signed attributes,
           other options such as signing time and content type are still
           included.

       --rreecceeiipptt__rreeqquueesstt__aallll, --rreecceeiipptt__rreeqquueesstt__ffiirrsstt
           For --ssiiggnn option include a signed receipt request. Indicate
           requests should be provided by all recipient or first tier
           recipients (those mailed directly and not from a mailing list).
           Ignored it --rreecceeiipptt__rreeqquueesstt__ffrroomm is included.

       --rreecceeiipptt__rreeqquueesstt__ffrroomm _e_m_a_i_l_a_d_d_r_e_s_s
           For --ssiiggnn option include a signed receipt request. Add an explicit
           email address where receipts should be supplied.

       --rreecceeiipptt__rreeqquueesstt__ttoo _e_m_a_i_l_a_d_d_r_e_s_s
           Add an explicit email address where signed receipts should be sent
           to. This option mmuusstt but supplied if a signed receipt is requested.

   VVeerriiffiiccaattiioonn ooppttiioonnss
       --ssiiggnneerr _f_i_l_e
           If a message has been verified successfully then the signers
           certificate(s) will be written to this file if the verification was
           successful.

       --ccoonntteenntt _f_i_l_e_n_a_m_e
           This specifies a file containing the detached content for
           operations taking S/MIME input, such as the --vveerriiffyy command. This
           is only usable if the CMS structure is using the detached signature
           form where the content is not included. This option will override
           any content if the input format is S/MIME and it uses the
           multipart/signed MIME content type.

       --nnoo__ccoonntteenntt__vveerriiffyy
           Do not verify signed content signatures.

       --nnoo__aattttrr__vveerriiffyy
           Do not verify signed attribute signatures.

       --nnoossiiggss
           Don't verify message signature.

       --nnoovveerriiffyy
           Do not verify the signers certificate of a signed message.

       --nnooiinntteerrnn
           When verifying a message normally certificates (if any) included in
           the message are searched for the signing certificate. With this
           option only the certificates specified in the --cceerrttffiillee option are
           used.  The supplied certificates can still be used as untrusted CAs
           however.

       --ccaaddeess
           When used with --vveerriiffyy, require and check signer certificate
           digest.  See the NOTES section for more details.

       --vveerriiffyy__rreettccooddee
           Exit nonzero on verification failure.

       --CCAAffiillee _f_i_l_e, --nnoo--CCAAffiillee, --CCAAppaatthh _d_i_r, --nnoo--CCAAppaatthh, --CCAAssttoorree _u_r_i,
       --nnoo--CCAAssttoorree
           See "Trusted Certificate Options" in
           ooppeennssssll--vveerriiffiiccaattiioonn--ooppttiioonnss(1) for details.

   OOuuttppuutt ooppttiioonnss
       --kkeeyyiidd
           Use subject key identifier to identify certificates instead of
           issuer name and serial number. The supplied certificate mmuusstt
           include a subject key identifier extension. Supported by --ssiiggnn and
           --eennccrryypptt options.

       --eeccoonntteenntt__ttyyppee _t_y_p_e
           Set the encapsulated content type to _t_y_p_e if not supplied the DDaattaa
           type is used. The _t_y_p_e argument can be any valid OID name in either
           text or numerical format.

       --tteexxtt
           This option adds plain text (text/plain) MIME headers to the
           supplied message if encrypting or signing. If decrypting or
           verifying it strips off text headers: if the decrypted or verified
           message is not of MIME type text/plain then an error occurs.

       --cceerrttssoouutt _f_i_l_e
           Any certificates contained in the input message are written to
           _f_i_l_e.

       --ttoo, --ffrroomm, --ssuubbjjeecctt
           The relevant email headers. These are included outside the signed
           portion of a message so they may be included manually. If signing
           then many S/MIME mail clients check the signers certificate's email
           address matches that specified in the From: address.

   PPrriinnttiinngg ooppttiioonnss
       --nnoooouutt
           For the --ccmmssoouutt operation do not output the parsed CMS structure.
           This is useful if the syntax of the CMS structure is being checked.

       --pprriinntt
           For the --ccmmssoouutt operation print out all fields of the CMS
           structure.  This implies --nnoooouutt.  This is mainly useful for testing
           purposes.

       --nnaammeeoopptt _o_p_t_i_o_n
           For the --ccmmssoouutt operation when --pprriinntt option is in use, specifies
           printing options for string fields. For most cases uuttff88 is
           reasonable value.  See ooppeennssssll--nnaammeeddiissppllaayy--ooppttiioonnss(1) for details.

       --rreecceeiipptt__rreeqquueesstt__pprriinntt
           For the --vveerriiffyy operation print out the contents of any signed
           receipt requests.

   VVaalliiddaattiioonn ooppttiioonnss
       --aallllooww__pprrooxxyy__cceerrttss, --aattttiimmee, --nnoo__cchheecckk__ttiimmee, --cchheecckk__ssss__ssiigg, --ccrrll__cchheecckk,
       --ccrrll__cchheecckk__aallll, --eexxpplliicciitt__ppoolliiccyy, --eexxtteennddeedd__ccrrll, --iiggnnoorree__ccrriittiiccaall,
       --iinnhhiibbiitt__aannyy, --iinnhhiibbiitt__mmaapp, --nnoo__aalltt__cchhaaiinnss, --ppaarrttiiaall__cchhaaiinn, --ppoolliiccyy,
       --ppoolliiccyy__cchheecckk, --ppoolliiccyy__pprriinntt, --ppuurrppoossee, --ssuuiitteeBB__112288, --ssuuiitteeBB__112288__oonnllyy,
       --ssuuiitteeBB__119922, --ttrruusstteedd__ffiirrsstt, --uussee__ddeellttaass, --aauutthh__lleevveell, --vveerriiffyy__ddeepptthh,
       --vveerriiffyy__eemmaaiill, --vveerriiffyy__hhoossttnnaammee, --vveerriiffyy__iipp, --vveerriiffyy__nnaammee, --xx550099__ssttrriicctt
       --iissssuueerr__cchheecckkss
           Set various options of certificate chain verification.  See
           "Verification Options" in ooppeennssssll--vveerriiffiiccaattiioonn--ooppttiioonnss(1) for
           details.

           Any validation errors cause the command to exit.

NNOOTTEESS
       The MIME message must be sent without any blank lines between the
       headers and the output. Some mail programs will automatically add a
       blank line. Piping the mail directly to sendmail is one way to achieve
       the correct format.

       The supplied message to be signed or encrypted must include the
       necessary MIME headers or many S/MIME clients won't display it properly
       (if at all). You can use the --tteexxtt option to automatically add plain
       text headers.

       A "signed and encrypted" message is one where a signed message is then
       encrypted. This can be produced by encrypting an already signed
       message: see the examples section.

       This version of the program only allows one signer per message but it
       will verify multiple signers on received messages. Some S/MIME clients
       choke if a message contains multiple signers. It is possible to sign
       messages "in parallel" by signing an already signed message.

       The options --eennccrryypptt and --ddeeccrryypptt reflect common usage in S/MIME
       clients. Strictly speaking these process CMS enveloped data: CMS
       encrypted data is used for other purposes.

       The --rreessiiggnn option uses an existing message digest when adding a new
       signer. This means that attributes must be present in at least one
       existing signer using the same message digest or this operation will
       fail.

       The --ssttrreeaamm and --iinnddeeff options enable streaming I/O support.  As a
       result the encoding is BER using indefinite length constructed encoding
       and no longer DER. Streaming is supported for the --eennccrryypptt operation
       and the --ssiiggnn operation if the content is not detached.

       Streaming is always used for the --ssiiggnn operation with detached data but
       since the content is no longer part of the CMS structure the encoding
       remains DER.

       If the --ddeeccrryypptt option is used without a recipient certificate then an
       attempt is made to locate the recipient by trying each potential
       recipient in turn using the supplied private key. To thwart the MMA
       attack (Bleichenbacher's attack on PKCS #1 v1.5 RSA padding) all
       recipients are tried whether they succeed or not and if no recipients
       match the message is "decrypted" using a random key which will
       typically output garbage.  The --ddeebbuugg__ddeeccrryypptt option can be used to
       disable the MMA attack protection and return an error if no recipient
       can be found: this option should be used with caution. For a fuller
       description see CCMMSS__ddeeccrryypptt(3)).

CCAADDEESS BBAASSIICC EELLEECCTTRROONNIICC SSIIGGNNAATTUURREE ((CCAADDEESS--BBEESS))
       A CAdES Basic Electronic Signature (CAdES-BES), as defined in the
       European Standard ETSI EN 319 122-1 V1.1.1, contains:

       •   The signed user data as defined in CMS (RFC 3852);

       •   Content-type of the EncapsulatedContentInfo value being signed;

       •   Message-digest of the eContent OCTET STRING within encapContentInfo
           being signed;

       •   An ESS signingCertificate or ESS signingCertificateV2 attribute, as
           defined in Enhanced Security Services (ESS), RFC 2634 and RFC 5035.
           An ESS signingCertificate attribute only allows for SHA-1 as digest
           algorithm.  An ESS signingCertificateV2 attribute allows for any
           digest algorithm.

       •   The digital signature value computed on the user data and, when
           present, on the signed attributes.

           NOTE that the --ccaaddeess option applies to the --ssiiggnn or --vveerriiffyy
           operations.  With this option, the --vveerriiffyy operation also requires
           that the signingCertificate attribute is present and checks that
           the given identifiers match the verification trust chain built
           during the verification process.

EEXXIITT CCOODDEESS
       0   The operation was completely successfully.

       1   An error occurred parsing the command options.

       2   One of the input files could not be read.

       3   An error occurred creating the CMS file or when reading the MIME
           message.

       4   An error occurred decrypting or verifying the message.

       5   The message was verified correctly but an error occurred writing
           out the signers certificates.

CCOOMMPPAATTIIBBIILLIITTYY WWIITTHH PPKKCCSS##77 FFOORRMMAATT
       ooppeennssssll--ssmmiimmee(1) can only process the older PPKKCCSS##77 format.  ooppeennssssll ccmmss
       supports Cryptographic Message Syntax format.  Use of some features
       will result in messages which cannot be processed by applications which
       only support the older format. These are detailed below.

       The use of the --kkeeyyiidd option with --ssiiggnn or --eennccrryypptt.

       The --oouuttffoorrmm _P_E_M option uses different headers.

       The --ccoommpprreessss option.

       The --sseeccrreettkkeeyy option when used with --eennccrryypptt.

       The use of PSS with --ssiiggnn.

       The use of OAEP or non-RSA keys with --eennccrryypptt.

       Additionally the --EEnnccrryypptteeddDDaattaa__ccrreeaattee and --ddaattaa__ccrreeaattee type cannot be
       processed by the older ooppeennssssll--ssmmiimmee(1) command.

EEXXAAMMPPLLEESS
       Create a cleartext signed message:

        openssl cms -sign -in message.txt -text -out mail.msg \
               -signer mycert.pem

       Create an opaque signed message

        openssl cms -sign -in message.txt -text -out mail.msg -nodetach \
               -signer mycert.pem

       Create a signed message, include some additional certificates and read
       the private key from another file:

        openssl cms -sign -in in.txt -text -out mail.msg \
               -signer mycert.pem -inkey mykey.pem -certfile mycerts.pem

       Create a signed message with two signers, use key identifier:

        openssl cms -sign -in message.txt -text -out mail.msg \
               -signer mycert.pem -signer othercert.pem -keyid

       Send a signed message under Unix directly to sendmail, including
       headers:

        openssl cms -sign -in in.txt -text -signer mycert.pem \
               -from steve@openssl.org -to someone@somewhere \
               -subject "Signed message" | sendmail someone@somewhere

       Verify a message and extract the signer's certificate if successful:

        openssl cms -verify -in mail.msg -signer user.pem -out signedtext.txt

       Send encrypted mail using triple DES:

        openssl cms -encrypt -in in.txt -from steve@openssl.org \
               -to someone@somewhere -subject "Encrypted message" \
               -des3 user.pem -out mail.msg

       Sign and encrypt mail:

        openssl cms -sign -in ml.txt -signer my.pem -text \
               | openssl cms -encrypt -out mail.msg \
               -from steve@openssl.org -to someone@somewhere \
               -subject "Signed and Encrypted message" -des3 user.pem

       Note: the encryption command does not include the --tteexxtt option because
       the message being encrypted already has MIME headers.

       Decrypt a message:

        openssl cms -decrypt -in mail.msg -recip mycert.pem -inkey key.pem

       The output from Netscape form signing is a PKCS#7 structure with the
       detached signature format. You can use this program to verify the
       signature by line wrapping the base64 encoded structure and surrounding
       it with:

        -----BEGIN PKCS7-----
        -----END PKCS7-----

       and using the command,

        openssl cms -verify -inform PEM -in signature.pem -content content.txt

       alternatively you can base64 decode the signature and use

        openssl cms -verify -inform DER -in signature.der -content content.txt

       Create an encrypted message using 128 bit Camellia:

        openssl cms -encrypt -in plain.txt -camellia128 -out mail.msg cert.pem

       Add a signer to an existing message:

        openssl cms -resign -in mail.msg -signer newsign.pem -out mail2.msg

       Sign a message using RSA-PSS:

        openssl cms -sign -in message.txt -text -out mail.msg \
               -signer mycert.pem -keyopt rsa_padding_mode:pss

       Create an encrypted message using RSA-OAEP:

        openssl cms -encrypt -in plain.txt -out mail.msg \
               -recip cert.pem -keyopt rsa_padding_mode:oaep

       Use SHA256 KDF with an ECDH certificate:

        openssl cms -encrypt -in plain.txt -out mail.msg \
               -recip ecdhcert.pem -keyopt ecdh_kdf_md:sha256

       Print CMS signed binary data in human-readable form:

       openssl cms -in signed.cms -binary -inform DER -cmsout -print

BBUUGGSS
       The MIME parser isn't very clever: it seems to handle most messages
       that I've thrown at it but it may choke on others.

       The code currently will only write out the signer's certificate to a
       file: if the signer has a separate encryption certificate this must be
       manually extracted. There should be some heuristic that determines the
       correct encryption certificate.

       Ideally a database should be maintained of a certificates for each
       email address.

       The code doesn't currently take note of the permitted symmetric
       encryption algorithms as supplied in the SMIMECapabilities signed
       attribute. this means the user has to manually include the correct
       encryption algorithm. It should store the list of permitted ciphers in
       a database and only use those.

       No revocation checking is done on the signer's certificate.

SSEEEE AALLSSOO
       oossssll__ssttoorree--ffiillee(7)

HHIISSTTOORRYY
       The use of multiple --ssiiggnneerr options and the --rreessiiggnn command were first
       added in OpenSSL 1.0.0.

       The --kkeeyyoopptt option was added in OpenSSL 1.0.2.

       Support for RSA-OAEP and RSA-PSS was added in OpenSSL 1.0.2.

       The use of non-RSA keys with --eennccrryypptt and --ddeeccrryypptt was added in OpenSSL
       1.0.2.

       The -no_alt_chains option was added in OpenSSL 1.0.2b.

       The --nnaammeeoopptt option was added in OpenSSL 3.0.0.

       The --eennggiinnee option was deprecated in OpenSSL 3.0.

CCOOPPYYRRIIGGHHTT
       Copyright 2008-2021 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the Apache License 2.0 (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.



3.0.1                             2022-01-31                OPENSSL-CMS(1ossl)
