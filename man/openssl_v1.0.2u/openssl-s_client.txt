S_CLIENT(1)                         OpenSSL                        S_CLIENT(1)



NAME
       openssl-s_client, s_client - SSL/TLS client program

SYNOPSIS
       openssl s_client [-connect host:port] [-servername name] [-verify
       depth] [-verify_return_error] [-cert filename] [-certform DER|PEM]
       [-key filename] [-keyform DER|PEM] [-pass arg] [-CApath directory]
       [-CAfile filename] [-no_alt_chains] [-reconnect] [-pause] [-showcerts]
       [-debug] [-msg] [-nbio_test] [-state] [-nbio] [-crlf] [-ign_eof]
       [-no_ign_eof] [-quiet] [-ssl2] [-ssl3] [-tls1] [-no_ssl2] [-no_ssl3]
       [-no_tls1] [-no_tls1_1] [-no_tls1_2] [-fallback_scsv] [-bugs] [-sigalgs
       sigalglist] [-curves curvelist] [-cipher cipherlist] [-serverpref]
       [-starttls protocol] [-engine id] [-tlsextdebug] [-no_ticket]
       [-sess_out filename] [-sess_in filename] [-rand file(s)] [-serverinfo
       types] [-status] [-alpn protocols] [-nextprotoneg protocols]

DESCRIPTION
       The s_client command implements a generic SSL/TLS client which connects
       to a remote host using SSL/TLS. It is a very useful diagnostic tool for
       SSL servers.

OPTIONS
       -connect host:port
           This specifies the host and optional port to connect to. If not
           specified then an attempt is made to connect to the local host on
           port 4433.

       -servername name
           Set the TLS SNI (Server Name Indication) extension in the
           ClientHello message.

       -cert certname
           The certificate to use, if one is requested by the server. The
           default is not to use a certificate.

       -certform format
           The certificate format to use: DER or PEM. PEM is the default.

       -key keyfile
           The private key to use. If not specified then the certificate file
           will be used.

       -keyform format
           The private format to use: DER or PEM. PEM is the default.

       -pass arg
           the private key password source. For more information about the
           format of arg see the PASS PHRASE ARGUMENTS section in openssl(1).

       -verify depth
           The verify depth to use. This specifies the maximum length of the
           server certificate chain and turns on server certificate
           verification.  Currently the verify operation continues after
           errors so all the problems with a certificate chain can be seen. As
           a side effect the connection will never fail due to a server
           certificate verify failure.

       -verify_return_error
           Return verification errors instead of continuing. This will
           typically abort the handshake with a fatal error.

       -CApath directory
           The directory to use for server certificate verification. This
           directory must be in "hash format", see verify for more
           information. These are also used when building the client
           certificate chain.

       -CAfile file
           A file containing trusted certificates to use during server
           authentication and to use when attempting to build the client
           certificate chain.

       -purpose, -ignore_critical, -issuer_checks, -crl_check, -crl_check_all,
       -policy_check, -extended_crl, -x509_strict, -policy -check_ss_sig
       -no_alt_chains
           Set various certificate chain valiadition option. See the verify
           manual page for details.

       -reconnect
           reconnects to the same server 5 times using the same session ID,
           this can be used as a test that session caching is working.

       -pause
           pauses 1 second between each read and write call.

       -showcerts
           Displays the server certificate list as sent by the server: it only
           consists of certificates the server has sent (in the order the
           server has sent them). It is not a verified chain.

       -prexit
           print session information when the program exits. This will always
           attempt to print out information even if the connection fails.
           Normally information will only be printed out once if the
           connection succeeds. This option is useful because the cipher in
           use may be renegotiated or the connection may fail because a client
           certificate is required or is requested only after an attempt is
           made to access a certain URL. Note: the output produced by this
           option is not always accurate because a connection might never have
           been established.

       -state
           prints out the SSL session states.

       -debug
           print extensive debugging information including a hex dump of all
           traffic.

       -msg
           show all protocol messages with hex dump.

       -nbio_test
           tests non-blocking I/O

       -nbio
           turns on non-blocking I/O

       -crlf
           this option translated a line feed from the terminal into CR+LF as
           required by some servers.

       -ign_eof
           inhibit shutting down the connection when end of file is reached in
           the input.

       -quiet
           inhibit printing of session and certificate information.  This
           implicitly turns on -ign_eof as well.

       -no_ign_eof
           shut down the connection when end of file is reached in the input.
           Can be used to override the implicit -ign_eof after -quiet.

       -psk_identity identity
           Use the PSK identity identity when using a PSK cipher suite.  The
           default value is "Client_identity" (without the quotes).

       -psk key
           Use the PSK key key when using a PSK cipher suite. The key is given
           as a hexadecimal number without leading 0x, for example -psk
           1a2b3c4d.  This option must be provided in order to use a PSK
           cipher.

       -ssl2, -ssl3, -tls1, -tls1_1, -tls1_2, -no_ssl2, -no_ssl3, -no_tls1,
       -no_tls1_1, -no_tls1_2
           These options require or disable the use of the specified SSL or
           TLS protocols.  By default the initial handshake uses a version-
           flexible method which will negotiate the highest mutually supported
           protocol version.

       -fallback_scsv
           Send TLS_FALLBACK_SCSV in the ClientHello.

       -bugs
           there are several known bug in SSL and TLS implementations. Adding
           this option enables various workarounds.

       -sigalgs sigalglist
           Specifies the list of signature algorithms that are sent by the
           client.  The server selects one entry in the list based on its
           preferences.  For example strings, see SSL_CTX_set1_sigalgs(3)

       -curves curvelist
           Specifies the list of supported curves to be sent by the client.
           The curve is is ultimately selected by the server. For a list of
           all curves, use:

               $ openssl ecparam -list_curves

       -cipher cipherlist
           this allows the cipher list sent by the client to be modified.
           Although the server determines which cipher suite is used it should
           take the first supported cipher in the list sent by the client. See
           the ciphers command for more information.

       -serverpref
           use the server's cipher preferences; only used for SSLV2.

       -starttls protocol
           send the protocol-specific message(s) to switch to TLS for
           communication.  protocol is a keyword for the intended protocol.
           Currently, the only supported keywords are "smtp", "pop3", "imap",
           "ftp" and "xmpp".

       -tlsextdebug
           print out a hex dump of any TLS extensions received from the
           server.

       -no_ticket
           disable RFC4507bis session ticket support.

       -sess_out filename
           output SSL session to filename

       -sess_in sess.pem
           load SSL session from filename. The client will attempt to resume a
           connection from this session.

       -engine id
           specifying an engine (by its unique id string) will cause s_client
           to attempt to obtain a functional reference to the specified
           engine, thus initialising it if needed. The engine will then be set
           as the default for all available algorithms.

       -rand file(s)
           a file or files containing random data used to seed the random
           number generator, or an EGD socket (see RAND_egd(3)).  Multiple
           files can be specified separated by a OS-dependent character.  The
           separator is ; for MS-Windows, , for OpenVMS, and : for all others.

       -serverinfo types
           a list of comma-separated TLS Extension Types (numbers between 0
           and 65535).  Each type will be sent as an empty ClientHello TLS
           Extension.  The server's response (if any) will be encoded and
           displayed as a PEM file.

       -status
           sends a certificate status request to the server (OCSP stapling).
           The server response (if any) is printed out.

       -alpn protocols, -nextprotoneg protocols
           these flags enable the Enable the Application-Layer Protocol
           Negotiation or Next Protocol Negotiation extension, respectively.
           ALPN is the IETF standard and replaces NPN.  The protocols list is
           a comma-separated protocol names that the client should advertise
           support for. The list should contain most wanted protocols first.
           Protocol names are printable ASCII strings, for example "http/1.1"
           or "spdy/3".  Empty list of protocols is treated specially and will
           cause the client to advertise support for the TLS extension but
           disconnect just after reciving ServerHello with a list of server
           supported protocols.

CONNECTED COMMANDS
       If a connection is established with an SSL server then any data
       received from the server is displayed and any key presses will be sent
       to the server. When used interactively (which means neither -quiet nor
       -ign_eof have been given), the session will be renegotiated if the line
       begins with an R, and if the line begins with a Q or if end of file is
       reached, the connection will be closed down.

NOTES
       s_client can be used to debug SSL servers. To connect to an SSL HTTP
       server the command:

        openssl s_client -connect servername:443

       would typically be used (https uses port 443). If the connection
       succeeds then an HTTP command can be given such as "GET /" to retrieve
       a web page.

       If the handshake fails then there are several possible causes, if it is
       nothing obvious like no client certificate then the -bugs, -ssl2,
       -ssl3, -tls1, -no_ssl2, -no_ssl3, -no_tls1 options can be tried in case
       it is a buggy server. In particular you should play with these options
       before submitting a bug report to an OpenSSL mailing list.

       A frequent problem when attempting to get client certificates working
       is that a web client complains it has no certificates or gives an empty
       list to choose from. This is normally because the server is not sending
       the clients certificate authority in its "acceptable CA list" when it
       requests a certificate. By using s_client the CA list can be viewed and
       checked. However some servers only request client authentication after
       a specific URL is requested. To obtain the list in this case it is
       necessary to use the -prexit option and send an HTTP request for an
       appropriate page.

       If a certificate is specified on the command line using the -cert
       option it will not be used unless the server specifically requests a
       client certificate. Therefor merely including a client certificate on
       the command line is no guarantee that the certificate works.

       If there are problems verifying a server certificate then the
       -showcerts option can be used to show all the certificates sent by the
       server.

       Since the SSLv23 client hello cannot include compression methods or
       extensions these will only be supported if its use is disabled, for
       example by using the -no_sslv2 option.

       The s_client utility is a test tool and is designed to continue the
       handshake after any certificate verification errors. As a result it
       will accept any certificate chain (trusted or not) sent by the peer.
       None test applications should not do this as it makes them vulnerable
       to a MITM attack. This behaviour can be changed by with the
       -verify_return_error option: any verify errors are then returned
       aborting the handshake.

BUGS
       Because this program has a lot of options and also because some of the
       techniques used are rather old, the C source of s_client is rather hard
       to read and not a model of how things should be done. A typical SSL
       client program would be much simpler.

       The -prexit option is a bit of a hack. We should really report
       information whenever a session is renegotiated.

SEE ALSO
       sess_id(1), s_server(1), ciphers(1)

HISTORY
       The -no_alt_chains options was first added to OpenSSL 1.0.2b.



1.0.2u                            2019-12-20                       S_CLIENT(1)
