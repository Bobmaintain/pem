{"version":3,"sources":["../webpack:/pem/node_modules/isexe/index.js","../webpack:/pem/node_modules/isexe/mode.js","../webpack:/pem/node_modules/isexe/windows.js","../webpack:/pem/node_modules/os-tmpdir/index.js","../webpack:/pem/node_modules/which/which.js","../webpack:/pem/src/ca.ts","../webpack:/pem/src/convert.ts","../webpack:/pem/src/debug.ts","../webpack:/pem/src/helper.ts","../webpack:/pem/src/openssl.ts","../webpack:/pem/external node-commonjs \"child_process\"","../webpack:/pem/external node-commonjs \"crypto\"","../webpack:/pem/external node-commonjs \"fs\"","../webpack:/pem/external node-commonjs \"path\"","../webpack:/pem/webpack/bootstrap","../webpack:/pem/webpack/runtime/compat","../webpack:/pem/src/pem.ts"],"names":["fs","__webpack_require__","core","process","platform","global","TESTING_WINDOWS","module","exports","isexe","sync","path","options","cb","Promise","TypeError","resolve","reject","er","is","code","ignoreErrors","stat","checkStat","statSync","isFile","checkMode","mod","mode","uid","gid","myUid","undefined","getuid","myGid","getgid","u","parseInt","g","o","ug","ret","checkPathExt","pathext","pathExt","env","PATHEXT","split","indexOf","i","length","p","toLowerCase","substr","isSymbolicLink","isWindows","trailingSlashRe","TEMP","TMP","SystemRoot","windir","TMPDIR","test","slice","OSTYPE","COLON","getNotFoundError","cmd","Object","assign","Error","getPathInfo","opt","colon","pathEnv","match","cwd","PATH","pathExtExe","unshift","which","found","step","all","ppRaw","pathPart","pCmd","join","subStep","ii","ext","push","then","res","whichSync","j","cur","ex","nothrow","name","debug","title","content","CI","console","info","JSON","stringify","pathlib","crypto","osTmpdir","tempDir","PEMJS_TMPDIR","isNumber","str","Array","isArray","isHex","hex","toHex","charCodeAt","toString","ciphers","createPasswordFile","params","PasswordFileArray","prototype","hasOwnProperty","call","passType","PasswordFile","randomBytes","password","trim","mustPass","cipher","writeFileSync","deleteTempFiles","files","callback","rmFiles","deleteSeries","list","finalCallback","file","shift","myCallback","err","log","constructor","isError","unlink","error","helper","__importStar","debug_1","child_process_1","path_1","__importDefault","fs_1","os_tmpdir_1","crypto_1","which_1","settings","default","versionRegEx","RegExp","LIBRARY","VERSION","filePathOpenSSL","existsSync","OPENSSL_BIN","set","option","value","get","exec","searchStr","tmpfiles","spawnWrapper","stdout","stderr","start","end","starttest","endtest","index","substring","execBinary","spawn","binary","pathBin","testOpenSSLPath","openssl","Buffer","alloc","on","data","concat","needed","finished","done","delTempPWFiles","fpath","contents","fsErr","text","String","version","toUpperCase","require","__webpack_module_cache__","moduleId","cachedModule","threw","__webpack_modules__","ab","__dirname","convert_1","ca_1","helper_1","openssl_1","run"],"mappings":"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","file":"index.js","sourcesContent":["var fs = require('fs')\nvar core\nif (process.platform === 'win32' || global.TESTING_WINDOWS) {\n  core = require('./windows.js')\n} else {\n  core = require('./mode.js')\n}\n\nmodule.exports = isexe\nisexe.sync = sync\n\nfunction isexe (path, options, cb) {\n  if (typeof options === 'function') {\n    cb = options\n    options = {}\n  }\n\n  if (!cb) {\n    if (typeof Promise !== 'function') {\n      throw new TypeError('callback not provided')\n    }\n\n    return new Promise(function (resolve, reject) {\n      isexe(path, options || {}, function (er, is) {\n        if (er) {\n          reject(er)\n        } else {\n          resolve(is)\n        }\n      })\n    })\n  }\n\n  core(path, options || {}, function (er, is) {\n    // ignore EACCES because that just means we aren't allowed to run it\n    if (er) {\n      if (er.code === 'EACCES' || options && options.ignoreErrors) {\n        er = null\n        is = false\n      }\n    }\n    cb(er, is)\n  })\n}\n\nfunction sync (path, options) {\n  // my kingdom for a filtered catch\n  try {\n    return core.sync(path, options || {})\n  } catch (er) {\n    if (options && options.ignoreErrors || er.code === 'EACCES') {\n      return false\n    } else {\n      throw er\n    }\n  }\n}\n","module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), options)\n}\n\nfunction checkStat (stat, options) {\n  return stat.isFile() && checkMode(stat, options)\n}\n\nfunction checkMode (stat, options) {\n  var mod = stat.mode\n  var uid = stat.uid\n  var gid = stat.gid\n\n  var myUid = options.uid !== undefined ?\n    options.uid : process.getuid && process.getuid()\n  var myGid = options.gid !== undefined ?\n    options.gid : process.getgid && process.getgid()\n\n  var u = parseInt('100', 8)\n  var g = parseInt('010', 8)\n  var o = parseInt('001', 8)\n  var ug = u | g\n\n  var ret = (mod & o) ||\n    (mod & g) && gid === myGid ||\n    (mod & u) && uid === myUid ||\n    (mod & ug) && myUid === 0\n\n  return ret\n}\n","module.exports = isexe\nisexe.sync = sync\n\nvar fs = require('fs')\n\nfunction checkPathExt (path, options) {\n  var pathext = options.pathExt !== undefined ?\n    options.pathExt : process.env.PATHEXT\n\n  if (!pathext) {\n    return true\n  }\n\n  pathext = pathext.split(';')\n  if (pathext.indexOf('') !== -1) {\n    return true\n  }\n  for (var i = 0; i < pathext.length; i++) {\n    var p = pathext[i].toLowerCase()\n    if (p && path.substr(-p.length).toLowerCase() === p) {\n      return true\n    }\n  }\n  return false\n}\n\nfunction checkStat (stat, path, options) {\n  if (!stat.isSymbolicLink() && !stat.isFile()) {\n    return false\n  }\n  return checkPathExt(path, options)\n}\n\nfunction isexe (path, options, cb) {\n  fs.stat(path, function (er, stat) {\n    cb(er, er ? false : checkStat(stat, path, options))\n  })\n}\n\nfunction sync (path, options) {\n  return checkStat(fs.statSync(path), path, options)\n}\n","'use strict';\nvar isWindows = process.platform === 'win32';\nvar trailingSlashRe = isWindows ? /[^:]\\\\$/ : /.\\/$/;\n\n// https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43\nmodule.exports = function () {\n\tvar path;\n\n\tif (isWindows) {\n\t\tpath = process.env.TEMP ||\n\t\t\tprocess.env.TMP ||\n\t\t\t(process.env.SystemRoot || process.env.windir) + '\\\\temp';\n\t} else {\n\t\tpath = process.env.TMPDIR ||\n\t\t\tprocess.env.TMP ||\n\t\t\tprocess.env.TEMP ||\n\t\t\t'/tmp';\n\t}\n\n\tif (trailingSlashRe.test(path)) {\n\t\tpath = path.slice(0, -1);\n\t}\n\n\treturn path;\n};\n","const isWindows = process.platform === 'win32' ||\n    process.env.OSTYPE === 'cygwin' ||\n    process.env.OSTYPE === 'msys'\n\nconst path = require('path')\nconst COLON = isWindows ? ';' : ':'\nconst isexe = require('isexe')\n\nconst getNotFoundError = (cmd) =>\n  Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' })\n\nconst getPathInfo = (cmd, opt) => {\n  const colon = opt.colon || COLON\n\n  // If it has a slash, then we don't bother searching the pathenv.\n  // just check the file itself, and that's it.\n  const pathEnv = cmd.match(/\\//) || isWindows && cmd.match(/\\\\/) ? ['']\n    : (\n      [\n        // windows always checks the cwd first\n        ...(isWindows ? [process.cwd()] : []),\n        ...(opt.path || process.env.PATH ||\n          /* istanbul ignore next: very unusual */ '').split(colon),\n      ]\n    )\n  const pathExtExe = isWindows\n    ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'\n    : ''\n  const pathExt = isWindows ? pathExtExe.split(colon) : ['']\n\n  if (isWindows) {\n    if (cmd.indexOf('.') !== -1 && pathExt[0] !== '')\n      pathExt.unshift('')\n  }\n\n  return {\n    pathEnv,\n    pathExt,\n    pathExtExe,\n  }\n}\n\nconst which = (cmd, opt, cb) => {\n  if (typeof opt === 'function') {\n    cb = opt\n    opt = {}\n  }\n  if (!opt)\n    opt = {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  const step = i => new Promise((resolve, reject) => {\n    if (i === pathEnv.length)\n      return opt.all && found.length ? resolve(found)\n        : reject(getNotFoundError(cmd))\n\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    resolve(subStep(p, i, 0))\n  })\n\n  const subStep = (p, i, ii) => new Promise((resolve, reject) => {\n    if (ii === pathExt.length)\n      return resolve(step(i + 1))\n    const ext = pathExt[ii]\n    isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {\n      if (!er && is) {\n        if (opt.all)\n          found.push(p + ext)\n        else\n          return resolve(p + ext)\n      }\n      return resolve(subStep(p, i, ii + 1))\n    })\n  })\n\n  return cb ? step(0).then(res => cb(null, res), cb) : step(0)\n}\n\nconst whichSync = (cmd, opt) => {\n  opt = opt || {}\n\n  const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt)\n  const found = []\n\n  for (let i = 0; i < pathEnv.length; i ++) {\n    const ppRaw = pathEnv[i]\n    const pathPart = /^\".*\"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw\n\n    const pCmd = path.join(pathPart, cmd)\n    const p = !pathPart && /^\\.[\\\\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd\n      : pCmd\n\n    for (let j = 0; j < pathExt.length; j ++) {\n      const cur = p + pathExt[j]\n      try {\n        const is = isexe.sync(cur, { pathExt: pathExtExe })\n        if (is) {\n          if (opt.all)\n            found.push(cur)\n          else\n            return cur\n        }\n      } catch (ex) {}\n    }\n  }\n\n  if (opt.all && found.length)\n    return found\n\n  if (opt.nothrow)\n    return null\n\n  throw getNotFoundError(cmd)\n}\n\nmodule.exports = which\nwhich.sync = whichSync\n","export const name: string = \"ca\"\n","export const name: string = \"convert\"\n","export const name: string = \"debug\"\nexport function debug(title: string, content: any) {\n    if (process.env.CI === 'true') {\n        console.info(`::group::${title}`)\n        console.debug(JSON.stringify(content, null, 3));\n        console.info('::endgroup::')\n    }\n}\n","export const name: string = \"helper\"\n\nvar pathlib = require('path')\nvar fs = require('fs')\nvar crypto = require('crypto')\nvar osTmpdir = require('os-tmpdir')\nvar tempDir = process.env.PEMJS_TMPDIR || osTmpdir()\n\n/**\n * pem helper module\n *\n * @module helper\n */\n\n/**\n * helper function to check is the string a number or not\n * @param {String} str String that should be checked to be a number\n */\nexport function isNumber (str:any) {\n    if (Array.isArray(str)) {\n        return false\n    }\n    /*\n    var bstr = str && str.toString()\n    str = str + ''\n  \n    return bstr - parseFloat(bstr) + 1 >= 0 &&\n            !/^\\s+|\\s+$/g.test(str) && /^\\d+$/g.test(str) &&\n            !isNaN(str) && !isNaN(parseFloat(str))\n    */\n    return /^\\d+$/g.test(str)\n}\n\n/**\n * helper function to check is the string a hexaceximal value\n * @param {String} hex String that should be checked to be a hexaceximal\n */\nexport function isHex (hex:string) {\n    return /^(0x)?([0-9A-F]{1,40}|[0-9A-F]{1,40})$/gi.test(hex)\n}\n\n/**\n * helper function to convert a string to a hexaceximal value\n * @param {String} str String that should be converted to a hexaceximal\n */\nexport function toHex (str:string) {\n    var hex = ''\n    for (var i = 0; i < str.length; i++) {\n        hex += '' + str.charCodeAt(i).toString(16)\n    }\n    return hex\n}\n\n// cipherPassword returns an array of supported ciphers.\n/**\n * list of supported ciphers\n * @type {Array}\n */\nexport const ciphers = ['aes128', 'aes192', 'aes256', 'camellia128', 'camellia192', 'camellia256', 'des', 'des3', 'idea']\n\n/**\n * Creates a PasswordFile to hide the password form process infos via `ps auxf` etc.\n * @param {Object} options object of cipher, password and passType, mustPass, {cipher:'aes128', password:'xxxx', passType:\"in/out/word\"}, if the object empty we do nothing\n * @param {String} options.cipher cipher like 'aes128', 'aes192', 'aes256', 'camellia128', 'camellia192', 'camellia256', 'des', 'des3', 'idea'\n * @param {String} options.password password can be empty or at last 4 to 1023 chars\n * @param {String} options.passType passType: can be in/out/word for passIN/passOUT/passWORD\n * @param {Boolean} options.mustPass mustPass is used when you need to set the pass like as \"-password pass:\" most needed when empty password\n * @param {Array<string>} params params will be extended with the data that need for the openssl command. IS USED AS POINTER!\n * @param {Array<string>} PasswordFileArray PasswordFileArray is an array of filePaths that later need to deleted ,after the openssl command. IS USED AS POINTER!\n * @return {Boolean} result\n */\nexport function createPasswordFile(options:{\n    cipher: string,\n    password: string,\n    passType: string,\n    mustPass: boolean,\n}, params:string[], PasswordFileArray:string[]):boolean {\n    if (!options || !Object.prototype.hasOwnProperty.call(options, 'password') || !Object.prototype.hasOwnProperty.call(options, 'passType') || !/^(word|in|out)$/.test(options.passType)) {\n        return false\n    }\n    var PasswordFile = pathlib.join(tempDir, crypto.randomBytes(20).toString('hex'))\n    PasswordFileArray.push(PasswordFile)\n    options.password = options.password.trim()\n    if (options.password === '') {\n        options.mustPass = true\n    }\n    if (options.cipher && (ciphers.indexOf(options.cipher) !== -1)) {\n        params.push('-' + options.cipher)\n    }\n    params.push('-pass' + options.passType)\n    if (options.mustPass) {\n        params.push('pass:' + options.password)\n    } else {\n        fs.writeFileSync(PasswordFile, options.password)\n        params.push('file:' + PasswordFile)\n    }\n    return true\n}\n\n/**\n * Deletes a file or an array of files\n * @param {Array} files array of files that shoudld be deleted\n * @param {errorCallback} callback Callback function with an error object\n */\nexport function deleteTempFiles(files: string[], callback:Function) {\n    var rmFiles: string[] = []\n    if (typeof files === 'string') {\n        rmFiles.push(files)\n    } else if (Array.isArray(files)) {\n        rmFiles = files\n    } else {\n        return callback(new Error('Unexcepted files parameter type; only string or array supported'))\n    }\n    var deleteSeries = function (list:string[], finalCallback:Function):void {\n        if (list.length) {\n            var file = list.shift()\n            var myCallback = function (err:Error) {\n                console.log(err.constructor.name);\n                if (isError(err) && err.code === 'ENOENT') {\n                    // file doens't exist\n                    return deleteSeries(list, finalCallback)\n                } else if (err) {\n                    // other errors, e.g. maybe we don't have enough permission\n                    return finalCallback(err)\n                } else {\n                    return deleteSeries(list, finalCallback)\n                }\n            }\n            if (file && typeof file === 'string') {\n                fs.unlink(file, myCallback)\n            } else {\n                return deleteSeries(list, finalCallback)\n            }\n        } else {\n            return finalCallback(null) // no errors\n        }\n    }\n    deleteSeries(rmFiles, callback)\n}\n\n/**\n * @param error the error object.\n * @returns if given error object is a NodeJS error.\n */\nexport function isError(error: Error): error is NodeJS.ErrnoException {\n    return error instanceof Error;\n}\n\n/**\n * Callback for return an error object.\n * @callback errorCallback\n * @param {Error} err - An Error Object or null\n */\n","export const name: string = \"openssl\"\nimport * as helper from './helper'\nimport {CallbackErrCodeStdoutSdrerr, CallbackErrStdout, CallbackErr} from './interfaces'\nimport type {Code, ErrNull, StdOutErr } from './types'\nimport {debug} from './debug'\nimport {spawn as cpspawn} from 'child_process'\nimport pathlib from 'path'\nimport fs from 'fs'\nimport osTmpdir from 'os-tmpdir'\nimport crypto from 'crypto'\nimport which from 'which'\n\nconst settings: any = {}\nconst tempDir = process.env.PEMJS_TMPDIR || osTmpdir()\n\nconst versionRegEx = new RegExp('^(OpenSSL|LibreSSL) (((\\\\d+).(\\\\d+)).(\\\\d+))([a-z]+)?')\n\nif (\"CI\" in process.env && process.env.CI === 'true') {\n    if (\"LIBRARY\" in process.env && \"VERSION\" in process.env && process.env.LIBRARY != \"\" && process.env.VERSION != \"\") {\n        const filePathOpenSSL = `./openssl/${process.env.LIBRARY}_v${process.env.VERSION}/bin/openssl`\n        if (fs.existsSync(filePathOpenSSL)) {\n            process.env.OPENSSL_BIN = filePathOpenSSL\n        }\n    }\n}\n\n/**\n * pem openssl module\n *\n * @module openssl\n */\n\n/**\n * configue this openssl module\n *\n * @static\n * @param {String} option name e.g. pathOpenSSL, openSslVersion; TODO rethink nomenclature\n * @param {*} value value\n */\nexport function set(option: string, value: any) {\n    settings[option] = value\n}\n\n/**\n * get configuration setting value\n *\n * @static\n * @param {String} option name\n */\nexport function get(option: string) {\n    return settings[option] || undefined\n}\n\n/**\n * Spawn an openssl command\n *\n * @static\n * @param {CallbackErrStdout} callback Called with (error, stdout-substring)\n * @param {Array<string>} params Array of openssl command line parameters\n * @param {String} searchStr String to use to find data\n * @param {Array<string>} [tmpfiles] list of temporary files\n */\nexport function exec(callback: CallbackErrStdout, params: string[], searchStr: string): void;\nexport function exec(callback: CallbackErrStdout, params: string[], searchStr: string, tmpfiles?: string[]): void {\n\n    spawnWrapper(function (err: ErrNull, code?: Code, stdout?: StdOutErr, stderr?: StdOutErr): void {\n        if (err) {\n            return callback(err)\n        }\n\n        let start, end: number\n        let starttest, endtest: (RegExpMatchArray | null)\n\n\n        if ((starttest = (stdout! as string).match(new RegExp('-+BEGIN ' + searchStr + '-+$', 'mu'))) && starttest.index !== undefined) {\n            start = starttest.index\n        } else {\n            start = -1\n        }\n\n        // To get the full EC key with parameters and private key\n        if (searchStr === 'EC PARAMETERS') {\n            searchStr = 'EC PRIVATE KEY'\n        }\n\n        if ((endtest = (stdout! as string).match(new RegExp('^\\\\-+END ' + searchStr + '\\\\-+', 'm'))) && endtest.index !== undefined) {\n            end = endtest.index + endtest[0].length\n        } else {\n            end = -1\n        }\n\n        if (start >= 0 && end >= 0) {\n            return callback(null, (stdout! as string).substring(start, end))\n        } else {\n            return callback(new Error(searchStr + ' not found from openssl output:\\n---stdout---\\n' + stdout + '\\n---stderr---\\n' + stderr + '\\ncode: ' + code))\n        }\n    }, params, tmpfiles, false)\n}\n\n/**\n *  Spawn an openssl command and get binary output\n *\n * @static\n * @param {CallbackErrStdout} callback Called with (error, stdout)\n * @param {Array<string>} params Array of openssl command line parameters\n * @param {Array<string>} [tmpfiles] list of temporary files\n */\nexport function execBinary(callback: CallbackErrStdout, params: string[]): void\nexport function execBinary(callback: CallbackErrStdout, params: string[], tmpfiles?: string[]): void {\n    spawnWrapper(function (err: ErrNull, code?: Code, stdout?: StdOutErr, stderr?: StdOutErr) {\n        debug(\"execBinary\", {err, code, stdout, stderr})\n        if (err) {\n            return callback(err)\n        }\n        return callback(null, stdout)\n    }, params, tmpfiles, true)\n}\n\n/**\n * Generically spawn openSSL, without processing the result\n *\n * @static\n * @param {CallbackErrCodeStdoutSdrerr}     callback Called with (error, exitCode, stdout, stderr)\n * @param {Array<string>}        params   The parameters to pass to openssl\n * @param {Boolean}      binary   Output of openssl is binary or text\n */\nexport function spawn(callback: CallbackErrCodeStdoutSdrerr, params: string[], binary: boolean): void {\n    var pathBin = get('pathOpenSSL') || process.env.OPENSSL_BIN || 'openssl'\n\n    testOpenSSLPath(pathBin, function (err: ErrNull) {\n        if (err) {\n            return callback(err)\n        }\n        var openssl = cpspawn(pathBin, params)\n\n        var stderr = (binary ? Buffer.alloc(0) : '')\n        var stdout = (binary ? Buffer.alloc(0) : '')\n        openssl.stdout.on('data', function (data) {\n            if (!binary) {\n                stdout += data.toString('binary')\n            } else {\n                stdout = Buffer.concat([stdout, data])\n            }\n        })\n\n        openssl.stderr.on('data', function (data) {\n            stderr += data.toString('binary')\n        })\n        // We need both the return code and access to all of stdout.  Stdout isn't\n        // *really* available until the close event fires; the timing nuance was\n        // making this fail periodically.\n        var needed = 2 // wait for both exit and close.\n        var code: Code = -1\n        var finished = false\n        var done = function (err?: ErrNull) {\n            if (finished) {\n                return\n            }\n\n            if (err) {\n                finished = true\n                return callback(err)\n            }\n\n            if (--needed < 1) {\n                finished = true\n                if (code !== 0) {\n                    if (code === 2 && (stderr === '' || /depth lookup: unable to/.test((stderr as string)) || /depth lookup: self(-|\\s)signed certificate/.test((stderr as string)))) {\n                        return callback(null, code, stdout, stderr)\n                    }\n                    return callback(new Error('Invalid openssl exit code: ' + code + '\\n% openssl ' + params.join(' ') + '\\n' + stderr), code)\n                } else {\n                    return callback(null, code, stdout, stderr)\n                }\n            }\n        }\n\n        openssl.on('error', done)\n\n        openssl.on('exit', function (ret) {\n            code = ret\n            done()\n        })\n\n        openssl.on('close', function () {\n            stdout = binary ? stdout : stdout.toString('utf-8')\n            stderr = stderr.toString('utf-8')\n            done()\n        })\n    })\n}\n\n/**\n * Wrapper for spawn method\n *\n * @static\n * @param {CallbackErrCodeStdoutSdrerr} callback Called with (error, exitCode, stdout, stderr)\n * @param {Array<string>} params The parameters to pass to openssl\n * @param {Array<string>} [tmpfiles] list of temporary files\n * @param {Boolean} [binary] Output of openssl is binary or text\n */\nexport function spawnWrapper(callback: CallbackErrCodeStdoutSdrerr, params: string[], tmpfiles?: Array<string | NodeJS.ArrayBufferView>, binary?: boolean): void {\n    if (binary === undefined) {\n        binary = false\n    }\n\n    var files: Array<{ path: string, contents: string | NodeJS.ArrayBufferView }> = []\n    var delTempPWFiles: Array<string> = []\n\n    if (tmpfiles !== undefined) {\n        tmpfiles = ([] as Array<string | NodeJS.ArrayBufferView>).concat(tmpfiles)\n        var fpath, i\n        for (i = 0; i < params.length; i++) {\n            if (params[i] === '--TMPFILE--') {\n                fpath = pathlib.join(tempDir, crypto.randomBytes(20).toString('hex'))\n                files.push({\n                    path: fpath,\n                    contents: tmpfiles.shift() !\n                })\n                params[i] = fpath\n                delTempPWFiles.push(fpath)\n            }\n        }\n    }\n\n    var file\n    for (i = 0; i < files.length; i++) {\n        file = files[i]\n        fs.writeFileSync(file.path, file.contents)\n    }\n\n    spawn(function (err: ErrNull, code?: Code, stdout?: StdOutErr, stderr?: StdOutErr) {\n        helper.deleteTempFiles(delTempPWFiles, function (fsErr: ErrNull) {\n            debug(params[0], {\n                err: err,\n                fsErr: fsErr,\n                code: code !,\n                stdout: stdout,\n                stderr: stderr\n            })\n            callback(err || fsErr, code, stdout, stderr)\n        })\n    }, params, binary)\n}\n\n/**\n * Validates the pathBin for the openssl command\n *\n * @private\n * @param {String} pathBin The path to OpenSSL Bin\n * @param {Function} callback Callback function with an error object\n */\nfunction testOpenSSLPath(pathBin: string, callback: CallbackErr): void {\n    which(pathBin, function (error: ErrNull) {\n        if (error) {\n            return callback(new Error('Could not find openssl on your system on this path: ' + pathBin))\n        }\n        callback(error)\n    })\n}\n\n/* Once PEM is imported, the openSslVersion is set with this function. */\nspawn(function (err: ErrNull, code?: Code, stdout?: StdOutErr, stderr?: StdOutErr): void {\n    var text = String(stdout) + '\\n' + String(stderr) + '\\n' + String(err)\n    let version = versionRegEx.exec(text)\n    if (version === null || version.length <= 7) return\n    set('openSslVersion', (version[1]).toUpperCase())\n    set('Vendor', (version[1]).toUpperCase())\n    set('VendorVersion', version[2])\n    set('VendorVersionMajorMinor', version[3])\n    set('VendorVersionMajor', version[4])\n    set('VendorVersionMinor', version[5])\n    set('VendorVersionPatch', version[6])\n    set('VendorVersionBuildChar', typeof version[7] === 'undefined' ? '' : version[7])\n}, ['version'], false)\n","module.exports = require(\"child_process\");","module.exports = require(\"crypto\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","import {name as convert_name} from './convert'\nimport {name as ca_name} from './ca'\nimport {name as helper_name} from './helper'\nimport {name as openssl_name} from './openssl'\n\n\nfunction run():void {\nconsole.log(convert_name)\nconsole.log(ca_name)\nconsole.log(helper_name)\nconsole.log(openssl_name)\n}\n\nrun()\n"]}