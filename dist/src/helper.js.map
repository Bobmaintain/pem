{"version":3,"file":"helper.js","sourceRoot":"","sources":["../../src/helper.ts"],"names":[],"mappings":"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","sourcesContent":["export const name: string = \"helper\"\n\nvar pathlib = require('path')\nvar fs = require('fs')\nvar crypto = require('crypto')\nvar osTmpdir = require('os-tmpdir')\nvar tempDir = process.env.PEMJS_TMPDIR || osTmpdir()\n\n/**\n * pem helper module\n *\n * @module helper\n */\n\n/**\n * helper function to check is the string a number or not\n * @param {String} str String that should be checked to be a number\n */\nexport function isNumber (str:any) {\n    if (Array.isArray(str)) {\n        return false\n    }\n    /*\n    var bstr = str && str.toString()\n    str = str + ''\n  \n    return bstr - parseFloat(bstr) + 1 >= 0 &&\n            !/^\\s+|\\s+$/g.test(str) && /^\\d+$/g.test(str) &&\n            !isNaN(str) && !isNaN(parseFloat(str))\n    */\n    return /^\\d+$/g.test(str)\n}\n\n/**\n * helper function to check is the string a hexaceximal value\n * @param {String} hex String that should be checked to be a hexaceximal\n */\nexport function isHex (hex:string) {\n    return /^(0x)?([0-9A-F]{1,40}|[0-9A-F]{1,40})$/gi.test(hex)\n}\n\n/**\n * helper function to convert a string to a hexaceximal value\n * @param {String} str String that should be converted to a hexaceximal\n */\nexport function toHex (str:string) {\n    var hex = ''\n    for (var i = 0; i < str.length; i++) {\n        hex += '' + str.charCodeAt(i).toString(16)\n    }\n    return hex\n}\n\n// cipherPassword returns an array of supported ciphers.\n/**\n * list of supported ciphers\n * @type {Array}\n */\nexport const ciphers = ['aes128', 'aes192', 'aes256', 'camellia128', 'camellia192', 'camellia256', 'des', 'des3', 'idea']\n\n/**\n * Creates a PasswordFile to hide the password form process infos via `ps auxf` etc.\n * @param {Object} options object of cipher, password and passType, mustPass, {cipher:'aes128', password:'xxxx', passType:\"in/out/word\"}, if the object empty we do nothing\n * @param {String} options.cipher cipher like 'aes128', 'aes192', 'aes256', 'camellia128', 'camellia192', 'camellia256', 'des', 'des3', 'idea'\n * @param {String} options.password password can be empty or at last 4 to 1023 chars\n * @param {String} options.passType passType: can be in/out/word for passIN/passOUT/passWORD\n * @param {Boolean} options.mustPass mustPass is used when you need to set the pass like as \"-password pass:\" most needed when empty password\n * @param {Array<string>} params params will be extended with the data that need for the openssl command. IS USED AS POINTER!\n * @param {Array<string>} PasswordFileArray PasswordFileArray is an array of filePaths that later need to deleted ,after the openssl command. IS USED AS POINTER!\n * @return {Boolean} result\n */\nexport function createPasswordFile(options:{\n    cipher: string,\n    password: string,\n    passType: string,\n    mustPass: boolean,\n}, params:string[], PasswordFileArray:string[]):boolean {\n    if (!options || !Object.prototype.hasOwnProperty.call(options, 'password') || !Object.prototype.hasOwnProperty.call(options, 'passType') || !/^(word|in|out)$/.test(options.passType)) {\n        return false\n    }\n    var PasswordFile = pathlib.join(tempDir, crypto.randomBytes(20).toString('hex'))\n    PasswordFileArray.push(PasswordFile)\n    options.password = options.password.trim()\n    if (options.password === '') {\n        options.mustPass = true\n    }\n    if (options.cipher && (ciphers.indexOf(options.cipher) !== -1)) {\n        params.push('-' + options.cipher)\n    }\n    params.push('-pass' + options.passType)\n    if (options.mustPass) {\n        params.push('pass:' + options.password)\n    } else {\n        fs.writeFileSync(PasswordFile, options.password)\n        params.push('file:' + PasswordFile)\n    }\n    return true\n}\n\n/**\n * Deletes a file or an array of files\n * @param {Array} files array of files that shoudld be deleted\n * @param {errorCallback} callback Callback function with an error object\n */\nexport function deleteTempFiles(files: string[], callback:Function) {\n    var rmFiles: string[] = []\n    if (typeof files === 'string') {\n        rmFiles.push(files)\n    } else if (Array.isArray(files)) {\n        rmFiles = files\n    } else {\n        return callback(new Error('Unexcepted files parameter type; only string or array supported'))\n    }\n    var deleteSeries = function (list:string[], finalCallback:Function):void {\n        if (list.length) {\n            var file = list.shift()\n            var myCallback = function (err:Error) {\n                console.log(err.constructor.name);\n                if (isError(err) && err.code === 'ENOENT') {\n                    // file doens't exist\n                    return deleteSeries(list, finalCallback)\n                } else if (err) {\n                    // other errors, e.g. maybe we don't have enough permission\n                    return finalCallback(err)\n                } else {\n                    return deleteSeries(list, finalCallback)\n                }\n            }\n            if (file && typeof file === 'string') {\n                fs.unlink(file, myCallback)\n            } else {\n                return deleteSeries(list, finalCallback)\n            }\n        } else {\n            return finalCallback(null) // no errors\n        }\n    }\n    deleteSeries(rmFiles, callback)\n}\n\n/**\n * @param error the error object.\n * @returns if given error object is a NodeJS error.\n */\nexport function isError(error: Error): error is NodeJS.ErrnoException {\n    return error instanceof Error;\n}\n\n/**\n * Callback for return an error object.\n * @callback errorCallback\n * @param {Error} err - An Error Object or null\n */\n"]}