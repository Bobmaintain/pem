{"version":3,"file":"openssl.js","sourceRoot":"","sources":["../src/openssl.ts"],"names":[],"mappings":"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","sourcesContent":["export const name: string = \"openssl\"\nimport * as helper from './helper'\nimport {CallbackErrCodeStdoutSdrerr, CallbackErrStdout, CallbackErr} from './interfaces'\nimport type {Code, ErrNull, Params, StdOutErr, TempFiles } from './types'\nimport {debug} from './debug'\nimport {spawn as cpspawn} from 'child_process'\nimport path_lib from 'path'\nimport {env} from \"process\"\nimport fs from 'fs'\nimport osTmpdir from \"os-tmpdir\"\nimport crypto from 'crypto'\nimport which from 'which'\n\nconst settings: any = {}\nconst tempDir = env.PEMJS_TMPDIR || osTmpdir()\n\nconst versionRegEx = new RegExp('^(OpenSSL|LibreSSL) (((\\\\d+).(\\\\d+)).(\\\\d+))([a-z]+)?')\n\nif (\"CI\" in env && env.CI === 'true') {\n    if (\"LIBRARY\" in env && \"VERSION\" in env && env.LIBRARY != \"\" && env.VERSION != \"\") {\n        const filePathOpenSSL = `./openssl/${env.LIBRARY}_v${env.VERSION}/bin/openssl`\n        if (fs.existsSync(filePathOpenSSL)) {\n            env.OPENSSL_BIN = filePathOpenSSL\n        }\n    }\n}\n\n/**\n * pem openssl module\n *\n * @module openssl\n */\n\n/**\n * configue this openssl module\n *\n * @static\n * @param {String} option name e.g. pathOpenSSL, openSslVersion; TODO rethink nomenclature\n * @param {*} value value\n */\nexport function set(option: string, value: any):void {\n    settings[option] = value\n}\n\n/**\n * get configuration setting value\n *\n * @static\n * @param {String} option name\n */\nexport function get(option?: string): any {\n    if (option) {\n    return settings[option] || undefined\n    }\n    return settings\n}\n\n/**\n * Spawn an openssl command\n *\n * @static\n * @param {CallbackErrStdout} callback Called with (error, stdout-substring)\n * @param {Array<string>} params Array of openssl command line parameters\n * @param {String} searchStr String to use to find data\n * @param {Array<string>} [tmpfiles] list of temporary files\n */\nexport function exec(callback: CallbackErrStdout, params: Params, searchStr: string): void;\nexport function exec(callback: CallbackErrStdout, params: Params, searchStr: string, tmpfiles?: TempFiles): void {\n\n    spawnWrapper(function (err: ErrNull, code?: Code, stdout?: StdOutErr, stderr?: StdOutErr): void {\n        if (err) {\n            return callback(err)\n        }\n\n        let start, end: number\n        let starttest, endtest: (RegExpMatchArray | null)\n\n\n        if ((starttest = (stdout! as string).match(new RegExp('-+BEGIN ' + searchStr + '-+$', 'mu'))) && starttest.index !== undefined) {\n            start = starttest.index\n        } else {\n            start = -1\n        }\n\n        // To get the full EC key with parameters and private key\n        if (searchStr === 'EC PARAMETERS') {\n            searchStr = 'EC PRIVATE KEY'\n        }\n\n        if ((endtest = (stdout! as string).match(new RegExp('^\\\\-+END ' + searchStr + '\\\\-+', 'm'))) && endtest.index !== undefined) {\n            end = endtest.index + endtest[0].length\n        } else {\n            end = -1\n        }\n\n        if (start >= 0 && end >= 0) {\n            return callback(null, (stdout! as string).substring(start, end))\n        } else {\n            return callback(new Error(searchStr + ' not found from openssl output:\\n---stdout---\\n' + stdout + '\\n---stderr---\\n' + stderr + '\\ncode: ' + code))\n        }\n    }, params, tmpfiles, false)\n}\n\n/**\n *  Spawn an openssl command and get binary output\n *\n * @static\n * @param {CallbackErrStdout} callback Called with (error, stdout)\n * @param {Array<string>} params Array of openssl command line parameters\n * @param {Array<string>} [tmpfiles] list of temporary files\n */\nexport function execBinary(callback: CallbackErrStdout, params: Params): void\nexport function execBinary(callback: CallbackErrStdout, params: Params, tmpfiles?: TempFiles): void {\n    spawnWrapper(function (err: ErrNull, code?: Code, stdout?: StdOutErr, stderr?: StdOutErr) {\n        debug(\"execBinary\", {err, code, stdout, stderr})\n        if (err) {\n            return callback(err)\n        }\n        return callback(null, stdout)\n    }, params, tmpfiles, true)\n}\n\n/**\n * Generically spawn openSSL, without processing the result\n *\n * @static\n * @param {CallbackErrCodeStdoutSdrerr}     callback Called with (error, exitCode, stdout, stderr)\n * @param {Array<string>}        params   The parameters to pass to openssl\n * @param {Boolean}      binary   Output of openssl is binary or text\n */\nexport function spawn(callback: CallbackErrCodeStdoutSdrerr, params: Params, binary: boolean): void {\n    var pathBin = get('pathOpenSSL') || env.OPENSSL_BIN || 'openssl'\n\n    testOpenSSLPath(pathBin, function (err: ErrNull) {\n        if (err) {\n            return callback(err)\n        }\n        var openssl = cpspawn(pathBin, (params as Array<string>))\n\n        var stderr = (binary ? Buffer.alloc(0) : '')\n        var stdout = (binary ? Buffer.alloc(0) : '')\n        openssl.stdout.on('data', function (data) {\n            if (!binary) {\n                stdout += data.toString('binary')\n            } else {\n                stdout = Buffer.concat([stdout, data])\n            }\n        })\n\n        openssl.stderr.on('data', function (data) {\n            stderr += data.toString('binary')\n        })\n        // We need both the return code and access to all of stdout.  Stdout isn't\n        // *really* available until the close event fires; the timing nuance was\n        // making this fail periodically.\n        var needed = 2 // wait for both exit and close.\n        var code: Code = -1\n        var finished = false\n        var done = function (err?: ErrNull) {\n            if (finished) {\n                return\n            }\n\n            if (err) {\n                finished = true\n                return callback(err)\n            }\n\n            if (--needed < 1) {\n                finished = true\n                if (code !== 0) {\n                    if (code === 2 && (stderr === '' || /depth lookup: unable to/.test((stderr as string)) || /depth lookup: self(-|\\s)signed certificate/.test((stderr as string)))) {\n                        return callback(null, code, stdout, stderr)\n                    }\n                    return callback(new Error('Invalid openssl exit code: ' + code + '\\n% openssl ' + params.join(' ') + '\\n' + stderr), code)\n                } else {\n                    return callback(null, code, stdout, stderr)\n                }\n            }\n        }\n\n        openssl.on('error', done)\n\n        openssl.on('exit', function (ret) {\n            code = ret\n            done()\n        })\n\n        openssl.on('close', function () {\n            stdout = binary ? stdout : stdout.toString('utf-8')\n            stderr = stderr.toString('utf-8')\n            done()\n        })\n    })\n}\n\n/**\n * Wrapper for spawn method\n *\n * @static\n * @param {CallbackErrCodeStdoutSdrerr} callback Called with (error, exitCode, stdout, stderr)\n * @param {Array<string>} params The parameters to pass to openssl\n * @param {Array<string>} [tmpfiles] list of temporary files\n * @param {Boolean} [binary] Output of openssl is binary or text\n */\nexport function spawnWrapper(callback: CallbackErrCodeStdoutSdrerr, params: Params, tmpfiles?: TempFiles, binary?: boolean): void {\n    if (binary === undefined) {\n        binary = false\n    }\n\n    var files: Array<{ path: string, contents: string | NodeJS.ArrayBufferView }> = []\n    var delTempPWFiles: Array<string> = []\n\n    if (tmpfiles !== undefined) {\n        tmpfiles = ([] as TempFiles).concat(tmpfiles)\n        var fpath, i\n        for (i = 0; i < params.length; i++) {\n            if (params[i] === '--TMPFILE--') {\n                fpath = path_lib.join(tempDir, crypto.randomBytes(20).toString('hex'))\n                files.push({\n                    path: fpath,\n                    contents: tmpfiles.shift() !\n                })\n                params[i] = fpath\n                delTempPWFiles.push(fpath)\n            }\n        }\n    }\n\n    var file\n    for (i = 0; i < files.length; i++) {\n        file = files[i]\n        fs.writeFileSync(file.path, file.contents)\n    }\n\n    spawn(function (err: ErrNull, code?: Code, stdout?: StdOutErr, stderr?: StdOutErr) {\n        helper.deleteTempFiles(delTempPWFiles, function (fsErr: ErrNull) {\n            debug((params[0] as string), {\n                err: err,\n                fsErr: fsErr,\n                code: code !,\n                stdout: stdout,\n                stderr: stderr\n            })\n            callback(err || fsErr, code, stdout, stderr)\n        })\n    }, params, binary)\n}\n\n/**\n * Validates the pathBin for the openssl command\n *\n * @private\n * @param {String} pathBin The path to OpenSSL Bin\n * @param {Function} callback Callback function with an error object\n */\nfunction testOpenSSLPath(pathBin: string, callback: CallbackErr): void {\n    which(pathBin, function (error: ErrNull) {\n        if (error) {\n            return callback(new Error('Could not find openssl on your system on this path: ' + pathBin))\n        }\n        callback(error)\n    })\n}\n\n/* Once PEM is imported, the openSslVersion is set with this function. */\nspawn(function (err: ErrNull, _code?: Code, stdout?: StdOutErr, stderr?: StdOutErr): void {\n    var text = String(stdout) + '\\n' + String(stderr) + '\\n' + String(err)\n    let version = versionRegEx.exec(text)\n    if (version === null || version.length <= 7) return\n    set('openSslVersion', (version[1]).toUpperCase())\n    set('Vendor', (version[1]).toUpperCase())\n    set('VendorVersion', version[2])\n    set('VendorVersionMajorMinor', version[3])\n    set('VendorVersionMajor', version[4])\n    set('VendorVersionMinor', version[5])\n    set('VendorVersionPatch', version[6])\n    set('VendorVersionBuildChar', typeof version[7] === 'undefined' ? '' : version[7])\n}, ['version'], false)\n"]}